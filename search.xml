<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DNS 缓存清理</title>
    <url>/2020/4/DNS%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86.html</url>
    <content><![CDATA[<h2 id="Windows-下清理"><a class="header-anchor" href="#Windows-下清理">¶</a>Windows 下清理</h2>
<pre class="line-numbers language-none"><code class="language-none"># 管理员身份运行 cmd
 
ipconfig /flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="Linux-下清理"><a class="header-anchor" href="#Linux-下清理">¶</a>Linux 下清理</h2>
<p>Linux DNS 缓存和 Windows 有些许不同，大部分的 Linux 是没有系统级缓存的，所以通过一些进程便可以达到清理 DNS 缓存的目的以下一份来自 StackOverflow 的解答：</p>
<blockquote>
<p>On Linux (and probably most Unix), there is no OS-level DNS caching unless nscd is installed and running. Even then, the DNS caching feature of nscd is disabled by default at least in Debian because it’s broken. The practical upshot is that your linux system very very probably does not do any OS-level DNS caching.<br>
You can look around in the resolv subdirectory of the glibc source code, it’s all there. That’s not a specific answer, I realize, but it comes down to the fact that there’s no code in there that implements a cache and in any case you can see if you trace it that it makes no use of any file or shared memory segment or other kind of location where this cache could potentially be stored.</p>
</blockquote>
<p>Linux 下的 DNS 守护进程大多为 nscd、dnsmasq、systemd-resolved 等</p>
<pre class="line-numbers language-none"><code class="language-none">## nscd 三种操作均可
sudo /etc/init.d/nscd restart
sudo systemctl restart nscd
sudo systemctl reload nscd
 
 
## dnsmasq 两种操作均可
sudo /etc/init.d/dnsmasq restart
sudo systemctl restart dnsmasq
 
 
## systemd-resolved
sudo systemd-resolve --flush-caches
 
 
## 除此之外，还可以使用 dns-clean 来进行清理
sudo /etc/init.d/dns-clean start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="浏览器-DNS-缓存清理"><a class="header-anchor" href="#浏览器-DNS-缓存清理">¶</a> 浏览器 DNS 缓存清理</h2>
<ul>
<li>chrome</li>
</ul>
<ol>
<li> 地址栏输入 chrome://net-internals/#dns</li>
<li> 点击 “清除主机缓存 / Clear Host Cache”</li>
<li> 如果上述步骤不行的话，按下 CTRL+Shift+Del 打开 “清除浏览数据” 对话框</li>
<li>选择时间范围（选择 “所有时间”）</li>
<li>选中 “Cookie 和其他站点数据” 和 “缓存的图像和文件”</li>
<li> 点击 “清除数据”</li>
</ol>
<ul>
<li>FireFox</li>
</ul>
<ol>
<li> 点击右上角 Firefox 菜单</li>
<li>点击 Options（Preference）</li>
<li>点击左侧 “隐私和安全性” 或 “隐私” 选项卡</li>
<li>滚动到 History 部分，点击 “Clear History”</li>
<li> 选择所有框，点击 “立即清除”</li>
<li> 如果上述步骤不管用，在地址栏中输入 about:config</li>
<li> 搜索 network.dnsCacheExpiration，将值暂时设置为 0，然后点击 “确定” 后在恢复默认值，点击 “确定”</li>
<li> 搜索 network.dnsCacheEntries，将值暂时设置为 0，然后点击 “确定” 后在恢复默认值，点击 “确定”</li>
</ol>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年度总结</title>
    <url>/2024/3/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>2023 年过的很快，感觉啥也没干就结束了，但是相比于过去的两年，2023 年过得还是相对比较精彩的：</p>
<ul>
<li>去了几个城市旅游</li>
<li>开始健身</li>
<li>重新搭建了 <code>home-lab</code> 环境</li>
<li>开始带团队</li>
</ul>
<span id="more"></span>
<style>
.page-post-detail .post-body .group-picture-column {
  float: none;
  margin-top: 5px;
  // width: auto ;
  img { margin: 0 auto;  width: 100% ; }
}
.fancybox {
    display: inline-block;
}
</style>
<h3 id="工作"><a class="header-anchor" href="#工作">¶</a> 工作</h3>
<p>22 年的时候换了工作，从上海搬到杭州，用同样的租金在杭州获得了 <strong>50%</strong> 的租房面积提升。由于是老牌的 TP 公司，在技术上有很多陈年旧账需要慢慢去修，除了每年要感受两波大促紧锣密鼓的节奏之外，还需要天天吐槽 N 年以前留下来的天坑～</p>
<p>最大的改变就是从原来的孤军奋战变成了带着小团队进行战斗，再次拓宽了自己的技能点（深感带团队的不易），目前主要遇到的问题如下：</p>
<ul>
<li>自己的时间不够用，更别提带教</li>
<li>与下属做事的认知差异比较大，自己想把活干到自己认知的 <code>80 分</code>甚至 <code>90 分</code>，但是团队其他人受限于工作经历和认知，大多只知道 <code>60 - 70 分</code>的标准是什么样的</li>
<li>很多运维的观念和认知难以传递，可能也受限于他们过往的经历以及我个人的输出</li>
</ul>
<p>后续空下来了还是需要多看看团队管理的书来弥补一下这方面的短板。</p>
<h3 id="旅游"><a class="header-anchor" href="#旅游">¶</a> 旅游</h3>
<p>一年下来，跑了很多地方，基本上就是三个假期 —— 五一、国庆以及元旦，虽然五一和元旦人是真的多（疫情后第一波），但快乐是真的快乐～</p>
<h4 id="宁波-舟山"><a class="header-anchor" href="#宁波-舟山">¶</a> 宁波 &amp; 舟山</h4>
<p>得益于 22 年底买了车，因此五一的时候想着来个自驾游。最初是想着从杭州一路向南开到福州或者厦门然后再开回来，但是后来想想五一期间肯定会堵成狗，而且整辆车上只有我一个人开车，好像对司机极为不友好，因此将自驾方案修改为：<strong>杭州 → 宁波 → 舟山 → 杭州</strong></p>
<p>住宿安排如下</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>地点</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2023-04-29</code> - <code>2023-04-30</code></td>
<td>宁波凯利开元名庭大酒店</td>
<td>￥464 / Day</td>
</tr>
<tr>
<td><code>2023-04-30</code> - <code>2023-05-01</code></td>
<td>舟山朱家尖静清风名宿</td>
<td>￥723 / Day</td>
</tr>
</tbody>
</table>
<p>舟山的民宿五一期间真的贵的要死，尤其是靠海近的，我们找的这家还算是性价比不错的了</p>
<p>第一天在宁波中午吃了一顿 <code>甬上名灶</code>，晚上吃了一顿 <code>加餐</code>，总的来说都是排队到死，可能这就是五一黄金周的魅力所在吧😒</p>
<blockquote>
<p>后来回了杭州又吃了两回 <code>加餐</code>，当时觉得还是很不错的，但是吃多了也就那样了</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-1.jpg" alt="甬上名灶-1"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-2.jpg" alt="甬上名灶-2"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-3.jpg" alt="甬上名灶-3"></div></div><div class="group-picture-row"></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-4.jpg" alt="甬上名灶-4"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-5.jpg" alt="甬上名灶-5"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E7%94%AC%E4%B8%8A%E5%90%8D%E7%81%B6-6.jpg" alt="甬上名灶-6"></div></div><div class="group-picture-row"></div></div>
<p>以上为 <code>甬上名灶</code> 部分菜品，可供参考，<code>加餐</code> 是自助餐，因此没啥可看的</p>
<hr>
<p>来回舟山的路途比较曲折，同样都是拜黄金周所赐，路上堵车到心态爆炸😠</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E8%88%9F%E5%B1%B1-1.jpg" alt="舟山-1"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E8%88%9F%E5%B1%B1-2.jpg" alt="舟山-2"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E8%88%9F%E5%B1%B1-3.jpg" alt="舟山-3"></div></div><div class="group-picture-row"></div></div>
<p>以上是堵了一上午到舟山吃的第一顿饭，也是人生第一次吃到了小青龙～</p>
<p>晚上是民宿老板做的饭，有一说一，老板的手艺很不错，只是这两天天天都在吃海鲜，并且都是差不多的做法属实有些吃腻了<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E6%B0%91%E5%AE%BF%E6%99%9A%E9%A4%90.jpg" alt="舟山民宿"></p>
<p>第二天开车在大青山上兜了一圈，看看风景还是很舒服的<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%A4%A7%E9%9D%92%E5%B1%B1-1.jpg" alt="大青山-1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%A4%A7%E9%9D%92%E5%B1%B1-2.jpg" alt="大青山-2"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%A4%A7%E9%9D%92%E5%B1%B1-3.jpg" alt="大青山-3"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%A4%A7%E9%9D%92%E5%B1%B1-4.jpg" alt="大青山-4"></p>
<h4 id="大连-沈阳"><a class="header-anchor" href="#大连-沈阳">¶</a> 大连 &amp; 沈阳</h4>
<p>得益于五一在路上开车被堵怕了，国庆打算直接坐飞机去远一点的地方，免得被堵在路上。在东北、中原以及东南三个方位考察一番后（主要还是考察机酒价格），最终还是决定去东北快活一下，主要行程如下：</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>地点</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2023-09-30</code> - <code>2023-10-02</code></td>
<td>全季大连星海广场胜利路店</td>
<td>￥799 / Day</td>
</tr>
<tr>
<td><code>2023-10-02</code> - <code>2023-10-03</code></td>
<td><s>雅致・永乐汇</s> 宜尚酒店沈阳南塔鞋城陆军总院店</td>
<td>￥397 / Day</td>
</tr>
<tr>
<td><code>2023-10-03</code> - <code>2023-10-04</code></td>
<td>沈阳青年大街万科中心亚朵 S 酒店</td>
<td>￥607 / Day</td>
</tr>
</tbody>
</table>
<p>前两天在大连，看了海也吃了海鲜，排了两个小时的队终于吃上了 <code>喜鼎水饺</code>；逛了博物馆，也坐了百年电车，逛了毛子街，也吃了烧烤；最后和前同事（大连人）碰了个头，吃了顿饭就坐上了赶往沈阳的高铁</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%BF%84%E8%A1%97%E8%8A%B1%E5%9B%AD.jpg" alt="俄街花园"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%96%82%E6%B5%B7%E9%B8%A5.jpg" alt="喂海鸥"></div></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%98%9F%E6%B5%B7%E5%B9%BF%E5%9C%BA-1.jpg" alt="星海广场"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%94%B5%E8%BD%A6%E8%BD%A8%E9%81%93.jpg" alt="电车轨道"></div></div></div>
<p>原先在沈阳是想体验一下洗浴文化，然后在洗浴中心借宿一宿 <s>（可以省下一笔酒店费用）</s>，但我确实没想到和我们有一样想法的人是在太多，洗完澡出来发现根本没有地方能坐的，更不要说借宿一宿了，最终我们紧急决定离开并找了一家酒店解决睡觉问题。</p>
<p>沈阳的第二天就又开始了特种兵之行：<strong>小河沿早市 → 沈阳故宫 → 中街步行街 → 中国工业博物馆 → 西塔民族文化街</strong></p>
<p>讲道理不出来走一走真不知道自己这么能走，<s>也真不知道咱们祖国有这么多人</s> 任何景点都是人山人海，仿佛所有大众点评上能够搜到的地方都是人山人海。不过有一说一，东北的物价是真的便宜，只要不是在商场 / 步行街 / 景点，吃饭都很便宜！</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B2%88%E9%98%B3%E6%95%85%E5%AE%AB.jpg" alt="沈阳故宫"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B2%88%E9%98%B3%E6%AD%A5%E8%A1%8C%E8%A1%97.jpg" alt="步行街"></p>
<hr>
<h4 id="吉隆坡-槟城"><a class="header-anchor" href="#吉隆坡-槟城">¶</a> 吉隆坡 &amp; 槟城</h4>
<p>马来西亚的旅游是谋划了很久的，早在 <code>2019</code> 底的时候就已经计划过这段旅行了，当时机酒什么的都已经订好了，结果就在出发前一个半月爆发了口罩事件😷，人生第一次的出国旅游就只好作罢。</p>
<p>时隔四年，大马又重新对中国实行免签政策，我就知道我的机会又来了！！随即买票订酒店，重新开启境外之旅</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>始发地</th>
<th>目的地</th>
<th>航班 / 班次</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2023-12-26</code></td>
<td>杭州</td>
<td>吉隆坡</td>
<td> MU5095 空客 320</td>
<td> 有早餐</td>
</tr>
<tr>
<td><code>2023-12-28</code></td>
<td>吉隆坡 (KL Sentral)</td>
<td> 槟城 (ButterWorth)</td>
<td>K231194694479</td>
<td> 二等座</td>
</tr>
<tr>
<td><code>2023-12-31</code></td>
<td>槟城</td>
<td>吉隆坡</td>
<td> AK6139</td>
<td> 无餐食</td>
</tr>
<tr>
<td><code>2024-01-02</code></td>
<td>吉隆坡</td>
<td>杭州</td>
<td> MU5096 空客 320</td>
<td> 无餐食</td>
</tr>
</tbody>
</table>
<p>没错，旅行的顺序就是 <strong>杭州 → 吉隆坡 → 槟城 → 吉隆坡 → 杭州</strong>，看似很绕，实际上一点也不轻松😫。主要是槟城到杭州没有直飞的航班，无论如何都得从吉隆坡转机，所以想着还不如飞回吉隆坡再玩两天（事实证明我这个想法是真的不成熟）</p>
<p>去的时候我对榴莲还不是很狂热，因此也没有在大马狂炫榴莲（虽然 12 月底也算是大马每年的第二个榴莲季），所以这次旅游也只是满足了自己一个出国的好奇心，涨了一波见识。那么在这里我简单对吉隆坡和槟城这两个城市评价一下：</p>
<p>吉隆坡：</p>
<ul>
<li>在世界层面都算是比较繁华的大都市，但繁华的也仅仅是市中心的部分，出了市中心就是破败的小农村</li>
<li>地铁和高铁都不用安检（后来才知道好像只有国内会安检）</li>
<li>夜市 / 小吃没有特别出彩，马来特色很重，种类不多，喜欢吃的不太建议来吉隆坡</li>
<li>商场很多，也很大，尤其是市中心的区域，可以逛一整天</li>
</ul>
<p>槟城：</p>
<ul>
<li>以人文而出名 (槟城本身就被列入世界非遗)，不适合买买买，但是适合逛吃</li>
<li>夜市 / 小吃多元化，既有马来本土的也有融合了其他民族的特色的美食</li>
<li>生活节奏很慢，不像吉隆坡商业气息很重，槟城就像是国内三四线的小城镇</li>
<li>盛产榴莲，品质世界顶级</li>
</ul>
<p>还有很多在大马可以看到的现象：</p>
<ul>
<li>由于油价便宜，在大马根本看不到新能源车，全是油车和摩托</li>
<li>大马的红绿灯上有行人按钮，貌似按下去会加快绿灯的到来</li>
<li>大马的高铁和客车座位非常之宽敞，尽管买的是二等座也能坐得很舒服（2+2 的座位排列，国内二等座是 3+2）</li>
<li>大马车内空调冷气给的非常足，在高铁坐着需要穿长袖长裤的程度</li>
<li>街边小店一般没有空调，只有风扇</li>
<li>由于地处热带，湿气很重，大多食物都会用姜等辛辣的香料进行调味，吃不惯的肯定吃不惯 </li>
</ul>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E6%A7%9F%E5%9F%8E%E8%90%BD%E6%97%A5.jpg" alt="槟城落日"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E6%A7%9F%E5%9F%8E%E7%A0%81%E5%A4%B4.jpg" alt="槟城码头"></div></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%A7%93%E6%9D%A8%E6%A1%A5.jpg" alt="姓杨桥"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/%E5%90%89%E9%9A%86%E5%9D%A1%E5%A4%9C%E6%99%AF.jpg" alt="吉隆坡夜景"></div></div></div>
<h3 id="Homelab"><a class="header-anchor" href="#Homelab">¶</a>Homelab</h3>
<p>由于 <code>NAS01</code> 的存储空间使用率已经超 <code>70%</code>，考虑到未来几年可能用不了多久就会满，<code>NAS02</code> 上线计划就不得不被提上日程了。同时考虑到扩展性，<code>NAS02</code> 我将使用 <a href="https://item.taobao.com/item.htm?spm=a1z10.1-c-s.w4004-24104078742.3.6c5d40c0IavLnW&amp;id=623691495114">6 盘位 NAS 机箱</a>。</p>
<p>为了一步到位，这次也在五一期间采购一个网络机柜，将 <code>交换机</code>、<code>虚拟化服务器</code>、<code>NAS01</code> 以及 <code>NAS02</code> 都安排进去了，未来需要折腾的就是这个网络机柜的散热设计了，夏天一定会热成狗，尤其是我现在租的房子是边套，这个机柜所靠的墙体是会被阳光直射的，夏天墙体温度极高。</p>
<p>这次扩容直接在原来 <code>12.21TB</code> 的空间基础上，又增加了 <code>25.63TB</code> 的空间，这下子可以算是吃喝不愁了，哈哈哈哈哈！！</p>
<h3 id="健身"><a class="header-anchor" href="#健身">¶</a> 健身</h3>
<p>最后我在 <code>2023</code> 给自己培养了一个全新的爱好 —— <strong>健身</strong>。自三月份开始力量训练以来，我对于健身（多以力量训练为主）可以说是达到了一种上瘾的程度。</p>
<p>特别是八月份的时候膝盖受伤，导致了下半年我没法练下肢和体能，甚至也没法做有氧，直接 <strong>胸、背、核心</strong>三分化训练，一周胸部两练直接让我卧推成绩从 <code>30KG</code> 做组提升到了 <code>60KG</code> 做组，颇有成就感。当然疯狂的上肢训练也让我上下肢比例看起来非常不协调，等腿好了之后也会开始恢复腿部训练。</p>
<p>因为健身的关系，现在生活变得更加的健康和规律，吃的不仅变干净了，也变的更加营养和均衡。为此自己也学习到了非常多的营养学知识以及运动学知识，日常生活更是变得充实了起来～～</p>
<p><strong>2024，加油，奥里给！！</strong></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Dell 7559 升级</title>
    <url>/2018/6/Dell-7559-%E5%8D%87%E7%BA%A7.html</url>
    <content><![CDATA[<p>昨天刚和杨老板达成了 PY 交易，今天货就到了，还真是快啊。淘宝链接我就不给了，大家自行搜索<code>内存之家</code>（原<code>配件之家</code>），粉丝数很少的那个就是了。</p>
<span id="more"></span>
<h4 id="开箱与安装"><a class="header-anchor" href="#开箱与安装">¶</a> 开箱与安装</h4>
<p>本次的产品是一张 WD 的 <code>Green Sata SSD M.2 2280</code> 120G 版本的，还有一张海力士的 8G DDR3L 1600 的内存。至于为什么 SSD 和内存不买好一点的呢，其实是因为我这台是 15 年的本子，也不想给他上太好的 SSD 和内存了，而且为了和原来的内存保持同一频率，所以只能上了 DDR3L 的条子，反正过不了几年就隐退二线了。</p>
<p>下面进行开箱<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%AD%E9%97%B4%E4%B8%A4%E4%B8%AA%E5%B0%B1%E6%98%AF%E4%BB%8A%E5%A4%A9%E7%9A%84%E4%B8%BB%E8%A7%92%E5%95%A6.jpg" alt="中间这两个就是今天的主角啦"><br>
真的是让人眼前一绿啊。</p>
<p>这台老机子是 <code>Dell Inspiron 7559</code>，也就是传说中的游匣，只不过比较古老了。不过好处呢就是 D 面只有一颗螺丝，拆起来非常的方便。一如既往的，我把电池留在本子上就开始装内存条和 SSD 了（不要问我哪儿来的勇气，我也不知道）。</p>
<h4 id="测评"><a class="header-anchor" href="#测评">¶</a> 测评</h4>
<h5 id="内存"><a class="header-anchor" href="#内存">¶</a> 内存</h5>
<p>首先内存并没有什么问题，正常开机后 Bios 提示我内存更换过，不鸟他继续进入系统。系统也是顺利的读取出了新的内存，并没有发生不兼容的情况。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FCPU_Z%E7%9A%84%E6%95%B0%E6%8D%AE.png" alt="CPU-Z 数据"></p>
<p><em>其实之前我的内存就是一根金士顿和一根海力士的组合，所以这次还是海力士应该不会翻车</em></p>
<p>下面我们来做一下内存的读写测试</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%B5%8B%E8%AF%95.png" alt="内存读写测试"></p>
<p>可以看到给出的 <code>Read</code> 数据为 <code>23308 MB/s</code>，<code>Write</code> 数据为 <code>23556 MB/s</code>，<code>Copy</code> 数据为 <code>23069 MB/s</code>，这个数据在 DDR3L 的笔记本内存上来说也算是客观的了。不过使用体验这种东西也不能只看数据，还得看实际使用。</p>
<h5 id="SSD"><a class="header-anchor" href="#SSD">¶</a>SSD</h5>
<p>包装盒上只给了我 <code>545 MB/s</code> 的读取速度，我又去网上搜了下，给出的写入速度是 <code>400~500 MB/s</code> 的样子，下面我们测一下看看</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FSSD_Read%E6%B5%8B%E8%AF%95.jpg" alt="SSD Read 测试"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FSSD_Random_Write%E6%B5%8B%E8%AF%95.jpg" alt="SSD Random Write 测试"></p>
<p>emmmmm，一部分原因是我硬件没有能够把 SSD 全部性能带出来，另一部分原因也是这张条子有一定的缩水，大家心知肚明就好。(当年不懂顺序读写和随机读写的区别，误以为 400~500 MB/s 是随机性能)</p>
<p>我们来迁移系统（不要问我为什么不重装系统，就是懒）再测一次看看</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%BF%81%E7%A7%BB%E5%AE%8C%E7%B3%BB%E7%BB%9F%E5%90%8E.png" alt="迁移系统后"></p>
<p>诶？性能怎么又上来了？</p>
<p><strong>不好意思，测试数据我用的是 <code>50MiB</code></strong>（皮这一下还挺开心😄）</p>
<p><strong>实际上迁移系统对 SSD 的性能还是有影响的，所以大家最好不要偷懒学我迁移系统，最好就是重装比较好。</strong></p>
<h4 id="最后"><a class="header-anchor" href="#最后">¶</a> 最后</h4>
<p>电脑没有装喜闻乐见的娱乐大师，所以就没有跑分了。</p>
<p>至于你们想要的开机启动时间，没有装管家也没有装卫士，又让你们失望了。</p>
<p>不过开机时间比以前少了，但是应该赶不上主流的 SSD。自从装了双系统开机就变得极慢无比，按道理来说双系统应该和开机速度没有关系才对；前段时间更新了 <code>win10</code> 的春季创意者更新之后开机就更加尿崩了，所以才入手了一块 SSD。</p>
<p>说到开机，目前有一个小问题，Bios 一旦开启 <code>Secure Boot</code> 就炸了，<code>Windows</code> 和 <code>Ubuntu</code> 都进不去，至今未解决。（实际上是因为当年的 Ubuntu 还不支持 Secure Boot，多数主板还不认 Linux 的签名）</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Laptop</tag>
      </tags>
  </entry>
  <entry>
    <title>Dict 和 Set</title>
    <url>/2017/4/Dict%E5%92%8CSet.html</url>
    <content><![CDATA[<h4 id="Dict"><a class="header-anchor" href="#Dict">¶</a>Dict</h4>
<p>Python 内置了字典 Dict（全称 Dictionary），使用键 - 值（key-value）存储，具有极快的查找速度。Dict 的查找原理和查字典类似，key 就相当于字典的索引，Python 可以通过 key 计算出所对应的 value 存放的内存地址，直接取出，所以查找速度快。<br>
Dict 的初始化很简单，语法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; dict = {key1' : value1, 'key2' = value2, 'key3' = value3}
&gt;&gt;&gt; dict['key2']
value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一个 key 只能对应一个 value，所以当我们对一个 key 多次赋值时会将前一个 value 覆盖掉。由于需要查找的 key 不存在时，dict 会报错，为了避免 key 不存在的情况，Python 提供了两种方法：</p>
<ul>
<li>通过 <code>in</code> 判断，如果 key 存在，就返回 <code>True</code>，反之返回 <code>False</code>：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; `key` in dict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>通过 <code>get</code> 判断，如果 key 不存在就返回 None（<em>返回 None 的时候交互式命令行不显示结果</em>），也可以是自己指定返回的内容：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; dict.get('key')     #返回None
&gt;&gt;&gt; dict.get('key',-1)      #返回自己指定的值`-1`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>删除 Dict 可以使用 <code>dict.pop(key)</code> 方法，对应的 value 也会从 dict 中删除。<br>
Dict 内部的存放顺序和 key 的放入没有关系，Dict 的查找和插入速度不会随着 key 的增加而变慢，需要占用大量的内存，是一种用空间来换取时间的方法。</p>
<h4 id="Set"><a class="header-anchor" href="#Set">¶</a>Set</h4>
<p>Set 和 Dict 类似，也是一组 key 的集合，但是不存储 value。由于 key 不能重复，所以在 set 中没有重复的 key。要创建一个 set 需要提供一个 list 作为输入的集合：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; s = set([1,2,3,4,5])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重复的元素会被 set 自动过滤，可以通过 <code>add(key)</code> 方法向 set 添加元素，通过 <code>remove(key)</code> 方法删除元素。我们可以将 set 看作数学意义上的集合，因此，两个 set 之间可以做数学意义上的交 (&amp;)、并 (|) 集等运算</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ESXi 快照机制</title>
    <url>/2020/6/ESXi-%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://kb.vmware.com/s/article/1015180">Understanding VM Sanpshots in ESXi</a><br><br>
<a href="https://kknews.cc/code/y5pnlkj.html">VMware vSphere 6.7 虚拟机快照原理及 Veeam Backup 备份</a><br><br>
<a href="https://docs.vmware.com/cn/VMware-vSphere/6.5/com.vmware.vsphere.virtualsan.doc/GUID-1D6AD25A-459A-43D6-8FF5-52475499D6A2.html">vSAN 中的闪存缓存设备设计注意事项</a></p>
</blockquote>
<h3 id="初时虚拟磁盘文件"><a class="header-anchor" href="#初时虚拟磁盘文件">¶</a> 初时虚拟磁盘文件</h3>
<p>ESXi 虚拟机的存储文件主要为 .vmx、.vmsd、.vmdk 等文件，其中对于 .vmdk 文件：</p>
<ul>
<li>xx.vmdk：该文件保存的是磁盘的元数据，包括 xx-flat.vmdk 和 xx-ctk.vmdk 文件</li>
<li> xx-flat.vmdk：该文件为 Extent Description 二级制文件啊，二级制数据保存在此文件中</li>
<li> xx-ctk.vmdk：该文件为 CTK 文件，CBT（数据块修改跟踪）启动时自动生成 </li>
</ul>
<h3 id="快照"><a class="header-anchor" href="#快照">¶</a> 快照</h3>
<p>快照创建过程中，新增以下文件：</p>
<ul>
<li>**-000001.vmdk</li>
<li>**-000001-ctk.vmdk</li>
<li>**-000001-delta.vmdk（基础 vmdk 上的变更位图）</li>
<li>**-Snapshot*.vmsn（快照状态文件）</li>
</ul>
<h4 id="快照创建过程简单描述如下"><a class="header-anchor" href="#快照创建过程简单描述如下">¶</a> 快照创建过程简单描述如下</h4>
<ol>
<li>当虚拟机未创建快照时，虚拟机的读写操作直接在 VMDK 文件进行；</li>
<li>当虚拟机创建第一个快照时，这时生成 **-000001-delta.vmdk 和 **-000001.vmdk 文件，并立即锁住源 VMDK 文件，将其变为只读状态。虚拟机的写操作均在 **-000001.vmdk 上进行，读操作将在 **.vmdk 和 **-000001.vmdk 上进行（具体基于需要读的数据所在位置）；</li>
<li>再次创建快照的原理和之前一样，生成 **-000002-delta.vmdk 和 **-000002.vmdk 文件，锁住 **-000001.vmdk 文件，将其变为只读状态。</li>
</ol>
<h3 id="注意点"><a class="header-anchor" href="#注意点">¶</a> 注意点</h3>
<ul>
<li>对于有用快照的虚拟机做写操作时，均在新的 vmdk 文件进行，如果数据在父 vmdk 上（被锁住成只读的 vmdk），先将数据拷贝到新的 vmdk 上，再进行修改；</li>
<li>当读取某一块数据时，ESXi 需要判断从哪里去读：对于没有修改的数据块，从父 vmdk 读，对于已经修改的数据块，从新的 vmdk 上读。</li>
<li>整合多个虚拟机快照时，主机会短暂无响应</li>
</ul>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>ESXi</tag>
      </tags>
  </entry>
  <entry>
    <title>Ext4 文件系统缩容</title>
    <url>/2019/10/Ext4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%A9%E5%AE%B9.html</url>
    <content><![CDATA[<p>由于 <code>XFS</code> 文件系统不支持缩容，所以这里只讨论 <code>Ext4</code> 缩容的情况。</p>
<p><code>Ext4</code> 文件系统调整的命令为 <code>resize2fs</code>，在使用这个命令前，我们需要将我们需要缩容的文件系统所在分区进行调整，由于 <code>LVM</code> 的调整相对简单，这里不做描述。</p>
<p>如果需要调整的分区非系统盘，则可以直接先卸载已挂载的文件系统，然后进行操作；若需要调整的分区在系统盘上，则需要进入 <code>LiveCD</code> 的 <code>shell</code> 环境进行操作。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo -i
 
 
## 文件系统缩容
e2fsck -f /dev/sda4
resize2fs /dev/sda4 &lt;想要变成的大小&gt;（如 200G）
 
 
## 缩小分区
fdisk /dev/sda
 
 
# 键入 p 查看当前分区信息，记下要缩小的分区的 start 值
 
 
# 键入 d 选择要删除的分区
 
 
# 键入 n 新建分区，确认 start 值为刚刚原分区记录下来的 start 值
# end 设置为 +&lt;你想要的大小&gt;（如 +200G）
 
 
# 键入 p 确认分区大小没有问题后，键入 w 保存退出
 
 
# 重新 resize 文件系统
resize2fs /dev/sda4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Filesystem</tag>
      </tags>
  </entry>
  <entry>
    <title>Galera 集群搭建</title>
    <url>/2021/8/Galera-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<h3 id="Galera-简介"><a class="header-anchor" href="#Galera-简介">¶</a>Galera 简介</h3>
<p>Galera Cluster 是基于 MySQL/Innodb 二次开发而成的一个支持 “多主同步” 的数据库主从集群。具备多主、同步复制、高可用等特点。</p>
<p>MariaDB Galera Cluster，由 MariaDB 和 MySQL-wsrep 补丁实现，同 Percona 的 PXC 数据库集群，目前只支持运行在 Linux 系统上。从 MariaDB 10.1 版开始，MariaDB Server 和 MariaDB Galera Server 安装包已经合并，安装 MariaDB 时，Galera 相关依赖安装包会自动安装，像内置的插件或存储引擎一样，通过简单配置即可启用。</p>
<h3 id="Galera-集群状态"><a class="header-anchor" href="#Galera-集群状态">¶</a>Galera 集群状态</h3>
<p>查看集群状态</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'wsrep_local_state_comment'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"> Open</td>
<td style="text-align:center"> 节点启动成功，尝试连接到集群；如果失败则根据配置退出或者创建新集群</td>
</tr>
<tr>
<td style="text-align:center"> Primary</td>
<td style="text-align:center"> 节点已处于集群中，在新节点加入时，选取 donor 进行数据同步时会产生的状态</td>
</tr>
<tr>
<td style="text-align:center"> Joiner</td>
<td style="text-align:center"> 节点处于等待接收 / 接收同步文件的状态</td>
</tr>
<tr>
<td style="text-align:center"> Joined</td>
<td style="text-align:center"> 节点完成数据同步，但有部分数据没跟上，在尝试保持和集群进度一致的过程状态。<br>例如某个节点故障后，重新加入集群，在追赶集群进度时的状态</td>
</tr>
<tr>
<td style="text-align:center"> Synced</td>
<td style="text-align:center"> 节点正常提供服务的状态，表示已经同步完成并和集群进度保持一致</td>
</tr>
<tr>
<td style="text-align:center"> Donor</td>
<td style="text-align:center"> 节点处于为新节点提供全量数据同步时的状态。此时该节点对客户端不提供服务 </td>
</tr>
</tbody>
</table>
<h3 id="基本概念"><a class="header-anchor" href="#基本概念">¶</a> 基本概念</h3>
<ol>
<li>
<p>Primary Component：在网络发生故障时，由于网络连接原因，集群可能被分成好几个小集群，但只能有一个集群可以继续进行数据修改，集群的这部分称为 Primary Component</p>
</li>
<li>
<p>GTID：Global Transaction ID，由 UUID 和 sequence number 偏移量组成。wsrep api 中定义的集群内部全局事务 id，一个顺序 ID，用于记录集群中发生状态改变的唯一标识以及队列中的偏移量</p>
</li>
<li>
<p>SST：State Snapshot Transfer（状态快照迁移），集群中数据共享节点通过从一个节点到另外一个节点迁移完整的数据拷贝（全量拷贝）。当一个新的节点加入到集群中，新的节点从集群中已有节点同步数据，开始进行状态快照迁移，可以在 Galera 集群中选择两种不同的状态转移方法</p>
<p>3.1 逻辑数据转移：采用 mysqldump 命令，在转移之前，需要数据接收方服务器完全启动，并准备好接受数据的连接准备。这是一个阻塞式方法，数据共享节点 Donor 在状态转移节点处于只读状态，在数据共享节点 Donor 上适用 FLUSH TABLES WITH READ LOCK 命令，mysqldump 是速度最慢的 SST 方法，在负载比较的数据库集群上可能是个问题。</p>
<p>3.2 物理数据转移：该方法采用 rsync、rsync_wan、xtrabackup 或其他方法从服务器之间直接拷贝数据，数据接受服务器在拷贝完数据后启动服务器。该方法较 mysqldump 速度较快，但存在一定的限制，只能在服务器启动时采用，数据接受服务器需要同数据共享服务器 Donor 配置相同（例如，服务器间 innodb_file_per_table 配置必须完全一致）。</p>
</li>
<li>
<p>IST：Incremental State Transfer（增量状态迁移），集群一个节点通过识别新加入节点缺失的事务操作，将该操作发送，而并不像 SST 那样的全量数据拷贝。该方法只在特定条件下可用：</p>
<p>4.1 新加入节点的状态 UUID 与集群组中节点一致；</p>
<p>4.2 新加入节点所缺失的写数据集 write-sets 可以在 Donor 的写数据集 write-sets 存在。</p>
</li>
</ol>
<h3 id="搭建过程"><a class="header-anchor" href="#搭建过程">¶</a> 搭建过程</h3>
<h4 id="环境信息"><a class="header-anchor" href="#环境信息">¶</a> 环境信息</h4>
<table>
<thead>
<tr>
<th style="text-align:center">hostname</th>
<th style="text-align:center">IP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">db01</td>
<td style="text-align:center">192.168.2.10</td>
</tr>
<tr>
<td style="text-align:center">db02</td>
<td style="text-align:center">192.168.2.11</td>
</tr>
<tr>
<td style="text-align:center">db03</td>
<td style="text-align:center">192.168.2.12</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 安装依赖</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> mariadb-server-10.3
 
<span class="token comment">## 配置集群</span>
<span class="token comment">### 在第一台主机操作</span>
systemctl stop mysql
<span class="token function">vim</span> /etc/mysql/mariadb.conf.d/50-server.cnf
<span class="token comment"># 在 [mysqld] 下添加 skip-name-resolve</span>
<span class="token comment"># 在文件末尾添加如下内容</span>
<span class="token punctuation">[</span>galera<span class="token punctuation">]</span>
<span class="token assign-left variable">wsrep_on</span><span class="token operator">=</span>ON
<span class="token assign-left variable">wsrep_provider</span><span class="token operator">=</span>/usr/lib/galera/libgalera_smm.so
<span class="token assign-left variable">wsrep_cluster_address</span><span class="token operator">=</span><span class="token string">"gcomm://"</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>row
<span class="token assign-left variable">default_storage_engine</span><span class="token operator">=</span>InnoDB
<span class="token assign-left variable">innodb_autoinc_lock_mode</span><span class="token operator">=</span><span class="token number">2</span>
bind-address<span class="token operator">=</span><span class="token number">0.0</span>.0.0
<span class="token comment"># any cluster name</span>
<span class="token assign-left variable">wsrep_cluster_name</span><span class="token operator">=</span><span class="token string">"MariaDB_Cluster"</span>
<span class="token comment"># own IP address</span>
<span class="token assign-left variable">wsrep_node_address</span><span class="token operator">=</span><span class="token string">"192.168.2.10"</span>
 
<span class="token comment">### 完成后保存退出</span>
galera_new_cluster
 
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
  
CREATE <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'Iamadm1n!!'</span><span class="token punctuation">;</span>
GRANT ALL ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>
update mysql.user <span class="token builtin class-name">set</span>  <span class="token assign-left variable">Grant_priv</span><span class="token operator">=</span><span class="token string">'Y'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span> and <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span>
<span class="token builtin class-name">exit</span>


<span class="token comment">### 在其他两台主机操作</span>
systemctl stop mysql
<span class="token function">vim</span> /etc/mysql/mariadb.conf.d/50-server.cnf
<span class="token comment"># 在 [mysqld] 下添加 skip-name-resolve</span>
<span class="token comment"># 在文件末尾添加如下内容</span>
<span class="token punctuation">[</span>galera<span class="token punctuation">]</span>
<span class="token assign-left variable">wsrep_on</span><span class="token operator">=</span>ON
<span class="token assign-left variable">wsrep_provider</span><span class="token operator">=</span>/usr/lib/galera/libgalera_smm.so
<span class="token assign-left variable">wsrep_cluster_address</span><span class="token operator">=</span><span class="token string">"gcomm://192.168.2.10,192.168.2.11,192.168.2.12"</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>row
<span class="token assign-left variable">default_storage_engine</span><span class="token operator">=</span>InnoDB
<span class="token assign-left variable">innodb_autoinc_lock_mode</span><span class="token operator">=</span><span class="token number">2</span>
bind-address<span class="token operator">=</span><span class="token number">0.0</span>.0.0
<span class="token comment"># any cluster name</span>
<span class="token assign-left variable">wsrep_cluster_name</span><span class="token operator">=</span><span class="token string">"MariaDB_Cluster"</span>
<span class="token comment"># own IP address</span>
<span class="token assign-left variable">wsrep_node_address</span><span class="token operator">=</span><span class="token string">"192.168.2.11"</span>   <span class="token comment">## 注意：这里填写当前节点的 IP，另外一个节点填 192.168.2.12</span>
 
<span class="token comment">### 完成后保存退出</span>
<span class="token comment">## 重启 MySQL 服务</span>
systemctl start mysql
systemctl <span class="token builtin class-name">enable</span> mysql
 
<span class="token comment">## 检查集群状态</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
show status like <span class="token string">'wsrep_cluster%'</span><span class="token punctuation">;</span>
<span class="token comment">## 需观察 'wsrep_cluster_size' 是否正常（正常为节点数量），以及 'wsrep_cluster_status' 是否为 Primary</span>
 
<span class="token comment">## 如果集群状态正常，则去修改第一个节点的 /etc/mysql/mariadb.conf.d/50-server.cnf 文件</span>
<span class="token comment">## 将 wsrep_cluster_address 配置修改和其他两个节点一致即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab EE 版本破解</title>
    <url>/2020/5/Gitlab-EE-%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3.html</url>
    <content><![CDATA[<h3 id="环境信息"><a class="header-anchor" href="#环境信息">¶</a> 环境信息</h3>
<ul>
<li>Ubuntu 16.04</li>
<li>Ruby 环境（Version ≥2.5）</li>
</ul>
<h3 id="破解过程"><a class="header-anchor" href="#破解过程">¶</a> 破解过程</h3>
<h4 id="安装依赖"><a class="header-anchor" href="#安装依赖">¶</a> 安装依赖</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 确认 ruby 版本最低为 2.5，否则需要升级</span>
<span class="token function">sudo</span> apt-add-repository ppa:brightbox/ruby-ng
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby2.5 ruby2.5-dev
 
<span class="token comment">## 安装 gitlab ruby 环境依赖</span>
<span class="token function">sudo</span> gem <span class="token function">install</span> gitlab
<span class="token function">sudo</span> gem <span class="token function">install</span> gitlab-license
<span class="token function">sudo</span> gem <span class="token function">install</span> openssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="签名"><a class="header-anchor" href="#签名">¶</a> 签名</h4>
<p>创建 license.rb 文件，并写入一下内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">require <span class="token string">'openssl'</span>
require <span class="token string">'gitlab/license'</span>
  
<span class="token comment"># Generate a key pair. You should do this only once.</span>
key_pair <span class="token operator">=</span> OpenSSL::PKey::RSA.generate<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>
  
<span class="token comment"># Write it to a file to use in the license generation application.</span>
File.open<span class="token punctuation">(</span><span class="token string">"license_key"</span>, <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f.write<span class="token punctuation">(</span>key_pair.to_pem<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  
<span class="token comment"># Extract the public key.</span>
public_key <span class="token operator">=</span> key_pair.public_key
<span class="token comment"># Write it to a file to ship along with the main application.</span>
File.open<span class="token punctuation">(</span><span class="token string">"license_key.pub"</span>, <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f.write<span class="token punctuation">(</span>public_key.to_pem<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  
<span class="token comment"># In the license generation application, load the private key from a file.</span>
private_key <span class="token operator">=</span> OpenSSL::PKey::RSA.new File.read<span class="token punctuation">(</span><span class="token string">"license_key"</span><span class="token punctuation">)</span>
Gitlab::License.encryption_key <span class="token operator">=</span> private_key
  
<span class="token comment"># Build a new license.</span>
license <span class="token operator">=</span> Gitlab::License.new
  
<span class="token comment"># License information to be rendered as a table in the admin panel.</span>
<span class="token comment"># E.g.: "This instance of GitLab Enterprise Edition is licensed to:"</span>
<span class="token comment"># Specific keys don't matter, but there needs to be at least one.</span>

<span class="token comment"># 这里的用户信息大家可以自行填写</span>
license.licensee <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">"Name"</span>    <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"SkyHive"</span>,
  <span class="token string">"Company"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"SkyHive"</span>,
  <span class="token string">"Email"</span>   <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"skyhive@163.com"</span>
<span class="token punctuation">}</span>
  
<span class="token comment"># The date the license starts.</span>
<span class="token comment"># Required.</span>
license.starts_at         <span class="token operator">=</span> Date.new<span class="token punctuation">(</span><span class="token number">2021</span>, <span class="token number">4</span>, <span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># license 开始生效时间</span>
<span class="token comment"># The date the license expires.</span>
<span class="token comment"># Not required, to allow lifetime licenses.</span>
license.expires_at        <span class="token operator">=</span> Date.new<span class="token punctuation">(</span><span class="token number">2049</span>, <span class="token number">4</span>, <span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># license 到期时间</span>
  
<span class="token comment"># The below dates are hardcoded in the license so that you can play with the</span>
<span class="token comment"># period after which there are "repercussions" to license expiration.</span>
  
<span class="token comment"># The date admins will be notified about the license's pending expiration.</span>
<span class="token comment"># Not required.</span>
license.notify_admins_at  <span class="token operator">=</span> Date.new<span class="token punctuation">(</span><span class="token number">2099</span>, <span class="token number">4</span>, <span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># license 管理员过期提醒时间</span>
  
<span class="token comment"># The date regular users will be notified about the license's pending expiration.</span>
<span class="token comment"># Not required.</span>
license.notify_users_at   <span class="token operator">=</span> Date.new<span class="token punctuation">(</span><span class="token number">2099</span>, <span class="token number">4</span>, <span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># license 普通用户过期提醒时间</span>
  
<span class="token comment"># The date "changes" like code pushes, issue or merge request creation</span>
<span class="token comment"># or modification and project creation will be blocked.</span>
<span class="token comment"># Not required.</span>
license.block_changes_at  <span class="token operator">=</span> Date.new<span class="token punctuation">(</span><span class="token number">2049</span>, <span class="token number">5</span>, <span class="token number">7</span><span class="token punctuation">)</span>
  
<span class="token comment"># Restrictions bundled with this license.</span>
<span class="token comment"># Not required, to allow unlimited-user licenses for things like educational organizations.</span>
license.restrictions  <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment"># The maximum allowed number of active users.</span>
  <span class="token comment"># Not required.</span>
  active_user_count: <span class="token number">10000</span>  <span class="token comment"># license 人数配额</span>
  
  <span class="token comment"># We don't currently have any other restrictions, but we might in the future.</span>
<span class="token punctuation">}</span>
  
puts <span class="token string">"License:"</span>
puts license
  
<span class="token comment"># Export the license, which encrypts and encodes it.</span>
data <span class="token operator">=</span> license.export
  
puts <span class="token string">"Exported license:"</span>
puts data
  
<span class="token comment"># Write the license to a file to send to a customer.</span>
File.open<span class="token punctuation">(</span><span class="token string">"GitLabBV.gitlab-license"</span>, <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f.write<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  
  
<span class="token comment"># In the customer's application, load the public key from a file.</span>
public_key <span class="token operator">=</span> OpenSSL::PKey::RSA.new File.read<span class="token punctuation">(</span><span class="token string">"license_key.pub"</span><span class="token punctuation">)</span>
Gitlab::License.encryption_key <span class="token operator">=</span> public_key
  
<span class="token comment"># Read the license from a file.</span>
data <span class="token operator">=</span> File.read<span class="token punctuation">(</span><span class="token string">"GitLabBV.gitlab-license"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成license存储文件名</span>
  
<span class="token comment"># Import the license, which decodes and decrypts it.</span>
<span class="token variable">$license</span> <span class="token operator">=</span> Gitlab::License.import<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  
puts <span class="token string">"Imported license:"</span>
puts <span class="token variable">$license</span>
  
<span class="token comment"># Quit if the license is invalid</span>
unless <span class="token variable">$license</span>
  raise <span class="token string">"The license is invalid."</span>
end
  
<span class="token comment"># Quit if the active user count exceeds the allowed amount:</span>
<span class="token keyword">if</span> <span class="token variable">$license</span>.restricted?<span class="token punctuation">(</span>:active_user_count<span class="token punctuation">)</span>
  active_user_count <span class="token operator">=</span> <span class="token number">1000</span>
  <span class="token keyword">if</span> active_user_count <span class="token operator">&gt;</span> <span class="token variable">$license</span>.restrictions<span class="token punctuation">[</span>:active_user_count<span class="token punctuation">]</span>
    raise <span class="token string">"The active user count exceeds the allowed amount!"</span>
  end
end
  
<span class="token comment"># Show admins a message if the license is about to expire.</span>
<span class="token keyword">if</span> <span class="token variable">$license</span>.notify_admins?
  puts <span class="token string">"The license is due to expire on #{<span class="token variable">$license</span>.expires_at}."</span>
end
  
<span class="token comment"># Show users a message if the license is about to expire.</span>
<span class="token keyword">if</span> <span class="token variable">$license</span>.notify_users?
  puts <span class="token string">"The license is due to expire on #{<span class="token variable">$license</span>.expires_at}."</span>
end
  
<span class="token comment"># Block pushes when the license expired two weeks ago.</span>
module Gitlab
  class GitAccess
    <span class="token comment"># ...</span>
    def check<span class="token punctuation">(</span>cmd, changes <span class="token operator">=</span> nil<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token variable">$license</span>.block_changes?
        <span class="token builtin class-name">return</span> build_status_object<span class="token punctuation">(</span>false, <span class="token string">"License expired"</span><span class="token punctuation">)</span>
      end
  
      <span class="token comment"># Do other Git access verification</span>
      <span class="token comment"># ...</span>
    end
    <span class="token comment"># ...</span>
  end
end
  
<span class="token comment"># Show information about the license in the admin panel.</span>
puts <span class="token string">"This instance of GitLab Enterprise Edition is licensed to:"</span>
<span class="token variable">$license</span>.licensee.each <span class="token keyword">do</span> <span class="token operator">|</span>key, value<span class="token operator">|</span>
  puts <span class="token string">"#{key}: #{value}"</span>
end
  
<span class="token keyword">if</span> <span class="token variable">$license</span>.expired?
  puts <span class="token string">"The license expired on #{<span class="token variable">$license</span>.expires_at}"</span>
elsif <span class="token variable">$license</span>.will_expire?
  puts <span class="token string">"The license will expire on #{<span class="token variable">$license</span>.expires_at}"</span>
<span class="token keyword">else</span>
  puts <span class="token string">"The license will never expire."</span>
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 执行 license.rb 脚本</span>
ruby license.rb
  
<span class="token comment">## 执行脚本后目录当前会生成三个文件</span>
<span class="token comment"># GitLabBV.gitlab-license 为 GitLab License 文件</span>
<span class="token comment"># license_key.pub 为自签名的公钥</span>
<span class="token comment"># licens_key 为自签名的私钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="更换证书，添加-license"><a class="header-anchor" href="#更换证书，添加-license">¶</a> 更换证书，添加 license</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 替换证书</span>
<span class="token comment"># 将上一步生成的公钥文件 license_key.pub 替换 GitLab 服务器中的 /opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub 文件</span>
gitlab-ctl restart  <span class="token comment"># 重启 GitLab</span>
 
<span class="token comment">## 删除数据库中原 license 记录</span>
<span class="token function">su</span> - gitlab-psql
psql <span class="token parameter variable">-h</span> /var/opt/gitlab/postgresql <span class="token parameter variable">-d</span> gitlabhq_production
delete from licenses where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment"># 如果有多条记录就都删掉</span>
 
<span class="token comment">## 添加 license</span>
<span class="token comment"># 将上一步生成的 GitLabBV.gitlab-license 导入 GitLab 即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="修改-GitLab-等级"><a class="header-anchor" href="#修改-GitLab-等级">¶</a> 修改 GitLab 等级</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 默认的 EE 版等级肯定不能满足我们，这一波直接拉满</span>
<span class="token function">vim</span> /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb
--------
restricted_attr<span class="token punctuation">(</span>:plan<span class="token punctuation">)</span>.presence <span class="token operator">||</span> ULTIMATE_PLAN   <span class="token comment">#修改</span>
--------
gitlab-ctl restart      <span class="token comment"># 重启 GitLab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 简介</title>
    <url>/2017/11/Hadoop%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<h3 id="Hadoop-介绍"><a class="header-anchor" href="#Hadoop-介绍">¶</a>Hadoop 介绍</h3>
<p>Hadoop 是 Apache 组织的一个分布式计算框架（java 语言），其最核心的设计就是：<strong>HDFS</strong> 和 <strong>MapReduce</strong>，HDFS 实现存储，MapReduce 实现原理分析处理。</p>
<h4 id="HDFS文件系统"><a class="header-anchor" href="#HDFS文件系统">¶</a>HDFS 文件系统</h4>
<p><strong>HDFS</strong>（Hadoop Distributed File System）是一个高度容错的系统，适合部署在廉价的机器上。HDFS 能提供高吞吐量的数据访问，适合那些有着超大数据集的应用程序。</p>
<span id="more"></span>
<h5 id="设计特点"><a class="header-anchor" href="#设计特点">¶</a> 设计特点</h5>
<ul>
<li>大数据文件，适合大文件或者一堆大数据文件</li>
<li>文件分块存储，HDFS 会将一个完整的大文件平均分块存储到不同计算机上</li>
<li>流式数据访问，一次写入多次读写，和传统文件不同，它不支持动态改变文件内容，而是要求让文件一次写入就不做变化，要变化只能在文件末尾添加</li>
<li>廉价硬件</li>
<li>备份，为防止某个主机失效读取不到该主机的块文件，它将同一个文件块副本分配到其他某几个主机上 </li>
</ul>
<h5 id="Master-Slave架构"><a class="header-anchor" href="#Master-Slave架构">¶</a>Master / Slave 架构</h5>
<p>一个 HDFS 集群是有一个 Namenode 和一定数目的 Datanode 组成。Namenode 作为中心服务器负责管理文件系统的 namespace 和客户端对文件的访问，Datanode 在集群中负责管理结点上他们附带的存储。在内部，一个文件其实分成一个或多个 block，这些 block 存储在 Datanode 集合里。Namenode 执行文件系统的 namespace 操作，如打开、关闭、重命名等，同时决定 block 到具体 Datanode 结点的映射。Datanode 在 Namenode 的指挥下进行 block 的创建、删除和复制。</p>
<h5 id="HDFS的一些关键元素"><a class="header-anchor" href="#HDFS的一些关键元素">¶</a>HDFS 的一些关键元素</h5>
<ul>
<li>Block：将文件分块，通常为 64M。</li>
<li>NameNode：保存整个文件系统的目录信息、文件信息及分块信息，由唯一一台主机专门保存。（2.0 版本后增加备份）</li>
<li>DataNode：用于存储 Block 文件。</li>
<li>NameNode 全权管理数据块的复制，它周期性地从集群中的每个 DataNode 接受心跳信号和块状态报告（BlockReport）。结合艘到心跳信号以为这该 DataNode 工作正常，块状态报告包含了一个该 DataNode 上所有数据块的列表。</li>
</ul>
<h4 id="MapReduce文件系统"><a class="header-anchor" href="#MapReduce文件系统">¶</a>MapReduce 文件系统</h4>
<p>MapReduce 是一种编程模型，用于大规模数据的并行运算。MapReduce 分成两个部分：<strong>Map</strong>（映射）和 <strong>Reduce</strong>（归纳）。当你向 MapReduce 框架提交一个计算作业时，它会首先把计算作业拆分成若干个 Map 任务，然后分配到不同的节点上去执行，每一个 Map 任务处理输入数据中的一部分，当 Map 任务完成后，它会生成一些中间文件，这些中间文件将会作为 Reduce 任务的输入数据。Reduce 任务的主要目标就是把前面若干个 Map 的输出汇总并输出。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab 单节点服务搭建</title>
    <url>/2019/7/Gitlab%E5%8D%95%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<h2 id="搭建准备"><a class="header-anchor" href="#搭建准备">¶</a> 搭建准备</h2>
<p>根据官方提供的说法，小规模使用 GitLab 只用单机部署即可，4C8G 的配置足够小一百人使用 Git，由于本次也只是熟悉一下 GitLab 的搭建过程和各组件之间的关系，所以就使用低配的虚拟机进行搭建了。</p>
<h3 id="虚拟机配置"><a class="header-anchor" href="#虚拟机配置">¶</a> 虚拟机配置</h3>
<table>
<thead>
<tr>
<th>CPU</th>
<th> 内存</th>
<th>硬盘</th>
</tr>
</thead>
<tbody>
<tr>
<td> 4*vCPU</td>
<td>8GB</td>
<td>200GB</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="搭建过程"><a class="header-anchor" href="#搭建过程">¶</a> 搭建过程</h2>
<h3 id="安装依赖"><a class="header-anchor" href="#安装依赖">¶</a> 安装依赖</h3>
<pre class="line-numbers language-none"><code class="language-none">sudo apt update
sudo apt install curl openssh-server ca-certificates postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="搭建服务"><a class="header-anchor" href="#搭建服务">¶</a> 搭建服务</h3>
<pre class="line-numbers language-none"><code class="language-none">wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/xenial/gitlab-ce_12.0.1-ce.0_amd64.deb/download.deb		## 下载官方 deb 包
sudo dpkg -i gitlab-ce_12.0.1-ce.0_amd64.deb

## 卸载原有 nginx
sudo apt purge nginx-common nginx-full

## 修改域名配置
sudo vim /etc/gitlab/gitlab.rb

external_url='your domain_name'

## 配置生效
sudo gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="汉化"><a class="header-anchor" href="#汉化">¶</a> 汉化</h3>
<p>汉化的步骤实际上没有太大比较，GitLab 的汉化一直做的比较 “晦涩难懂”，不如直接英语界面来的舒服。</p>
<pre class="line-numbers language-none"><code class="language-none">## 去 https://gitlab.com/xhang/gitlab 找到对应版本的分支
wget https://gitlab.com/xhang/gitlab/-/archive/v12.0.1/gitlab-v12.0.1.tar.gz
tar -zxvf gitlab-v12.0.1.tar.gz ## 解压

sudo gitlab-ctl stop ## gitlab 停止服务

## 备份 gitlab-rails 目录，该目录下主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。
sudo tar zcvf /opt/gitlab/embedded/service/gitlab-rails-bak.tar.gz /opt/gitlab/embedded/service/gitlab-rails 
## 汉化包覆盖
sudo cp -rf ~/gitlab-v12.0.1/* /opt/gitlab/embedded/service/gitlab-rails/

sudo gitlab-ctl start 	## GitLab 启动服务

sudo gitlab-ctl reconfigure ## 重新配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基操"><a class="header-anchor" href="#基操">¶</a> 基操</h3>
<pre class="line-numbers language-none"><code class="language-none">## 查看 GitLab 状态
sudo gitlab-ctl status

## 查看 GitLab 版本
cat /opt/gitlab/embedded/service/gitlab-rails/VERSION

## GitLab 停止服务
sudo gitlab-ctl stop

## GitLab 启动服务
sudo gitlab-ctl start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 的建站之旅</title>
    <url>/2017/2/Hexo%E7%9A%84%E5%BB%BA%E7%AB%99%E4%B9%8B%E6%97%85.html</url>
    <content><![CDATA[<p>这几天觉得 wordpress 作为博客实在是太臃肿了，而且访问的后台以及更新都极其的慢，以至于想把博客迁到 Hexo 上去。<br>
Hexo 是个简洁快速且高效的博客框架，是个台湾的学生写的，所以对中文还是挺友好的，我们用起来也很方便，而且 Hexo 仅依赖 node，易于安装。<br>
首先准备的工具仅需要 node.js,git 即可，在 ubuntu 上安装这两样工具也是极其简单：</p>
<span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install nodejs
sudo apt-get install npm	
sudo apt-get install nodejs-legacy 			#由于 ubuntu 仓库中本来就有一个 node，所以在 ubuntu 下 nodejs 命令不是 node 而是 nodejs，但是安装 nodejs-legacy 后就可以解决这个问题了，具体为什么我也不知道
sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面开始安装 Hexo:</p>
<pre class="line-numbers language-none"><code class="language-none">sudo npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完成后就可以部署博客了，根据 Hexo 官网上的步骤：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo init &lt;floder&gt;
cd &lt;floder&gt;
sudo nmp install		#安装依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>下面可以安装一些插件，大家可以根据不同的需要安装，网上都有教程，我就不赘述了，但是有一个插件是需要安装的：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save 			#这是一个可以自动部署到 github 上的插件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>接下来的配置可以参考官网上给出的配置详解，自己根据需要去手动配置，至于主题可以在 Hexo 提供的<a href="https://hexo.io/themes/">网站</a>选择，然后从 github 上 clone 到 themes 下。配置完成后可以执行一下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo clean
hexo generate 			#这个命令用于部署网页的静态文件，每次修改后都应该首先执行这条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果想先预览网页效果的话，可以执行：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo s				#s即server,执行完成后可以在localhost:4000下预览<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面需要部署 github 端了，首先在你的 github 上创建一个仓库，仓库名必须为 "<a href="http://username.github.io">username.github.io</a>"，其中"username" 为你的用户名，创建完成后写一个 README 使 github 自动帮你创建 github pages</p>
<p>接着在你的终端配置 git:</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name "你github的username"
git config --global user.email "你的github邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后生成密钥：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "你的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>回车确认，输入密码再确认，然后前往提示信息的目录下会有两个文件，其中 id_rsa 是私钥，id_rsa.pub 是公钥<br>
然后添加生成的 key：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-add id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后将 id_rsa.pub 中的内容（除去最后你邮箱的那部分）复制下来，在你 github 主页中找到 settings 中的 SSH Keys，将复制的公钥添加进去，title 随便取个名字就好。<br>
最后我们只要把 Hexo 生产的网页部署到 github 上就可以了，来到我们创建的博客目录，打开配置文件，在 Deployment 中配置：</p>
<pre class="line-numbers language-none"><code class="language-none"># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy: 
  type: git
  repository: https://github.com/username/username.github.io
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的，"username" 是你 github 的用户名<br>
然后在博客根目录执行：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo generate 
hexo deploy			#部署博客到github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输出一下信息便说明我们部署成功：</p>
<pre class="line-numbers language-none"><code class="language-none">INFO Deploy done:git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 搭配七牛存储图片等媒体资源</title>
    <url>/2017/2/Hexo%E6%90%AD%E9%85%8D%E4%B8%83%E7%89%9B%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87%E7%AD%89%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90.html</url>
    <content><![CDATA[<p>今天把博客的图片存储搞了一下，利用的七牛存储，相对来说还是比较简单，但是为了测试成功与否就只好写这篇博客了。<br>
七牛 是一个云存储服务商，注册并实名认证之后后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 PUT/DELETE 请求。如果想要注册可以<a href="https://portal.qiniu.com/signup?code=3lnfyn5xmh93m">点击这里</a>，这样可以为我增加每月 5GB 的容量。</p>
<span id="more"></span>
<p>注册完成之后就可以进行创建空间了，注意我们添加的资源为<strong>对象存储</strong>，访问控制为<strong>公开空间</strong></p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fqiniu_create.png" alt="qiniu create"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fqiniu_set.png" alt="qiniu set"></p>
<p>然后点击右上角进入<strong>密钥管理</strong>，复制当前使用的 AK 和 SK，配置的时候会用得到<br>
下面我们会用到一个叫做的 <a href="https://github.com/gyk001/hexo-qiniu-sync">hexo-qiniu-sync</a> 的插件，首先在 hexo 主目录下安装：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-qiniu-sync - -save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后把配置信息添加到_config.yml 中</p>
<pre class="line-numbers language-none"><code class="language-none">plugins:
  - hexo-qiniu-sync

#七牛云存储设置
##offline       是否离线. 离线状态将使用本地地址渲染
##sync          是否同步
##bucket        空间名称.
##access_key    上传密钥AccessKey
##secret_key    上传密钥SecretKey
##secret_file   秘钥文件路径，可以将上述两个属性配置到文件内，防止泄露，json格式。绝对路径相对路径均可
##dirPrefix     上传的资源子目录前缀.如设置，需与urlPrefix同步 
##urlPrefix     外链前缀.
##up_host      上传服务器路径,如选择华北区域的话配置为http://up-z1.qiniu.com
##local_dir     本地目录.
##update_exist  是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)
##image/js/css  子参数folder为不同静态资源种类的目录名称，一般不需要改动
##image.extend  这是个特殊参数，用于生成缩略图或加水印等操作。具体请参考http://developer.qiniu.com/docs/v6/api/reference/fop/image/ 
##              可使用基本图片处理、高级图片处理、图片水印处理这3个接口。例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图
qiniu:
  offline: false
  sync: true
  bucket: bucket_name
  secret_file: sec/qn.json or C:
  access_key: AccessKey
  secret_key: SecretKey
  dirPrefix: static
  urlPrefix: http://bucket_name.qiniudn.com/static
  up_host: http://upload.qiniu.com
  local_dir: static
  update_exist: true
  image: 
    folder: images
    extend: 
  js:
    folder: js
  css:
    folder: css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中各个参数在插件的 <a href="https://github.com/gyk001/hexo-qiniu-sync/blob/master/README.md">README 文件</a>中都有详细的介绍，按照 github 上的教程一步一步来是很简单的。</p>
<p>然后在 hexo 主目录下创建本地目录（该目录要和配置中 local_dir 参数保持一致），然后创建 iamges、js、css 子目录，这样基本的配置就完成了</p>
<p>下面就可以在你的文章中试着插入图片了，比如你想引用在你 /local_dir/images/ 下的图片 1.png</p>
<pre class="line-numbers language-none"><code class="language-none">{% qnimg 1.png %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更高级的用法请参考 github 上的说明。</p>
<p>下面进行同步</p>
<pre class="line-numbers language-none"><code class="language-none">hexo qiniu s    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM 填坑</title>
    <url>/2020/9/KVM-%E5%A1%AB%E5%9D%91.html</url>
    <content><![CDATA[<h3 id="1、UEFI-引导问题"><a class="header-anchor" href="#1、UEFI-引导问题">¶</a>1、UEFI 引导问题</h3>
<p>支持 KVM 虚拟机使用 UEFI 引导需要安装 OVMF 组件，参考<a href="https://blog.skyhive.tech/2020/06/10/%E5%9F%BA%E4%BA%8E-CentOS-%E5%AE%89%E8%A3%85-KVM/">基于 CentOS 安装 KVM</a>。<br>
目前通过 virt-v2v 导入的 ova 且使用 UEFI 启动的虚拟机（from vSphere）再 define domain 的时候会有报错，报错如下：</p>
<pre class="line-numbers language-none"><code class="language-none">error: Failed to define domain from /tmp/v2vlibvirt20e61b.xml
error: unsupported configuration: smm is not available with this QEMU binary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>以上报错是 OVMF 的问题，参考：<a href="https://access.redhat.com/discussions/3175901">https://access.redhat.com/discussions/3175901</a></p>
<p>具体是因为因为 “OVMF_CODE.secboot.fd” 固件在当前的 qemu-kvm 中不受支持，RedHat Discussion 上有两种解决方案：</p>
<ol>
<li>
<p>重构 OVMF RPM 包，参考： <a href="https://access.redhat.com/discussions/3175901">https://access.redhat.com/discussions/3175901</a></p>
<blockquote>
<p>Removing “-D SMM_REQUIRE”, rebuild the rpm, browse inside the rpm and then copy OVMF_CODE.secboot.fd to /usr/share/OVMF/OVMF_CODE.fd makes it work but I don’t know whether this will reduce security.</p>
</blockquote>
</li>
<li>
<p>升级 qemu-kvm 版本至 2.6 以上的 qemu-kvm-rhev 版本</p>
<blockquote>
<p>‘With this update, the “OVMF_CODE.secboot.fd” firmware binary file includes the Secure Boot feature. This binary can be used with pc-q35-rhel7.3.0 and later Q35 machine types only […]’<br>Those machine types are unavailable when using the 1.5.3-based “qemu-kvm” package of base RHEL. They are available only when using the 2.6.0-based “qemu-kvm-rhev” package, which is not part of base RHEL.</p>
</blockquote>
</li>
</ol>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 基础</title>
    <url>/2017/4/Python%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<p><em>最近在自学 Python，所以一边学也一边总结一些知识点</em></p>
<h4 id="Python的输出"><a class="header-anchor" href="#Python的输出">¶</a>Python 的输出</h4>
<p>Python 的输出和 C 语言类似，在 <code>print()</code> 函数里加上字符串（用单引号或者双引号，但是不能混用），例如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; print('Hello world!')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>print()</code> 函数也可以接受多个字符串，用逗号隔开即可。<code>print()</code> 函数依次打印字符串，每遇到逗号就会输出一个空格。<br>
<code>print()</code> 也可以打印整数或者计算结果，例如：</p>
<span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; print('5+3=',5+3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>注：对于 <code>5+3</code>，python 解释器会自动计算出结果，但是<code>'5+3='</code> 是字符串而非数学公式</em></p>
<h4 id="Python的输入"><a class="header-anchor" href="#Python的输入">¶</a>Python 的输入</h4>
<p>Pyhton 提供了 <code>input()</code> 函数，可以让用户输入字符串，并且存到一个变量里，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; info = input()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入任意字符后按下回车完成输入，输入的内容就被存放在变量 <code>info</code> 里面了。<br>
<code>input()</code> 函数可以显示一个字符串来提示用户，如：<code>input('please input something:')</code></p>
<h4 id="Python的数据类型"><a class="header-anchor" href="#Python的数据类型">¶</a>Python 的数据类型</h4>
<ul>
<li>整数：Python 可以处理任意大小的整数，包括负整数。</li>
<li>浮点数：与 C 语言一样，可以用数学法也可以用科学记数法（把 10 用 e 替代）表示。</li>
<li>字符串：字符串使用单引号或者双引号括起来的任意文本；如果文本中包含<code>'</code> 和 <code>"</code> 可以用转义字符 <code>\</code> 来表示。</li>
<li>布尔值：一个布尔值只有 <code>True</code> 和 <code>False</code> 两种值（注意大小写）；布尔值可以用 <code>and（与运算）</code>、<code>or（或运算）</code>和 <code>not（非运算）</code>运算。</li>
<li>空值：空值是 Python 里一个特殊的值，用 <code>None</code> 表示。<code>None</code> 不能理解为 0，因为 0 是有意义的整数，而 <code>None</code> 是一个特殊的空值；类似于 C 语言里面的 <code>NULL</code>。</li>
<li>变量：和 C 语言类似，变量名必须是大小写英文、数字和下划线的组合，且不能用数字开头；如：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">a = 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种变量本身类型不固定的语言称为动态语言，与之对应的是静态语言。静态语言在定义变量是必须指定变量类型，如：</p>
<pre class="line-numbers language-none"><code class="language-none">int a = 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>和静态语言相比，动态语言更灵活。</p>
<ul>
<li>常量：所谓常量就是不能变的变量，在 Python 中，通常用全部大写的变量名表示常量。</li>
</ul>
<h4 id="Python的整数除法和取余"><a class="header-anchor" href="#Python的整数除法和取余">¶</a>Python 的整数除法和取余</h4>
<ul>
<li><code>/</code>：这种整数的除法得到的结果是浮点数，即使两个整数恰好整除结果也是浮点数。</li>
<li><code>//</code>：这种除法也称为地板除，两个整数的相除结果仍然为整数，和 C 语言中的整数除法一样，整数除法结果为小数时取整数部分。</li>
<li><code>%</code>：与 C 语言的取余一样，结果为两整数相除的余数。</li>
</ul>
<h4 id="Python的list"><a class="header-anchor" href="#Python的list">¶</a>Python 的 list</h4>
<p>list 类似于数组的概念，可以随时添加和删除元素；与数组一样，<code>list[]</code> 的索引是从 0 开始的，但是访问元素时要确保索引不要越界，可以用 <code>len()</code> 函数来获取元素的个数，如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; len(list)       #变量list是一个list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以最后一个元素的索引是 <code>len(list)-1</code>，当然也可以用 <code>-1</code> 来做索引，直接获取最后一个元素 <code>list[-1]</code>，以此类推可以用 <code>-2</code>、<code>-3</code> 来获取倒数第二个的、倒数第三个元素。</p>
<p>Python 提供 <code>lsit.insert()</code> 函数将元素插入到特定的位置，如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; list.insert(x,'info')#x为想插入元素位置的索引号，info为想插入的 元素<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以用 <code>list.addend()</code> 函数将元素插入到末尾，如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; list.addend('info')     #info为想插入的元素<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>想要删除 list 末尾元素用 <code>list.pop()</code> 函数，想要删除指定位置的元素，用 <code>list.pop(x)</code> 方法，其中 <code>x</code> 是索引位置。list 可以直接赋值，而且 list 中的元素类型也可以不同。</p>
<h4 id="Python的tuple"><a class="header-anchor" href="#Python的tuple">¶</a>Python 的 tuple</h4>
<p>这是 Python 的另一个有序列表，叫做元组（tuple）。tuple 和 list 类似，但是 tuple 一旦初始化就不能进行修改了；我们依然可以使用 <code>tuple[0]</code>、<code>tuple[-1]</code> 来获取元素。<br>
由于 tuple 不可变，所以相比 list 更加安全，所以能用 tuple 就尽量使用 tuple。下面说一下 tuple 的定义：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; tuple = (1,2,3,4)       #正常的tuple定义
&gt;&gt;&gt; tuple = ()      #定义空的tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是当定义一个元素的 tuple 的时候，如果写成这样：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; tuple = (1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>由于小括号 <code>()</code> 既可以表示 tuple 又可以表示数学公式中的小括号，就产生了歧义。因此，Python 规定这种情况下 <code>()</code> 按照数学公式的小括号计算，结果即为 <code>1</code>，所以，只有一个元素的 tuple 定义是要加一个逗号 <code>,</code> 来消除歧义：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; tuple = (1,)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>当然了，tuple 的元素中如果包含一个 list 的话，list 的元素是可以改变的</em></p>
<h4 id="Python的条件判断"><a class="header-anchor" href="#Python的条件判断">¶</a>Python 的条件判断</h4>
<p>和 C 语言类似，Python 的条件判断的语法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">if &lt;判断条件1&gt;:
    &lt;执行代码&gt;
elif &lt;判断条件2&gt;:
    &lt;执行代码&gt;
elif &lt;判断条件3&gt;:
     &lt;执行代码&gt;
        …………
else:
     &lt;执行代码&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以通过使用之前说过的 <code>input()</code> 函数的输入进行条件判断，但是有一个需要注意的地方，<strong><code>input()</code> 函数返回的数据类型是 <code>str</code>，不能直接和整数比较，所以必须要先使用 <code>int()</code> 函数将 <code>str</code> 转换为整数。</strong></p>
<h4 id="Python的循环"><a class="header-anchor" href="#Python的循环">¶</a>Python 的循环</h4>
<h5 id="for……in"><a class="header-anchor" href="#for……in">¶</a>for……in:</h5>
<p>这个循环可以将 list 或 tuple 中的元素遍历出来，看个例子：</p>
<pre class="line-numbers language-none"><code class="language-none">num = ['1','2','3','4']
for x in num:
    print(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行这段代码，会依次打印每一个元素，所以 <code>for x in ……</code> 就是把每个元素带入变量 <code>x</code>，然后执行缩进块的语句。有了这个循环我们就可以做求和了，不过我们要从 1 写到 100 确实有点困难，幸好 Python 提供了 <code>range()</code> 函数，可以生成一个整数序列，再通过 <code>list()</code> 函数可以转换为 list。如：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; list(range(5))
[0,1,2,3,4]         #range(5)生成的是从0开始小于5的整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="while"><a class="header-anchor" href="#while">¶</a>while:</h5>
<p>和 C 语言类似，条件满足就循环，条件不满足时就退出循环。语法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">while &lt;判断条件&gt;
&lt;执行语句&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="break和continue"><a class="header-anchor" href="#break和continue">¶</a>break 和 continue:</h5>
<p>和 C 语言类似，<code>break</code> 可以提前退出循环，<code>continue</code> 可以跳过当前循环，直接进入下一次循环。</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 语句的基本操作</title>
    <url>/2017/4/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<h3 id="数据库操作"><a class="header-anchor" href="#数据库操作">¶</a> 数据库操作</h3>
<ol>
<li>创建数据库： <code>CREATE DATABASE &lt;数据库名&gt; [其他选项]</code></li>
<li>使用数据库： <code>USE &lt;数据库名&gt;</code></li>
<li>修改数据库： <code>ALTER DATABASE &lt;数据库名&gt;</code></li>
<li>删除数据库： <code>DROP DATABASE &lt;数据库名&gt;</code></li>
</ol>
<h3 id="数据表操作"><a class="header-anchor" href="#数据表操作">¶</a> 数据表操作</h3>
<ol>
<li>创建表：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">CREATE TABLE &lt;表名&gt;
（
     &lt;列名1&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;],
    [&lt;列名n&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;]]
 ）;
例：
    create table studets
    (
        id int not null auto_increment primary key,
        name varchar(8) not null,
        sex varchar(5) not null,
        score int(5) not null
    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>修改基本表 </li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">ALTER TABLE &lt;表名&gt; add &lt;列名&gt; &lt;列数据类型&gt; [after 插入位置];         --增加列
ALTER TABLE &lt;表名&gt; change &lt;列名&gt; &lt;列新名&gt; &lt;新数据类型&gt;;              --修改列
ALTER TABLE &lt;表名&gt; drop &lt;列名&gt;;                         --删除列
ALTER TABLE &lt;表名&gt; rename &lt;新表名&gt;;                     --重命名表
DROP TABLE &lt;表名&gt;                                       --删除表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>表的基本操作</li>
</ol>
<ul>
<li>插入数据：<code>insert [into] &lt;表名&gt; [(列名1,列名2,列名3……)] values (值1,值2,值3……);</code></li>
<li>更新数据：<code>update &lt;表名&gt; set 列名=新值 where 更新条件;</code></li>
<li>删除数据：<code>delete from &lt;表名&gt; where 删除条件;</code></li>
<li>查询数据：<code>select &lt;列名&gt; from &lt;表名&gt; [查询条件];</code></li>
<li>特定条件查询：where 不仅支持 “where 列名 = 值” 这种名等于值的查询形式，对一般的比较运算的运算符都是支持的，如 =、&lt;、&gt;、！= 等以及一些扩展运算符 is [not] null、in、like 等，还可以对查询条件使用 or 和 and 进行组合查询。</li>
</ul>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 进阶</title>
    <url>/2017/4/SQL%E8%BF%9B%E9%98%B6.html</url>
    <content><![CDATA[<p>我们都知道 select 的基本用法 <code>select &lt;字段名&gt; from &lt;表名&gt; [where &lt;限制条件&gt;]</code>，然而 <code>select</code> 语句后面还可以跟很多限制条件。我们这次用 user 表来作为示范，下面是 user 表的结构：</p>
<span id="more"></span>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fuser.png" alt="user 表结构"></p>
<h4 id="Between、And、In、-、-、-、-等条件查询："><a class="header-anchor" href="#Between、And、In、-、-、-、-等条件查询：">¶</a>Between、And、In、&lt;=、&gt;=、&lt;、&gt; 等条件查询：</h4>
<p>通过 <code>select * from table where id between 1 and 3</code> 和 <code>select * from table where id &gt;=1 and id &lt;= 3 </code>的返回结果，我们可以发现 <code>between and</code> 和 <code>&gt;= and &lt;=</code> 是等同的。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fbetween.png" alt="between"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fbetween2.png" alt="between2"></p>
<p>如果我们要查询的条件不是一个连续的数值，可以用 <code>in</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">select * from table where id in (2,4)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="locate-函数：locate-substr-str"><a class="header-anchor" href="#locate-函数：locate-substr-str">¶</a>locate () 函数：<code>locate(substr,str)</code></h4>
<p>这个函数返回 <code>substr</code> 在字符串 <code>str</code> 中的第一个出现的位置，如果不存在则值为 0<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Flocate.png" alt="locate 函数"></p>
<h4 id="Count-函数"><a class="header-anchor" href="#Count-函数">¶</a>Count () 函数:</h4>
<ul>
<li>count (字段名)：返回指定列的值的数目，但是字段值为 <code>NULL</code> 时不会被计算进去。<code>select count(字段名) from &lt;表名&gt;</code></li>
<li>count (*)：返回表中的记录数，字段值为 <code>NULL</code> 时会被计算进去。<code>select count(*) from &lt;表名&gt;</code></li>
</ul>
<h4 id="Distinct语句："><a class="header-anchor" href="#Distinct语句：">¶</a>Distinct 语句：</h4>
<p>Distinct 语句用于去除重复行，比如：<code>select distinct * from &lt;表名&gt;</code>。<br>
其他的语句或函数都可以和 <code>distinct</code> 配合使用，比如：<code>count(distinct &lt;字段名&gt;)</code> 可以去除重复行统计行数，但是 <code>count(distinct *)</code> 是<strong>不被允许</strong>的</p>
<h4 id="Union语句："><a class="header-anchor" href="#Union语句：">¶</a>Union 语句：</h4>
<p>Union 语句可以将两个 <code>select</code> 语句的结果集组合成一个：</p>
<pre class="line-numbers language-none"><code class="language-none">(select * from table where id &gt;= 3) union (select * from table where id = 1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当我们使用 <code>union</code> 语句的时候，默认去除了重复行，和 <code>distinct</code> 的效果一样，如果要显示所有的结果，则要使用 <code>union all</code> 语句。</p>
<h4 id="Drder-by语句："><a class="header-anchor" href="#Drder-by语句：">¶</a>Drder by 语句：</h4>
<pre class="line-numbers language-none"><code class="language-none">select * from table order by &lt;字段名&gt; [asc/desc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中 <code>asc</code> 是默认的排序，为升序，<code>desc</code> 为降序。<br>
当然 order by 后面可以跟很多个字段，如：<code>select * from table order by info desc,id asc</code>, 这个语句意为先按 <code>info</code> 字段降序，若 <code>info</code> 字段值相同的情况下，再按 <code>id</code> 字段升序。而且，<code>NULL</code> 默认为值最小。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 端口转发被强行更改</title>
    <url>/2024/2/nginx-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%A2%AB%E5%BC%BA%E8%A1%8C%E6%9B%B4%E6%94%B9.html</url>
    <content><![CDATA[<p><a href="https://blog.skyhive.tech/2024/2/%E9%85%8D%E7%BD%AE-DNSPod-%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6.html">上一篇文章</a>说到在家里把 LB 升了级并且通过 <code>acme.sh</code> 自动配置了 LB 的泛域名证书，可以看到基本的结构如下：</p>
<img src="http://www.plantuml.com/plantuml/svg/IqmkoIzI22rEBUBY0f4Akhfs2Xf1-QKbgKMQLWesddb0HbvgYK90Vb69WeM9YR4T5qGMejB72QJADx40eW0ix-C4aNFEpqlBASrBJjM42xbdbkGa9Y7uKOb9IPaLIF95YMc9UOa80Q_Kd9pAjCmyJG00">
<p>由于这些服务都是运行在家里的服务器中，最终 LB 的 443 端口我是在路由器上通过端口映射的方式转到 8443 端口上的（家庭宽带的公网 IP 会将 80/443 等常用端口封禁）。而我为了优雅（确实不想在公网通过域名加端口的形式访问某个网站或者服务），在公网使用 CDN 来把我对公网映射的 8443 端口转换成了 443。这个做法对于正常的 Web 服务来说没有任何问题，但是对于网盘服务来说就有些伤筋动骨，毕竟网盘服务流量比较大，使用 CDN 的话确实比较费钱。因此对于网盘服务我又单独映射了一个 8888 端口到公网，在金钱面前，我不再选择优雅。</p>
<span id="more"></span>
<p>那么对于网盘服务来说，正常的访问路径就是：</p>
<img src="http://www.plantuml.com/plantuml/svg/uqfCBialKWWjJYtYuWAH2hgwTWeQGVcb9Qb5cbOADfvvG4PUQeb2G7vHYO854DXnGMGXAdsSGAfy4miW2anCZEsuV9mWSdwf5IN9EVcbAI0b0KNv5PLGKmmi3Eou0000">
<p>乍一看好像挺正常的，但是在我通过公网去访问的是时候</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://<span class="token operator">&lt;</span>domain_name<span class="token operator">&gt;</span>:8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>出现的结果往往是，nginx 直接把我的 8888 端口给重定向成了 8080，也就是变成了 <code>https://&lt;domain_name&gt;:8080</code> 的访问。后来查了一下，是需要在 nginx location 的配置中稍微做些修饰，随即将该方法记录下来</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>

  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
  ……
  <span class="token directive"><span class="token keyword">port_in_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>  <span class="token comment">## 需要在 server 中加上这个配置防止 port redirect</span>

  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.2.150:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span>:<span class="token variable">$server_port</span></span><span class="token punctuation">;</span>    <span class="token comment">## Host header 需要有 $host:$server_port，即 host 和 port 都得有，否则 port 就会变成 proxy_pass 中的 port</span>
    ……
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上基本上可以解决问题，如若不能，则还得继续 Google 一番。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLi-Labs 的安装</title>
    <url>/2017/2/sqli-labs%E7%9A%84%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<p>笔者前段时间安装了 sqli-labs，就想把 sqli-labs 和 lamp 环境的搭建都写出来，其实这两个东西都很简单，感觉比我折腾 hexo 要简单的得多了（手动滑稽）。</p>
<p>sqli 即 sql injection (sql 注入)，sqli-labs 是一个印度程序员写的用来学习 sql 注入的游戏教程，<a href="https://www.youtube.com/playlist?list=PLkiAz1NPnw8qEgzS7cgVMKavvOAdogsro">Youtube 上有一套视频教程</a> (需要科学上网)，<a href="https://github.com/Audi-1/sqli-labs">github 上也有开源的项目</a>。</p>
<p>那么接下来就可以进行安装了：</p>
<span id="more"></span>
<p>首先搭建 lamp 环境，我用的是 ubuntu 16.04 的系统</p>
<p>1. 安装 apache2</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2. 安装 mysql</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3. 安装 php7 (ubuntu16.04 开始支持 php7.0，之前的版本可以只支持到 php5)</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install php7.0
php7.0  -v      #查看版本信息，确认安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>4. 整合 php 与 mysql</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install php7.0-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5. 重启 apache 和 mysql 服务</p>
<pre class="line-numbers language-none"><code class="language-none">sudo service apache2 restart
sudo service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时在浏览器输入 localhost, 便能显示 apache 的页面，也代表 lamp 环境到目前为止算是成功搭建完毕。</p>
<p>下面开始安装 sqli-labs<br>
先从 github 上克隆 sqli-labs 代码：</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/Audi-1/sqli-labs.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后修改 sqli-labs 数据库配置文件：</p>
<pre class="line-numbers language-none"><code class="language-none">vim sqli-labs/sql-connections/db-creds.inc      #编辑配置文件
修改如下：
&lt;?php
//give your mysql connection username n password
$dbuser ='root';
$dbpass ='你数据库密码';
$dbname ="security";
$host = 'localhost';
$dbname1 = "challenges";
?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后将目录复制到 apache 的 web 目录：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo cp -r sqli-labs /var/www/html#默认是/var/www/html这个目录，也可以在apache的配置文件中修改目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在浏览器中访问 <a href="http://127.0.0.1/sqli-labs">http://127.0.0.1/sqli-labs</a> 或者 <a href="http://localhost/sqli-labs">http://localhost/sqli-labs</a> 就能看到启动页面，点击页面中的 <code>Setup/reset Database for labs</code> 链接，让其进行安装。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>一个学习 Python 的小游戏</title>
    <url>/2017/4/%E4%B8%80%E4%B8%AA%E5%AD%A6%E4%B9%A0Python%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F.html</url>
    <content><![CDATA[<p>笔者最近在自学 Python 的过程中想起曾经有人推荐过的一款学习编程的小游戏，叫做 <a href="https://cn.codecombat.com">Codecombat</a>，通过玩游戏的方式学习编程语言的语法规则。</p>
<span id="more"></span>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fcodecombat.png" alt="codecombat"><br>
游戏有很多关卡，每个关卡都会有之前没有学过的语法，学习的难度是逐渐上升的，用游戏的方式将学习者带入比起看起枯燥的书本文字效果要好的多。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Flevel.png" alt="level"><br>
当然这里除了有 Python 之外还有 Javascript 等脚本语言可以学习。</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>修改 sudoers 文件导致 sudo 无法使用的解决办法</title>
    <url>/2018/8/%E4%BF%AE%E6%94%B9sudoers%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4sudo%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
    <content><![CDATA[<p>之前因为修改过 <code>/etc/sudoers</code> 文件，有个地方语法错误，导致修改完成之后 <code>sudo</code> 命令无法使用</p>
<p>网上搜过很多解决办法，大都是重启进入单用户模式，以 Root 用户的身份修改 <code>sudoers</code> 文件，解决原本的语法错误。但是这个方法的硬条件是需要重启进入单用户模式，但是有的时候我们是以 <code>ssh</code> 的方式登录到 LInux 机器上去的，所以相应的也会有不需要重启的操作就能解决这种问题，当然这种操作也有一个硬条件 ——Linux 上已经安装了 <code>Pkttyagent</code> 和 <code>pkexec</code>，我并不知道这两个软件是不是所有 Llinux 系统都预装，所以大家都自己拿捏一下。</p>
<p>那么进入正题</p>
<p>首先，我们需要开两个 session 连接到 Linux 机器上</p>
<p>第一步：在以第一个 session 上输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到你目前 Bash 的 PID。</p>
<p>第二步：在第二个 session 上输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkttyagent <span class="token parameter variable">--process</span> pid <span class="token comment">#这里的pid是上一步获取到的，直接复制过来就好了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第三步：回到第一个 session 中，输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkexec visudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第四步：回到第二个 session，你会发现 Bash 提示你进行权限认证，输入密码后，再回到第一个 session</p>
<p>第五步：回到第一个 session 后就是我们熟悉的 visudo 界面啦，下面的操作大家心里都有数了</p>
<p><strong>总结一下，没事不要乱改和 sudo 有关的任何东西，会出事，绝逼会出事</strong></p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 TCP</title>
    <url>/2017/4/%E5%85%B3%E4%BA%8ETCP.html</url>
    <content><![CDATA[<blockquote>
<p>互联网协议族（Internet Protocol Suite，缩写 IPS）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP 协议集。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（TCP/IP Protocol Stack）</p>
</blockquote>
<span id="more"></span>
<p>以上来自维基百科，我们知道 TCP/IP 协议族是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大的集合。其中包含了 ARP、UDP、ICMP（互联网消息控制管理协议）等协议，它将软件的通信过程抽象化为四个抽象层（应用层、传输层、网络层和物理层），类似于简化的 OSI 七层。</p>
<p>在数据传输方面，早期研发提出两种传输方式 —— 面向连接的传输和非面向连接的传输，经过后来长期的发展，提出面向连接的 ISO 组织将非面向连接的传输纳入自己麾下，就是现在的 UDP。</p>
<h3 id="TCP"><a class="header-anchor" href="#TCP">¶</a>TCP</h3>
<h4 id="TCP-建立连接的过程——-TCP-的三次握手"><a class="header-anchor" href="#TCP-建立连接的过程——-TCP-的三次握手">¶</a>TCP 建立连接的过程 —— TCP 的三次握手</h4>
<p>首先，源向目的发送一个 TCP 同步请求（syn 包）；目的收到后向源发一个 TCP 回应（offer 包），这里面包含了 syn+ack 信息，此时处于半打开会话状态，存在巨大的安全隐患；源收到目的的回应后向目的发送一个 TCP 确认包（ack 包），就此处于全打开会话状态，TCP 连接建立完成。</p>
<h4 id="TCP-序列号和确认号"><a class="header-anchor" href="#TCP-序列号和确认号">¶</a>TCP 序列号和确认号</h4>
<p>TCP 会话的每一端都包含一个 32 位（bit）的序列号，该序列号被用来跟踪该端发送的数据量。每一个包中都包含序列号，在接收端则通过确认号用来通知发送端数据成功接收（发送序列号是当前的发包情况，确认号是渴望的发包情况）。</p>
<p>例如在握手的时候，源向目的发送 syn 包，seq=x；目的会给源一个回应，seq=y，ack=x+1；源收到了之后给目的回一个确认包，ack=y+1。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p>
<h4 id="TCP-划窗"><a class="header-anchor" href="#TCP-划窗">¶</a>TCP 划窗</h4>
<p>TCP 协议通过划窗机制来对流量进行控制管理，接收端通过发送确认号告诉发送端自己获包的情况，接收端通过三次发包后了解接收端的网络吞吐能力，然后稳定发包。</p>
<h4 id="TCP-重传"><a class="header-anchor" href="#TCP-重传">¶</a>TCP 重传</h4>
<p>TCP 包超时未响应后进行重传，一个包最多重传 16 次，无法处理后连接断开重连，三次失败后无法进行连接</p>
<p>*** 以上均为自己极浅的理解，详细内容还请移步至 Google ***</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Ubuntu 循环登录界面</title>
    <url>/2018/4/%E5%85%B3%E4%BA%8EUbuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.html</url>
    <content><![CDATA[<p>其实事情的起因很奇怪，前两天一直想升级 Ubuntu 18.04，不知道为什么 17.10 用着怪怪的，但是 18.04 又要到 4 月 26 号才发布，没有办法了只能 Beta 2 先用着试试了。</p>
<p>然后就是一顿正常的操作</p>
<span id="more"></span>
<h4 id="从Ubuntu-17-10-升级到-18-04-Beta-2"><a class="header-anchor" href="#从Ubuntu-17-10-升级到-18-04-Beta-2">¶</a> 从 Ubuntu 17.10 升级到 18.04 Beta 2</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先将当前系统更新</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> upgrade
<span class="token comment">#然后升级系统</span>
<span class="token function">sudo</span> do-release-upgrade <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就让系统自己去下载安装了，不过中途我在终端提示中看到了某个什么东西不可用，当然我也没有在意，估计更新到了正式版系统就没事了吧，结果这就埋下了伏笔。</p>
<h4 id="卡在了启动界面"><a class="header-anchor" href="#卡在了启动界面">¶</a> 卡在了启动界面</h4>
<p>没错，就是那个带着 Ubuntu logo，然后 logo 下面还有几个小点点的那个界面，卡的死死的。ESC 之后显示的状态应该是这样的</p>
<pre class="line-numbers language-none"><code class="language-none">[Started] Gnome Display Manage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后我当机立断的去 Google 了一下，不知道在哪里看到了一个答案是要进 Recovery mode 修复一下 dpkg，做完之后我觉得这并不够，开在启动界面的事情我第一次装 Ubuntu 也是遇到过，我知道是显卡驱动的问题，然后不知道在哪看到的方法，把我 Nvidia 驱动给卸载掉了。</p>
<blockquote>
<p>第一次装 Ubuntu 遇到这问题，解决的办法是在 Ubuntu 高级选项中，对需要引导的内核按 e 进行编辑，在 <code>quiet splash </code>那一行后面加上 <code>acpi_osi=linux nomodeset</code>，这个是针对 N 卡的，如果是 A 卡或者 Intel 核显有对应的解决办法</p>
</blockquote>
<h4 id="Ubuntu-Login-Loop"><a class="header-anchor" href="#Ubuntu-Login-Loop">¶</a>Ubuntu Login Loop</h4>
<p>重启之后确实能度过了 logo 的那一关，但是新的问题又来了，这次能达到登录的界面，但是输入密码登录之后会黑屏一下又回到登录界面。</p>
<p>这个 <code>Ubuntu Login Loop</code> 的问题已经不新鲜了，之前每个版本都有人遇到过，而且引起的原因也各不相同，这次我遇到了这个坑就来稍微的总结一下</p>
<ul>
<li>
<p><code>.Xauthority</code> 文件的所有人和所有组变成了 root：在你用户的主目录下有一个<code>.Xauthority</code> 文件，用 <code>ls -la</code> 查看一下该文件的所有人和所有组，如果是 root 的话那么需要将其改为你的登录用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> username:username .Xauthority<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><code>/tmp</code> 权限：用 <code>ls -ld</code> 查看一下 <code>/tmp</code> 的权限是否是 <code>drwxrwxrwxt</code>，否则就将其权限修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+wt /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>当然还有就是显卡驱动惹的祸：网上大部分人都是更新了显卡驱动才一直循环登录界面，而我就比较特殊了，我是卸载了显卡驱动，不过解决办法都是一样，就是重装显卡驱动呗</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#完全卸载N卡驱动</span>
<span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token parameter variable">--purge</span> nvidia*
<span class="token comment">#关闭图形界面</span>
<span class="token function">sudo</span> <span class="token function">service</span> lightdm stop
<span class="token comment">#禁用nouveau驱动</span>
<span class="token comment">#在/etc/modprobe.d/blacklist.conf中加入如下内容：</span>
blacklist nouveau
options nouveau <span class="token assign-left variable">modeset</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token comment">#然后执行</span>
<span class="token function">sudo</span> update-initramfs <span class="token parameter variable">-u</span>
<span class="token comment">#安装Nvidia驱动</span>
<span class="token function">sudo</span> add-apt-repository ppa:xorg-edgers/ppa <span class="token comment">#添加ppa源</span>
<span class="token function">sudo</span> add-apt-repository ppa:graphics-drivers/ppa <span class="token comment">#添加ppa源</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token comment">#更新apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nvidia-375
<span class="token comment">#最后别忘了打开图形化界面</span>
<span class="token function">sudo</span> <span class="token function">service</span> lightdm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于我的显卡是 GTX 960M，参考了一下网友们安装的是 375 的显卡驱动，等我安装完成后，系统提醒我显卡驱动太低级需要升级，没有办法还是升到了 390，然后重启一下，输入密码又回到了熟悉的图形化界面</p>
</li>
</ul>
<h4 id="写在最后"><a class="header-anchor" href="#写在最后">¶</a> 写在最后</h4>
<p>当然 login loop 的原因不止这些，有时候 <code>/etc/profile</code> 中改了或者加了些东西导致这些古怪的问题，所以我们需要对症下药。正确的做法是要先去查看主目录下<code>.xsession-errors</code> 日志的报错信息，从而去判断原因。</p>
<p>什么？你问我图形化界面进不去怎么做那么多操作？图形化进不去，还有命令行啊，我的图形化是 tty1，以上操作都是在 tty5 中进行的。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 timestamp 自动更新</title>
    <url>/2017/2/%E5%85%B3%E4%BA%8Etimestamp%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html</url>
    <content><![CDATA[<p>最近笔者在 “温习 TP 框架”（其实就是不会然后抓紧时间啃），从最简单 Blog 开始做起，以前学习的时候是跟着教程，用 time () 函数获取当前时间戳，然后用 int 型数据来存储。这一次我突然想用 Mysql 内置的时间类型的数据 ——timestamp。</p>
<span id="more"></span>
<p>Mysql 中常用到的除了 timestamp 之外还有 datetime，我们先来比较一下这两个的区别：</p>
<ol>
<li>timestamp 占用的存储空间为 4 个字节，所以它能表示的时间范围为 1970.1.1 08:00:01~2038.01.19 11:14:07，这个范围比较小，容易出现超出的情况。</li>
<li>datetime 占用的存储空间为 8 个字节，所以它能表示的时间范围为 1000.01.01 00:00:00~9999.12.31 23:59:59, 这个时间范围完全够用了。</li>
</ol>
<p>其实 timestamp 这个时间范围目前也是够用的，而且我也只是来学习的，所以我就选择了这个数据类型。然而后来我发现我在修改表中数据的时候时间并没有自动更新，这就比较奇怪了，我当时的 sql 代码是这样的：</p>
<pre class="line-numbers language-none"><code class="language-none">date timestamp not null default current_timestamp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>后来一顿 google 发现了问题所在，如果这个数据属性没有加上 default current_timestamp 的话，就会默认创建数据时获取当前时间且数据更新时更新时间，然而加上了 default current_timestamp 则必须要再加上 on update current_timestamp 才能自动更新时间。<br>
总结如下：</p>
<ul>
<li>如果该列属性 default current_timestamp 和 on update 语句都有，则初始值为当前时间并自动更新</li>
<li>如果该列属性 default current_timestamp 和 on update 语句都没有，则默认初始值为当前时间并自动更新</li>
<li>如果该列属性只有 default current_timestamp，那么初始值当前时间且时间不会自动更新</li>
<li>如果该列属性只有 on update 语句，则初始值为 0，会自动更新时间</li>
</ul>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>创建本地 APT 仓库</title>
    <url>/2021/8/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0-APT-%E4%BB%93%E5%BA%93.html</url>
    <content><![CDATA[<h3 id="背景"><a class="header-anchor" href="#背景">¶</a> 背景</h3>
<p>由于部分限制级场景无法联通外网，而 MAAS 在部署镜像的过程中，会默认连接 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> 的源去安装一些依赖包，在无外网环境下，会导致部署失败！因此考虑将 MAAS 在部署过程中的依赖包提前下载好，做成本地的 APT 仓库来解决。<br>
由于 MAAS 需要安装的依赖包并不多（一共 260M 左右），并不需要使用 apt-mirror 去搭建完整的 apt 仓库，我们将需要的依赖包都下载好，使用 apt-fptarchive 来发布我们的仓库。</p>
<span id="more"></span>
<h3 id="仓库制作"><a class="header-anchor" href="#仓库制作">¶</a> 仓库制作</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span>
 
<span class="token comment">## 先删除本地的缓存的 deb 包</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/cache/apt/archives/*.deb
 
<span class="token comment">## 下载依赖包</span>
<span class="token function">apt</span> <span class="token parameter variable">-d</span> reinstall <span class="token parameter variable">-y</span> amd64-microcode crda freeipmi-common freeipmi-tools grub-common grub-gfxpayload-lists grub-pc-bin grub-pc grub2-common intel-microcode ipmitool iucode-tool iw libdbus-glib-1-2 libevdev2 libfreeipmi17 libimobiledevice6 libipmiconsole2 libipmidetect0 libmysqlclient21 libnl-3-200 libnl-genl-3-200 libnvpair1linux libplist3 libsensors-config libsensors5 libsnmp-base libsnmp35 libupower-glib3 libusbmuxd6 libuutil1linux libzfs2linux libzpool2linux linux-firmware linux-generic linux-headers-5.4.0-77-generic linux-headers-5.4.0-77 linux-headers-generic linux-image-5.4.0-77-generic linux-image-generic linux-modules-5.4.0-77-generic linux-modules-extra-5.4.0-77-generic lldpd mysql-common os-prober python3-bcrypt python3-paramiko python3-pyudev python3-yaml smartmontools thermald upower usbmuxd wireless-regdb zfsutils-linux

 
<span class="token comment">## 创建仓库目录</span>
<span class="token function">mkdir</span> /opt/repo/pool/main <span class="token parameter variable">-p</span>
<span class="token function">mv</span> /var/cache/apt/archives/*.deb /opt/repo/pool/main/
 
<span class="token comment">## 开始创建</span>
<span class="token comment">### 生成公钥和私钥</span>
root@maas:~<span class="token comment"># gpg --full-generate-key</span>
gpg <span class="token punctuation">(</span>GnuPG<span class="token punctuation">)</span> <span class="token number">2.2</span>.19<span class="token punctuation">;</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.
This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
 
Please <span class="token keyword">select</span> what kind of key you want:
   <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> RSA and RSA <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
   <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> DSA and Elgamal
   <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> DSA <span class="token punctuation">(</span>sign only<span class="token punctuation">)</span>
   <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> RSA <span class="token punctuation">(</span>sign only<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> Existing key from card
Your selection? <span class="token number">4</span>
RSA keys may be between <span class="token number">1024</span> and <span class="token number">4096</span> bits long.
What keysize <span class="token keyword">do</span> you want? <span class="token punctuation">(</span><span class="token number">3072</span><span class="token punctuation">)</span> <span class="token number">1024</span>
Requested keysize is <span class="token number">1024</span> bits
Please specify how long the key should be valid.
         <span class="token number">0</span> <span class="token operator">=</span> key does not expire
      <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>  <span class="token operator">=</span> key expires <span class="token keyword">in</span> n days
      <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>w <span class="token operator">=</span> key expires <span class="token keyword">in</span> n weeks
      <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>m <span class="token operator">=</span> key expires <span class="token keyword">in</span> n months
      <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>y <span class="token operator">=</span> key expires <span class="token keyword">in</span> n years
Key is valid for? <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">0</span>
Key does not expire at all
Is this correct? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> y
 
GnuPG needs to construct a user ID to identify your key.
 
Real name: maas 
Email address: maas@maas.com
Comment:
You selected this <span class="token environment constant">USER</span>-ID:
    <span class="token string">"maas@maas.com"</span>
 
Change <span class="token punctuation">(</span>N<span class="token punctuation">)</span>ame, <span class="token punctuation">(</span>C<span class="token punctuation">)</span>omment, <span class="token punctuation">(</span>E<span class="token punctuation">)</span>mail or <span class="token punctuation">(</span>O<span class="token punctuation">)</span>kay/<span class="token punctuation">(</span>Q<span class="token punctuation">)</span>uit? o
We need to generate a lot of random bytes. It is a good idea to perform
some other action <span class="token punctuation">(</span>type on the keyboard, move the mouse, utilize the
disks<span class="token punctuation">)</span> during the prime generation<span class="token punctuation">;</span> this gives the random number
generator a better chance to gain enough entropy.
 
<span class="token comment">### key 的类型选择 RSA （sign only）</span>
<span class="token comment">### keyzise 选择 1024</span>
<span class="token comment">### 过期时间选择 0 （永不过期）</span>
<span class="token comment">### 最后填上 Real name 和 Email address</span>
<span class="token comment">### 完成后会要求设置私钥密码，后续导出私钥或者用私钥进行签名都会用到该密码！</span>
<span class="token comment">### 可以使用 gpg -k 来查看当前的 gpg key 信息</span>
root@maas:~<span class="token comment"># gpg -k</span>
/root/.gnupg/pubring.kbx
------------------------
pub   rsa1024 <span class="token number">2021</span>-08-19 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>
      D923B3893E0AB27C3690696CFC3E8D5996EBB76F
uid           <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span> maas <span class="token operator">&lt;</span>maas@maas.com<span class="token operator">&gt;</span>
 
<span class="token builtin class-name">cd</span> /opt/repo/
gpg <span class="token parameter variable">-a</span> <span class="token parameter variable">--export</span> maas@maas.com <span class="token operator">&gt;</span> maas.pub  <span class="token comment">## 导出公钥，后续需要将内容复制到 MAAS 上</span>
gpg <span class="token parameter variable">-a</span> --export-secret-keys maas@maas.com <span class="token operator">&gt;</span> maas.sec    <span class="token comment">## 导出私钥</span>
 
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> dists/focal/main/binary-amd64
apt-ftparchive  packages /opt/repo/pool/main/ <span class="token operator">&gt;</span> dists/focal/Packages
<span class="token builtin class-name">cd</span> dists/focal/
<span class="token function">gzip</span> <span class="token parameter variable">-c</span> Packages <span class="token operator">&gt;</span> Packages.gz
<span class="token function">cp</span> Packages* main/binary-amd64/
apt-ftparchive release <span class="token builtin class-name">.</span> <span class="token operator">&gt;</span> Release
gpg <span class="token parameter variable">-abs</span> <span class="token parameter variable">-o</span> Release.gpg Release
gpg <span class="token parameter variable">--clearsign</span> <span class="token parameter variable">-o</span> InRelease Release
 
<span class="token comment">### 创建 backports/proposed/security/updates 目录</span>
<span class="token comment">### 因为我们只是为了安装上述的依赖包从而完成部署流程，因此这几个目录只是用来骗过 ubuntu 的，直接从 focal copy 即可</span>
<span class="token comment">### proposed 是 src 源，不搞也可以</span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> focal focal-backports
<span class="token function">cp</span> <span class="token parameter variable">-r</span> focal focal-proposed
<span class="token function">cp</span> <span class="token parameter variable">-r</span> focal focal-security
<span class="token function">cp</span> <span class="token parameter variable">-r</span> focal focal-updates
 
<span class="token comment">## 通过 Nginx 发布 HTTP 服务</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx
<span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">$'/server_name _/a\ \ \ \ \ \ \ \ autoindex on;'</span> /etc/nginx/sites-available/default    <span class="token comment">## 打开 autoindex</span>
nginx <span class="token parameter variable">-t</span>    <span class="token comment">## 检查配置语法问题</span>
nginx <span class="token parameter variable">-s</span> reload     <span class="token comment">## 加载 nginx 配置</span>
<span class="token builtin class-name">cd</span> /var/www/html
<span class="token function">mv</span> /opt/repo ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改-MAAS-Package-repos-配置"><a class="header-anchor" href="#修改-MAAS-Package-repos-配置">¶</a> 修改 MAAS Package repos 配置</h3>
<p>如果客户环境连不到外网，那么我们在部署之前需要修改一下 maas 的配置</p>
<ol>
<li>登录至 maas web 控制界面</li>
<li>定位置至 Settings → Package repos</li>
<li> 修改 Ubuntu archive URL 为 http://maas_ip/repo/；并将之前导出的 maas.pub 内容粘贴至  Ubuntu archive  Key 中，保存</li>
</ol>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Django 需要注意的事项</title>
    <url>/2018/3/%E5%88%9D%E6%8E%A2Django%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B%E9%A1%B9.html</url>
    <content><![CDATA[<h4 id="更改默认数据库为-MySQL"><a class="header-anchor" href="#更改默认数据库为-MySQL">¶</a> 更改默认数据库为 MySQL</h4>
<p>Django 使用的默认数据库是 SQLite3，如果习惯使用的是 SQLite 的用户就可以不必更换数据库。</p>
<p>更换数据库的话在 <code>settings.py</code> 文件中 <code>DATABASES</code> 选项中进行更改</p>
<span id="more"></span>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>
        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'项目对应的数据库名称'</span><span class="token punctuation">,</span>
        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'登录mysql的帐户'</span><span class="token punctuation">,</span>
        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'登录mysql的密码'</span><span class="token punctuation">,</span>
        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>	<span class="token comment">#由于是在本地开发，所以是127.0.0.1</span>
        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span>	<span class="token comment">#这里mysql使用的是默认的3306端口</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="设置-Templates-的路径"><a class="header-anchor" href="#设置-Templates-的路径">¶</a> 设置 Templates 的路径</h4>
<p>在 <code>settings.py</code> 文件中的 <code>TEMPLATES</code> 选项中进行设置</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中 <code>BASE_DIR</code> 是项目的绝对路径，设置过 <code>Templates</code> 路径之后 <code>Django</code> 会在改路径下的 <code>templates</code> 文件夹下搜索对应的 <code>html</code> 文件。</p>
<h4 id="设置中文"><a class="header-anchor" href="#设置中文">¶</a> 设置中文</h4>
<p><code>settings.py</code> 最后有个选项为 <code>LANGUAGE_CODE</code>，这个选项是设置 <code>Django</code> 语言的。<code>Django</code> 为我们提供了很多自带的应用，如果习惯了看英文的话可以不用设置，直接使用默认的英语，如果英语看着膈应的话，可以设置为中文 <code>zh-hans</code> 或者 <code>zh_Hans</code></p>
<h4 id="添加创建的应用"><a class="header-anchor" href="#添加创建的应用">¶</a> 添加创建的应用</h4>
<p>当你新建应用之后要记得在 <code>settings.py</code> 中的 <code>INSTALLED_APPS</code> 选项中添加新建的应用 —— 直接在最后一行添加新建的应用名就好了。</p>
<h4 id="修改数据默认显示名称"><a class="header-anchor" href="#修改数据默认显示名称">¶</a> 修改数据默认显示名称</h4>
<p>在创建的数据类下面添加一个方法，根据 Python 的版本进行选择</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token number">2.7</span> <span class="token punctuation">:</span> __unicode__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
python <span class="token number">3</span> <span class="token punctuation">:</span> __str__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
然后在方法中返回self<span class="token punctuation">.</span>var	<span class="token comment">#var是类中数据中用来显示数据的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="Tamplates-过滤器"><a class="header-anchor" href="#Tamplates-过滤器">¶</a>Tamplates 过滤器</h4>
<p>这个过滤器其实可以说就是 Linux 下的管道符 <code>|</code>，Linux 玩的转的人对这个一定不会陌生，过滤器的基本形式就像这样</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span>var <span class="token operator">|</span> <span class="token builtin">filter</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有些过滤器会跟有参数，过滤器的参数都是跟随冒号，例如</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span>var <span class="token operator">|</span> default<span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>	<span class="token comment">#为变量var设置默认值0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CentOS 安装 KVM</title>
    <url>/2020/6/%E5%9F%BA%E4%BA%8E-CentOS-%E5%AE%89%E8%A3%85-KVM.html</url>
    <content><![CDATA[<h3 id="安装操作系统"><a class="header-anchor" href="#安装操作系统">¶</a> 安装操作系统</h3>
<p>UEFI 引导或者 Legacy BIOS 引导均可，冲就完事了</p>
<span id="more"></span>
<h3 id="安装-KVM-及其依赖"><a class="header-anchor" href="#安装-KVM-及其依赖">¶</a> 安装 KVM 及其依赖</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 先把源换了</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span>
<span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum makecache

<span class="token comment">## 安装 epel 源</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel-release

<span class="token comment">## 安装 KVM 以及依赖服务</span>
yum <span class="token function">install</span> ntp kvm virt-manager virt-top qemu-kvm qemu-kvm-tools libvirt <span class="token function">git</span> <span class="token function">vim</span> <span class="token function">htop</span>
systemctl start libvirtd
systemctl <span class="token builtin class-name">enable</span> libvirtd

<span class="token comment">## 配置 NTP</span>
<span class="token function">vim</span> /etc/ntp.conf
--------
server ntp.aliyun.com iburst  <span class="token comment"># 新增</span>
--------

systemctl start ntpd
systemctl <span class="token builtin class-name">enable</span> ntpd
ntpq <span class="token parameter variable">-p</span>  <span class="token comment"># 检查同步状态</span>

<span class="token comment">## 关闭 firewalled selinux</span>
systemctl stop firewalld
systemctl disable firewalld
setenforce <span class="token number">0</span>
<span class="token function">vim</span> /etc/sysconfig/selinux
-------
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled  <span class="token comment">#修改</span>
-------

<span class="token comment">## 修改 grub 引导配置</span>
<span class="token function">vim</span> /etc/default/grub
-------
<span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"crashkernel=auto spectre_v2=retpoline rd.lvm.lv=centos/root rd.lvm.lv=centos/swap intel_iommu=on rhgb quiet"</span>  <span class="token comment"># 开启 intel iommu</span>
-------
grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="网络配置"><a class="header-anchor" href="#网络配置">¶</a> 网络配置</h3>
<p>因为环境需要将两个数据口创建 bond4 来使用，以下需要先创建 bond，再将 bond 加入网桥</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 安装依赖并禁用 NetworkManager</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bridge-utils
systemctl stop NetworkManager
systemctl disable NetworkManager

<span class="token comment">## eno1 配置文件修改</span>
<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eno1
----------
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"eno1"</span>
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none
<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none
<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>eno1
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">MASTER</span><span class="token operator">=</span>bond1
<span class="token assign-left variable">SLAVE</span><span class="token operator">=</span>yes
----------
 
 
<span class="token comment">## eno2 配置文件修改</span>
<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eno2
----------
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"eno2"</span>
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none
<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none
<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>eno2
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">MASTER</span><span class="token operator">=</span>bond1
<span class="token assign-left variable">SLAVE</span><span class="token operator">=</span>yes
----------
 
 
<span class="token comment">## bond1 配置添加</span>
<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-bond1
----------
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Bond
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">USERCTL</span><span class="token operator">=</span>no
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>bond1
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>bond1
<span class="token assign-left variable">BONDING_MASTER</span><span class="token operator">=</span>yes
<span class="token assign-left variable">BONDING_OPTS</span><span class="token operator">=</span><span class="token string">"miimon=100 xmit_hash_policy=layer3+4 mode=4 lacp_rate=1"</span>
<span class="token assign-left variable">BRIDGE</span><span class="token operator">=</span>br1
----------
 
 
<span class="token comment">## br1 配置添加</span>
<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-br1
----------
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Bridge
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static
<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token variable">$ip</span>
<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token variable">$netmask</span>
<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token variable">$gateway</span>
<span class="token assign-left variable">PEEDNS</span><span class="token operator">=</span>yes
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>br1
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>br1
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">DNS1</span><span class="token operator">=</span>x.x.x.x
<span class="token assign-left variable">DNS2</span><span class="token operator">=</span>x.x.x.x
----------
 
<span class="token comment">## 删除默认网桥</span>
modprobe bonding
<span class="token function">virsh</span> net-destory default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设置虚拟机支持从-UEFI-启动"><a class="header-anchor" href="#设置虚拟机支持从-UEFI-启动">¶</a> 设置虚拟机支持从 UEFI 启动</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 安装依赖</span>
<span class="token function">wget</span> http://www.kraxel.org/repos/firmware.repo <span class="token parameter variable">-O</span> /etc/yum.repos.d/firmware.repo
yum makecache
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> edk2.git-ovmf-x64 OVMF
 
<span class="token comment">## 配置 libvirtd</span>
<span class="token function">vim</span> /etc/libvirt/qemu.conf  <span class="token comment"># 新增</span>
--------
nvram <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd:/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd"</span><span class="token punctuation">]</span>
--------
systemctl restart libvirtd
 
<span class="token comment">## 后面创建虚拟机的时候可以在 firmware 中选择 uefi 了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建属于自己的 Shadowsocks 服务</title>
    <url>/2017/8/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Shadowsocks%E6%9C%8D%E5%8A%A1.html</url>
    <content><![CDATA[<p>最近一直想自己搭一个 Shadowsocks 服务，并且利用服务器学习一些技术知识，但是国内的服务器实在是贵得很啊，像我这种苦逼大学生根本玩不起，无奈之下只好各种 Google 百度，最后找到了一些国外的 VPS 资源</p>
<ul>
<li>BandwagonHost(<a href="http://banwagong.cn/fangan.html">搬瓦工 VPS</a>)：据观察搬瓦工这个 VPS 还是算计比较便宜的，年付 $20 ，平均下来每个月只有 $1.6，而且套餐很良心很良心，512MB 的内存，10GB 的 SSD，1TB 的流量是不是比国内很多主机都划算的很。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FDO1.png" alt="DO1"></li>
</ul>
<span id="more"></span>
<ul>
<li><a href="https://www.vultr.com/">Vultr</a>: 同样也是 SSD VPS, 这个套餐看起来也还是很不错的，只不过每月两刀的套餐总是能被抢空。</li>
</ul>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FDO2.png" alt="DO2"></p>
<ul>
<li>Digital Ocean：也是我目前正在使用的，大家可以<a href="https://m.do.co/c/0b7931b5f2e8">点击此链接注册</a>，通过这个优惠链接注册的小伙伴们会直接获得 $10 的额度在你的账户余额里。而且他的这个套餐也是很诱人的，同样的 SSD VPS，20G 硬盘，每月 1TB 流量，1G 的带宽，只不过这个费用看起来太贵了，一个月需要 $5。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FDO3.png" alt="DO3"><br>
但是事情有这么简单吗？</li>
</ul>
<p>当然没有，鼎鼎大名的 gayhub 上有个提供给<a href="https://education.github.com">学生的 pack</a>，里面有各种东西，有需要者可以根据需要去使用，其中就有 Digital Ocean 的价值 $50 的 credit。好了，既然有了这等美差，下面该怎么搞呢？</p>
<p>既然是给学生用的，那么 github 肯定要判断你学生的身份，这个时候你需要一个 edu 邮箱，基本上国内很多大学都会给学生使用 edu 邮箱的，用你的 edu 邮箱去注册 github；或者有的已经注册过 github 的怎么办呢，登录帐号后进入 setting 选项，在右侧的 Email 中添加一个 Email 地址，然后验证就好了。进入<a href="https://education.github.com">学生包申请页面</a>，点击 <code>GET your pack</code>，然后就正常填写信息即可，之后我们就能获得需要的优惠码了。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FDO4.png" alt="DO4"><br>
下面我<a href="https://m.do.co/c/0b7931b5f2e8">注册 Digital Ocean</a>，正常的注册步骤，邮箱注册可以使用任意邮箱；邮箱验证结束之后进入到第二部验证，这一步需要有<code>信用卡</code>或者 <code>PayPal</code> 之类的 (如果你我皆是大穷逼的话，可以和我一样选择使用 <code>PayPal</code>，<a href="https://www.paypal.com">注册</a>一个 PayPal 再去绑定一张卡即可), 选择 <code>PayPal</code> 验证，然后支付 $5 即可完成验证，第三步是创建一个 Droplet，即创建一个 VPS，至于配置：</p>
<ul>
<li>
<p>系统根据你的需要去选择</p>
</li>
<li>
<p>size 选最小的 $5/mo 即可，你要是有钱我也不说什么了</p>
</li>
<li>
<p>数据中心的话，推荐洛杉矶 1 号机房吧，至于他们说的什么新加坡，我亲测慢成狗。</p>
</li>
</ul>
<p>之前注册的时候花了 $5，送了 $10，加上优惠码的 $50，一共就有 $65 了，实际花费 $5，使用十三个月，是不是物超所值。</p>
<p>VPS 创建完之后，Digital Ocean 会把 IP、账号和密码都发到你的注册邮箱，然后你就可以 ssh 登录到服务器啦！</p>
<hr>
<p>下面就开始搭建我们的 <code>Shadowsocks</code> 服务：</p>
<h4 id="安装Shadowsocks"><a class="header-anchor" href="#安装Shadowsocks">¶</a> 安装 Shadowsocks</h4>
<p>首先我们要安装 <code>Shadowsocks</code>，由于 <code>Shadowsocks</code> 是用 <code>python</code> 写的，我们先安装 <code>pip</code></p>
<pre class="line-numbers language-none"><code class="language-none">#由于我用的是Ubuntu的系统，其他系统的用户请自行Google
apt-get install python-pip
pip install shadowsocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="优化Shadowsocks性能"><a class="header-anchor" href="#优化Shadowsocks性能">¶</a> 优化 Shadowsocks 性能</h4>
<p>按照 SS 官方 Wiki，我们进行优化：</p>
<p>创建 <code>local.conf</code> 配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">vim /etc/sysctl.d/local.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入编辑模式之后输入以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none"># max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

# for high-latency network
net.ipv4.tcp_congestion_control = hybla

# for low-latency network, use cubic instead
# net.ipv4.tcp_congestion_control = cubic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>保存退出后，执行以下命令使之生效：</p>
<pre class="line-numbers language-none"><code class="language-none">sysctl --system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="配置Shadowsocks配置文件"><a class="header-anchor" href="#配置Shadowsocks配置文件">¶</a> 配置 Shadowsocks 配置文件</h4>
<p>在 <code>/etc/</code> 下创建配置文件：<code>vim /etc/shadowsocks.json</code><br>
然后进行编辑：</p>
<pre class="line-numbers language-none"><code class="language-none">{
    "server":"my_server_ip",
    "server_port":8388,
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"mypassword",
    "timeout":300,
    "method":"aes-256-cfb"        #这里的加密方式也可以选择其他的类型，自行把握
    "fast_open":false
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="最后启用Shadowsocks服务端功能"><a class="header-anchor" href="#最后启用Shadowsocks服务端功能">¶</a> 最后启用 Shadowsocks 服务端功能</h4>
<pre class="line-numbers language-none"><code class="language-none">nohup ssserver -c /etc/shadowsocks.json -d start &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p><code>nohup</code> 是把运行日志输出到当前用户主目录下的 <code>nohup.out</code> 文件中</p>
</blockquote>
<p>到这里 VPS 上的 Shadowsocks 服务基本上就搭建完毕了，接下来的事情我想大家应该都会做了吧，爬上梯子开始翻墙吧。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>美版 V30 系统升级</title>
    <url>/2018/10/%E7%BE%8E%E7%89%88V30%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7.html</url>
    <content><![CDATA[<p>关于国行版本的 Andorid 手机的系统升级，肯定是没有什么问题的，连了网升就完事儿了；但是非国行版本的呢？会有一点小问题。</p>
<p>前两天刚入手了一款次次旗舰 LG V30，去年的旗舰 835，4+64 的配置今年已然跌倒了千元来搞基的价位，果断入手了。说是要搞基，但是作为一个老年人，实在是懒得折腾了，某鱼的老板说韩版卖断货了，近期只有一款美版的 H932 支持移动全频段，就入手了。</p>
<p>到手稍微检查了一下，一切正常，梯子挂上美滋滋，但是出现了一个奇怪的问题 —— 系统更新下载不下来。当时的网络状态是挂了梯子的，但是由于 Google 在系统上做的一些安全机制，导致挂了梯子（即网络流量被监控）的机器的系统更新了的流量不从梯子上走，所以会一直卡在 System Update Downloading。</p>
<p>解决的办法有三个：</p>
<span id="more"></span>
<ol>
<li>
<p>肉身翻墙</p>
</li>
<li>
<p>路由器翻墙</p>
</li>
<li>
<p>用一台翻墙的机器将网络共享给你的手机</p>
</li>
</ol>
<p>前两个方法对于大多数人来说还是比较困难的，正常人一般都是直接挂梯子，路由器翻墙虽然很多人家里都有设置，但是如果是在公共网络环境下的话，只能使用第三种方法（刷机除外）。</p>
<p>步骤很简单：</p>
<ul>
<li>一台机器挂上 SS/SSR （我这里是用电脑，手机我觉得也是可以的）</li>
<li>挂上梯子的这台机器的 SS/SSR 选项勾选 <code>允许来自局域网的连接</code><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%85%81%E8%AE%B8%E6%9D%A5%E8%87%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9A%84%E8%BF%9E%E6%8E%A5.png" alt="允许来自局域网的连接.png"></li>
<li>查看本机的局域网 IP ，并记住</li>
<li>手机连上和翻墙的机器同一个局域网，在 WiFi 的高级选项中，设置代理</li>
<li>代理设置为手动，代理主机为翻墙机器的局域网 IP，端口号为 1080（上一步中有），保存即可<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FWiFi%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="WiFi 代理设置"></li>
</ul>
<p>至此，我们就已经成功地不在手机上挂梯子也能翻墙了（MDZZ），下面就能愉快的更新啦！</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2017/10/%E6%A0%88.html</url>
    <content><![CDATA[<p>栈是一种<strong>先进后出</strong>的线性数据结构，规定只允许在一端进行插入和删除元素的操作。其中进栈操作又叫做压栈（Push），出栈操作又叫做弹出（Pop）。允许进行操作的一端叫做栈顶（top），另一端叫做栈底（base）。</p>
<h4 id="分类"><a class="header-anchor" href="#分类">¶</a> 分类</h4>
<ul>
<li>顺序栈：数组实现</li>
<li>链式栈：链表实现 </li>
</ul>
<span id="more"></span>
<h4 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a> 代码实现</h4>
<h5 id="顺序栈"><a class="header-anchor" href="#顺序栈">¶</a> 顺序栈</h5>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fstack.png" alt="stack"><br>
1. 构建栈的结构</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">1024</span>		</span><span class="token comment">//定义栈的空间大小</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">stack</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>	
  <span class="token keyword">int</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Stack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2. 初始化</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Stack <span class="token operator">*</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Stack stack<span class="token punctuation">;</span>
    stack <span class="token operator">=</span> <span class="token punctuation">(</span>Stack<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">else</span><span class="token punctuation">{</span>
      	stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">//C语言数组下标从0开始</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Init successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3. 判断栈是否为空</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4. 判断栈是否满</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isFull</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> MAXSIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The satck is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5. 进栈操作（Push）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>入站操作先移动 Top，再压入元素</em></p>
<p>6. 出栈操作（Pop）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">//返回被弹出的元素</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>7. 遍历操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> satck<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The items in the stack are:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="链式栈"><a class="header-anchor" href="#链式栈">¶</a> 链式栈</h5>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fstack1.png" alt="stack1"><br>
1. 构建栈的结构</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>
  	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
  	<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>2. 初始化栈</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Node<span class="token operator">*</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Node<span class="token operator">*</span> s<span class="token punctuation">;</span>
  	s <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">else</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Init successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> s<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3. 判断栈是否为空</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>4. 进栈操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Node<span class="token operator">*</span> node<span class="token punctuation">;</span>		<span class="token comment">//为插入的元素构建一个节点</span>
  	node <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>
  	node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>		<span class="token comment">//这里写成node-&gt;next = NULL应该也可以吧</span>
  	s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5. 出栈操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Pop</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Node<span class="token operator">*</span> Top<span class="token punctuation">;</span>
  	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	Top <span class="token operator">=</span> s<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  	s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> Top<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  	data <span class="token operator">=</span> Top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
  	<span class="token function">free</span><span class="token punctuation">(</span>Top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>6. 遍历操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The items in the stack are:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	Node<span class="token operator">*</span> p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> s<span class="token punctuation">;</span>
  	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      	p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>解决 Ubuntu 下 Apache 不解析 PHP 问题</title>
    <url>/2017/7/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8BApache%E4%B8%8D%E8%A7%A3%E6%9E%90PHP%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<p>这两天笔者遇到了一个很操蛋的问题 ——Apache 无法解析 PHP 代码了，之前一直用的挺好的，突然就挂了，然后在网上疯狂的找解决办法，但是大都是 php5 的版本，而我却是 7 的版本，我就先顺便把 5 版本的解决方法贴出来：</p>
<blockquote>
<p>修改 apache 的配置文件 httpd.conf</p>
</blockquote>
<blockquote>
<p>在 httpd.conf 中找到：<br>
<code>AddType application/x-gzip .gz .tgz</code><br>
在该行下面添加<br>
<code>AddType application/x-httpd-php .php</code></p>
</blockquote>
<blockquote>
<p>再找继续找到：<br>
<code>DirectoryIndex index.html</code>，<br>
把此行修改成<br>
<code>DirectoryIndex index.html index.htm index.php</code></p>
</blockquote>
<blockquote>
<p>再找到：<br>
<code>#ServerName www.example.com:80</code><br>
改成<br>
<code>ServerName localhost:80</code></p>
</blockquote>
<p>然而 Ubuntu 下的 Apache 并没有 httpd.conf 这个配置文件，而是通过一个 apache2.conf 来引用每个部分的配置文件，这样在一个配置包里找到那一句配置也并不简单，而且我还没有找到。。。</p>
<p>不过皇天不负有心人，终于是找到了解决办法：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libapache2-mod-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一步安装了 apache 的扩展包，可以用于解析 php，我觉得不管是 7 版本还是 5 版本都可以适用。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Ubuntu 下 PHP 验证码不显示问题</title>
    <url>/2017/7/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8BPHP%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<p>这两天在帮别人写一个注册登录功能的页面，用到了简单的 TP 框架，但是在我自己的 Ubuntu 环境下发现验证码出了问题 —— 验证码图片显示不出来。</p>
<p>我将图片单独拉出来，发现错误提示如下：</p>
<pre class="line-numbers language-none"><code class="language-none">Call to undefined function imagecreate()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>百度一问就找到了答案，原来这是由于没有安装或者开启 PHP 的 GD 库导致的，既然这样我只需要安装一下 GD 库就解决了：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install php7.0-gd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完毕后将 Apache 服务器重启，如果是 Nginx 的话，则可用可不用</p>
<p>如果是 Windows 环境的话，打开 PHP 安装目录下的 php.ini 配置文件，找到：</p>
<pre class="line-numbers language-none"><code class="language-none">;extension=php_gd2.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>去掉注释，重启服务就解决了。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Ubuntu 系统设置打不开</title>
    <url>/2017/2/%E8%A7%A3%E5%86%B3Ubuntu%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E6%89%93%E4%B8%8D%E5%BC%80.html</url>
    <content><![CDATA[<p>今天把 Ubuntu 从 16.04 更新到 16.10 之后卸载了些软件，之后蛋疼的发现系统设置打不开了，真是欲哭无泪。去网上搜了下发现是我之前由于卸载了 iBus 导致的，虽然我不懂为什么 iBus 和 Ubuntu 之间的关系为什么会如此紧密，但是既然发生了这种事情我也很绝望啊，只能按照网上的方法</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ubuntu-desktop         #这个会把Ubuntu预装的软件office还有Amazon什么的装回来，装完自己再慢慢卸载吧<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者他也提供了一次性的安装办法</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ibus-pinyin unity-control-center unity-control-center-signon webaccounts-extension-common xul-ext-webaccounts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是我眉头一皱，发现事情并不简单，我继续搜了下去，也有很多人遇到这种问题，发现还有更简单的办法</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gnome-control-center           #如果系统设置打不开，请重新安装gnome-control-center
sudo apt-get install unity-control-center           #如果设置里只有很少的几个图标请重新安装unity-control-center<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当然上面两个方法并没有尝试过，我也无从得知导致我系统设置打不开的原因是不是卸载了 iBus</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Ubuntu 下搜狗拼音候选词乱码</title>
    <url>/2018/5/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8B%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E5%80%99%E9%80%89%E8%AF%8D%E4%B9%B1%E7%A0%81.html</url>
    <content><![CDATA[<p>今天 Ubuntu 系统下的搜狗拼音突然抽疯了，中文输入的时候候选词区域都是全是一串无意义的英文字母，不知道是不是因为对 Linux 系统的支持问题还是怎么回事，解决办法也很简单，就是删除搜狗的配置文件，重新登录就好了，只是需要重新设置原来的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.config
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> SogouPY* sogou*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>别忘了注销再登录哦</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 Arch 的安装经历</title>
    <url>/2017/2/%E8%AE%B0%E4%B8%80%E6%AC%A1Arch%E7%9A%84%E5%AE%89%E8%A3%85%E7%BB%8F%E5%8E%86.html</url>
    <content><![CDATA[<p>最近由于听信了别人的 “谗言”，心血来潮想试一试 Arch，所以便准备在虚拟机上装一个 Arch 来看看效果，也算是一次艰难的装系统之路了吧。</p>
<p>那么下面打开虚拟机，进入安装界面：</p>
<p>首先是分区，Arch 给我们提供了一个很好的分区交互工具 cfdisk</p>
<pre class="line-numbers language-none"><code class="language-none">cfdisk        #使用cfdisk进行分区
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p><em>选择第二个 dos 类型</em>，这是将 sda 设置成 MBR 类型的分区，之前在遇到这个选项的时候，我下意识的选了第一个 GPT，然后还去 google 了一下，说 GPT 很好，就使用这个吧，结果后面分区的时候和教程不一样，装好系统后怎么也进不去。</p>
<p>接下来你可以把整个硬盘设置成一个根分区或者分成一个根分区和一个 boot 分区。<em>如果设置成一个根分区记得要把那个分区设置 bootable；如果是一个根分区和一个 boot 分区记得要把 boot 分区设置 bootable。</em></p>
<p>退出 cfdisk 后格式化新设置的分区</p>
<pre class="line-numbers language-none"><code class="language-none">lsblk       #查看存储设备的状态，sda1、sda2这样的就是我们刚刚分出来的
mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sda2         #将根分区和boot分区格式化成ext4格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后就可以进行挂载了</p>
<pre class="line-numbers language-none"><code class="language-none">mount /dev/sda2 /mnt           #将根分区挂载到/mnt
mkdir /mnt/boot         #为boot分区创建挂载点
mount /dev/sda1 /mnt/boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>接着修改软件镜像源</p>
<pre class="line-numbers language-none"><code class="language-none">cd /etc/pacman.d        #镜像源文件在这个目录下
#我们需要将China源放到文件头的位置，下面先将这段源提取到temp这个文件里
grep -A 1 '##.*China' mirrorlist|grep -v '\-\-' &gt; temp
#然后将mirrorlist的内容添加到temp的最后面
cat mirrorlist &gt;&gt; temp
mv temp mirrorlist         #temp替换mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后刷新软件仓库列表就可以开始安装了</p>
<pre class="line-numbers language-none"><code class="language-none">pacman -Syy         #刷新软件仓库列表
pacstrap -i /mnt base base-devel        #安装系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>接下来需要生成一个叫 fstab 的配置文件，在开机时候会由 mount 命令读取并挂载其中的分区。在安装完基本系统之后，就可以将 fstab 信息写入新安装的系统中了。</p>
<pre class="line-numbers language-none"><code class="language-none">genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab
nano /mnt/etc/fstab         #确认fstab文件真的生成了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>下面我们就可以进入新系统进行配置了</p>
<pre class="line-numbers language-none"><code class="language-none">arch-chroot /mnt /bin/bash
passwd          #设置root密码
echo 主机名 &gt; /etc/hostname         #设置主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后配置区域</p>
<pre class="line-numbers language-none"><code class="language-none">nano /etc/locale.gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将 <code>en_US.UTF-8</code>、<code>zh_CN.UTF-8</code>、<code>zh_TW.UTF-8</code> 的注释去掉，然后按 Ctrl+x 保存，退出，使用</p>
<pre class="line-numbers language-none"><code class="language-none">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成区域，然后设置 locale.conf 文件</p>
<pre class="line-numbers language-none"><code class="language-none">echo LANG=en_us.UTF-8 &gt; /etc/locale.conf#如果在终端下使用中会出现乱码，可以装fbterm来解决<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面配置时区</p>
<pre class="line-numbers language-none"><code class="language-none">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装引导工具 Grub</p>
<pre class="line-numbers language-none"><code class="language-none">pacman -S grub
grub-install --recheck /dev/sda1        #将grub写入系统，没有提示错误说明写入成功
grub-mkconfig -o /boot/grub/grub.cfg        #生成配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>配置一下网络</p>
<pre class="line-numbers language-none"><code class="language-none">systemctl enable dhcpcd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>到现在为止，系统基本上配置好了，现在退出新系统，卸载挂载的分区，然后重启虚拟机</p>
<pre class="line-numbers language-none"><code class="language-none">exit
umount -R /mnt
reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>剩下来的安装图形化界面和美化的步骤可以自行 Google。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>解决配置完七牛后无法 Deploy 到 Github</title>
    <url>/2017/2/%E8%A7%A3%E5%86%B3%E9%85%8D%E7%BD%AE%E5%AE%8C%E4%B8%83%E7%89%9B%E5%90%8E%E6%97%A0%E6%B3%95Deploy%E5%88%B0github.html</url>
    <content><![CDATA[<p>将七牛的插件配置好后我写了上一篇博客试一试效果，结果发现怎么也没部署到 github，每次 <code>hexo d</code> 都会出现</p>
<pre class="line-numbers language-none"><code class="language-none">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样的报错，Google 了半天都没有找到解决的办法，最后在找到了 Github 上的一条 issue，终于发现了解决办法：<strong>只要将配置文件_config.yml 中 plugins 的那段给注释掉</strong>就 OK 了，即</p>
<pre class="line-numbers language-none"><code class="language-none">#plugins:
#- hexo-qiniu-sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还是希望开发者能早点修改文档吧，不然还真的挺容易出事，不过说一句，我的 Hexo 是 3.2.2 的版本的，不知道 2.x 版本会不会出现类似的情况</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>什么情况？访问不了虚拟机了？？</title>
    <url>/2021/10/%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%86.html</url>
    <content><![CDATA[<p>前几日在家中遇到一件有趣的事情，与大家分享一下。</p>
<p>起初我有一套硬件 A，安装了 ESXi 与一些虚拟机，后来将 A 上的数据盘与系统盘（U 盘）拆至硬件 B 上，即 ESXi 从 A 迁移到了 B。闲置下来的硬件 A 就被我拿来安装了黑苹果，然而在黑苹果的路上遇到了很多的坑，例如掉帧、黑色块的问题（显卡驱动），蓝牙鼠标掉线的问题（蓝牙驱动），后来甚至发现这套黑苹果访问不了我的虚拟机们，也访问不到 ESXi。这时的我还很天真的以为是虚拟化和黑苹果之间的问题，Google 了一番未果还是换回了 Windows。</p>
<span id="more"></span>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8F%98%E6%9B%B4%E5%8F%B2.png" alt="变更史"></p>
<p>天真我以为这样就已经解决了问题，但结果是并没有什么卵用。同时我发现一直在使用的电脑访问 ESXi 也出现了问题，网络丢包严重，但是访问虚拟机却一点事情也没有。事已至此只能先简单抓包看一下，从硬件 A ping 向 ESXi（硬件 B）的同时，在 ESXi 上使用 tcpdump-uw 进行抓包（通过虚拟机作为跳板机连上 ESXi），结果是硬件 A 正常发送 ARP 请求，但是 ESXi 这里并没有收到 A 发送的请求。</p>
<p>到这里我基本断定是 ARP 的问题，但是为啥 ESXi 收不到我发出来的 ARP 包，其他的硬件却都能收到，我不得而知。但是为了验证我的猜想，我决定先在 Windows 上静态绑定一下 ARP 记录。</p>
<pre class="line-numbers language-none"><code class="language-none"># 先用 netsh 找到对应 interface 的 idx
netsh i i show in   # netsh interface ipv4 show interfaces

# 绑定 IP-MAC
netsh -c "i i" add ne &lt;idx&gt; &lt;IP&gt; &lt;MAC&gt;  # netsh -c "interfaces ipv4" add neighbors &lt;idx&gt; &lt;IP&gt; &lt;MAC&gt;

# 也可以直接用 arp 命令进行临时绑定
arp -s &lt;IP&gt; &lt;MAC&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里 ESXi 的 MAC 是从虚拟机 ARP 获得的，因为目前只有虚拟机访问 ESXi 比较正常。绑定完 MAC 地址后我又信誓旦旦进行验证，结果网络依然不通！！WTF？？到底发生甚么事了了？一开始以为 MAC 地址写错了，反复比对后确认了 MAC 地址并没有问题，那么为啥虚拟机用这个 MAC 地址可以 ping 通 ESXi，我用这个 MAC 就不行呢？</p>
<p>后来我怀疑是交换机的问题，我众多设备不是都接在同一个交换机上的，实际上是两个串联的傻瓜交换机，客厅一个卧室一个，而 ESXi 在客厅，实验的两台电脑在卧室。但是这个不成熟的猜想瞬间就被我给否定了，毕竟客厅和卧室里其他的设备互联都没有问题。</p>
<p>就在我一筹莫展把注意力集中到 Windows 的网络配置上时，我突然发现了一个神奇的事情 —— 硬件 B Windows 的 MAC 地址为啥和我 ESXi 一摸一样？？这真是见了鬼了，两个不同硬件为啥会有相同的 MAC 地址！难道是因为 ESXi 迁移的时候 MAC 地址并没有跟着硬件走？毕竟 ESXi 的管理地址是在 VMKernel 上的，这并不是一个物理接口。</p>
<p>简单了搜了一下，在 VMware 的 KB 中确实有这样的记载 —— <a href="https://kb.vmware.com/s/article/1031111?lang=zh_CN">更换网卡后或 vmkernel 的 MAC 地址重复时 vmk0 管理网络 MAC 地址不更新</a>。如果已经冲突了就只能删除原来的管理端口，重新创建，但是我这台 ESXi 只有一个网络接口，如果删了的话就只能连上显示器去配置了，所以为了省事就在 Web 界面先添加一个端口，再删除原来的即可。</p>
<p>如果要配置静态的 IP 地址又不想接显示器的话，可以 SSH 到 ESXi 后进行如下操作</p>
<pre class="line-numbers language-none"><code class="language-none">TERM=xterm
dcui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fesxi.png" alt="ESXi 控制台"><br>
绝对的懒人福音！！</p>
<p>重建了管理端口后，没有了 MAC 地址冲突，硬件 A 的 Windows 又满血复活了，这件事情告诉我们，没事别特么的拆东墙补西墙！</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>ESXi</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 DNSPod 自动获取泛域名证书</title>
    <url>/2024/2/%E9%85%8D%E7%BD%AE-DNSPod-%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6.html</url>
    <content><![CDATA[<p>最近升级了下家里的 LB，通过 gitlab 将 LB 的配置做了版本管理，并且通过 docker-compose 实现 LB 的快速部署。但是家里的网络做了内外网的区分，为了实现内网 https 访问，我需要在内网的 LB 上配置一套 SSL 证书（公网的部分直接在 CDN 上配置了 <code>let's encrypt</code> 的免费证书，一年一换）</p>
<p>为了避免麻烦，对于内网的 https 证书希望做到以下两点：</p>
<ul>
<li>到期自动续</li>
<li>泛域名</li>
</ul>
<span id="more"></span>
<p>查找了一番，有两个工具比较符合：<code>Certbot</code> 和 <code>acme.sh</code>，都是通过 <a href="https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment"><code>ACME protocol</code></a> 去自动获取免费证书，但是需要自动获取泛域名证书的话，还需要能够自动在 DNS Provider 处更新 <a href="https://en.wikipedia.org/wiki/TXT_record"><code>DNS TXT Record</code></a>。由于我的域名是在 DNSPod 购买的，因此需要能够支持在 DNSPod 上自动更新 TXT 记录。Certbot 没有对应的官方插件，但是有第三方好心人写的插件能够实现该功能，如 <a href="https://github.com/tengattack/certbot-dns-dnspod">certbot-dns-dnspod</a>；而 <a href="http://acme.sh">acme.sh</a> 是国人写的工具，官方支持 Aliyun 和 DNSPod，思来想去，还是打算使用 <a href="http://acme.sh">acme.sh</a>。</p>
<h3 id="Docker-Compose-Configuration"><a class="header-anchor" href="#Docker-Compose-Configuration">¶</a>Docker Compose Configuration</h3>
<p>根据 <a href="https://github.com/acmesh-official/acme.sh/wiki/deploy-to-docker-containers">官方文档</a> 先将 Docker Compose 配置好，从文档里可以看出，<a href="http://acme.sh">acme.sh</a> 容器会以 daemon 的形式一直运行，后续的申请证书、部署、续签等操作都需要 docker compose exec 单独去操作。Dockers Compose 配置如下：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">version: "3.9"
services:
  nginx:
    restart: always
    container_name: nginx
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    labels:
      - sh.acme.autoload.domain=${DOMAIN_NAME}
    volumes:
      - $PWD/conf.d:/etc/nginx/conf.d:ro
      - $PWD/nginx.conf:/etc/nginx/nginx.conf:ro
      - $PWD/log/:/var/log/nginx/:rw
    environment:
      - TZ=Asia/Shanghai
  
  acme:
    image: neilpang/acme.sh
    container_name: acme.sh
    command: daemon
    volumes:
      - $PWD/acmeout:/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock
    dns:
      - 8.8.8.8
    environment:
      - DEPLOY_DOCKER_CONTAINER_LABEL=sh.acme.autoload.domain=${DOMAIN_NAME}
      - DEPLOY_DOCKER_CONTAINER_KEY_FILE=/etc/nginx/ssl/key.pem
      - DEPLOY_DOCKER_CONTAINER_CERT_FILE=/etc/nginx/ssl/cert.pem
      - DEPLOY_DOCKER_CONTAINER_CA_FILE=/etc/nginx/ssl/ca.pem
      - DEPLOY_DOCKER_CONTAINER_FULLCHAIN_FILE=/etc/nginx/ssl/full.pem
      - DEPLOY_DOCKER_CONTAINER_RELOAD_CMD="service nginx force-reload"
      - DP_Id=${DP_Id}
      - DP_Key=${DP_Key}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外还需要添加一个 <code>.env</code> 文件用来存放如下变量：</p>
<ul>
<li><code>${DOMAIN_NAME}</code>：用于申请证书的泛域名</li>
<li><code>${DP_Id}</code>：DNSPod API Key ID</li>
<li><code>${DP_Key}</code>：DNSPod API Key</li>
</ul>
<h3 id="申请证书"><a class="header-anchor" href="#申请证书">¶</a> 申请证书</h3>
<p><a href="http://acme.sh">acme.sh</a> 默认的 ssl 服务器是 <code>ZeroSSL.com</code>，根据 <a href="https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA">文档</a> 里提到的，在申请证书之前，需要先注册账户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> acme --register-account <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>your email address<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注册完成后就可以正式申请证书了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> acme <span class="token parameter variable">--issue</span> <span class="token parameter variable">--dns</span> dns_dp <span class="token parameter variable">-d</span> <span class="token variable">${DOMAIN_NAME}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等待证书申请完成后，可以看到 <code>acmeout</code> 目录下会出现一个 <code>${DOMAIN_NAME}</code> 命名的目录，该目录下就是我们申请到的证书。接着运行命令将证书部署到 nginx 的目录下（该目录则是在 docker compose 中通过 environment 传参给 acme 容器的）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> acme <span class="token parameter variable">--deploy</span> <span class="token parameter variable">-d</span> <span class="token variable">${DOMAIN_NAME}</span>  --deploy-hook <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>理论上到这里我们的证书申请和部署就已经结束了。</p>
<h3 id="修锅"><a class="header-anchor" href="#修锅">¶</a> 修锅</h3>
<p>当然我在申请证书的时候，遇到了些问题，比如在等待证书签售的过程中，一直在报错</p>
<pre class="line-numbers language-none"><code class="language-none">Order status is processing, lets sleep and retry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等待的超时时间是 15s，连续 retry 了多次之后肯定是有问题的，参考了 <a href="https://u.sb/acme-sh-ssl/">网络上其他的人建议</a>，将默认的 CA Server 从 <code>ZeroSSL.com</code> 更换成了 <code>Let's Encrypt</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> acme --set-default-ca <span class="token parameter variable">--server</span> letsencrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="续签证书"><a class="header-anchor" href="#续签证书">¶</a> 续签证书</h3>
<p><a href="http://acme.sh">acme.sh</a> 不用我们手动去执行 renew 的命令来续签到期的证书，正如之前所说，acme 的容器是以 daemon 状态运行的，因此他会定时的去检测我们的证书到期时间，在到期之前会自动进行 renew 操作。可以在 <code>acmeout/${DOMAIN_NAME}/${DOAMIN_NAME}.conf</code> 中看到，有一项 <code>Le_NextRenewTimeStr</code> 配置，该配置了记录了 <a href="http://acme.sh">acme.sh</a> 下一次续签证书的时间。</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>雾都游记</title>
    <url>/2020/10/%E9%9B%BE%E9%83%BD%E6%B8%B8%E8%AE%B0.html</url>
    <content><![CDATA[<h3 id="第一天"><a class="header-anchor" href="#第一天">¶</a> 第一天</h3>
<p>18:30 落地，取得托运行李后，自<strong>江北机场 T3 航站楼</strong>乘坐地铁<strong>十号线（鲤鱼池方向）<strong>至红</strong>土地换</strong>乘地铁<strong>六号线（茶园方向）<strong>至</strong>小什字下车（8 号口）</strong>，马路对面就是宾馆！！</p>
<blockquote>
<ul>
<li>重庆地铁可使用支付宝刷码进站</li>
<li>宾馆前台在 16F，10-15F 是客房</li>
<li>企业金会员，有双早，但是早饭不好吃</li>
<li>紧承上一条，楼下马路对面就有花市豌杂面（如果不想吃汤面就和老板说要干溜），不想排队等座位的话，可以考虑打包去别的地方吃（隔壁就有类似大食堂的早餐店）</li>
</ul>
</blockquote>
<p>在宾馆休整些许后，步行出发去<strong>九村烤脑花（西西推荐，冤有头债有主，觉得不好吃不要找我）</strong>，步行至洪崖洞店，在附近买了两杯<strong>一只酸奶牛</strong>后就餐；推荐<strong>香菜牛肉、烤茄子、烤鸡翅</strong>等</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B9%9D%E6%9D%91%E7%83%A4%E8%84%91%E8%8A%B1.png" alt="九村烤脑花"></p>
<blockquote>
<ul>
<li>宾馆附近有三家九村烤脑花，分别在来福士、洪崖洞、解放碑，三个店离宾馆差不多距离，来福士店十点关门，所以建议去其他两个店</li>
<li>九村烤脑花是烧烤店，烤脑花为特色菜，其他菜也很好吃，人均 70~80，人越多越划算</li>
</ul>
</blockquote>
<p>吃完回酒店修锅，一夜无事 💤</p>
<span id="more"></span>
<style>
.page-post-detail .post-body .group-picture-column {
  float: none;
  margin-top: 5px;
  // width: auto ;
  img { margin: 0 auto;  width: 100% ; }
}
.fancybox {
    display: inline-block;
}
</style>
<h3 id="第二天"><a class="header-anchor" href="#第二天">¶</a> 第二天</h3>
<p>睡到中午，洗漱出门。</p>
<p>步行至解放碑吃小吃，较场口夜市区域购买<strong>降龙爪爪、蜜雪冰城冰激凌</strong>，后步行至石灰市，购买现炸小酥肉，并于<strong>谭记王烤鱼</strong>就餐。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%99%8D%E9%BE%99%E7%88%AA%E7%88%AA.png" alt="降龙爪爪"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%9C%9C%E9%9B%AA%E5%86%B0%E5%9F%8E%E7%94%9C%E8%9C%9C%E8%9C%9C.png" alt="蜜雪冰城甜蜜蜜"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E7%8C%AA%E8%B9%84.png" alt="烤猪蹄"></div></div><div class="group-picture-row"></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%B0%8F%E9%85%A5%E8%82%89.png" alt="小酥肉"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E5%9C%9F%E8%B1%86.png" alt="烤土豆"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%85%B8%E5%A5%B6%E7%89%9B.png" alt="酸奶牛"></div></div><div class="group-picture-row"></div></div>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E9%B1%BC.png" alt="烤鱼"></p>
<blockquote>
<ul>
<li>降龙爪爪排队的人比较多，但务必要吃，真的好吃
<ul>
<li>火锅味很辣，真的辣</li>
<li>老卤味很香，真的香</li>
<li>其他口味没有吃</li>
</ul>
</li>
<li>降龙爪爪隔壁有家卖脆骨的，人也很多，味道还可以，但是很贵，没有性价比</li>
<li>蜜雪冰城冰激凌三块钱，很好吃</li>
<li>小吃街卖现炸小酥肉的，大多都不好吃，不要看排队的人多，买回来可能还不如上海谭鸭血点的</li>
<li>谭记王烤鱼虽然好吃，但真的很贵，一条江团的套餐 140（和江边城外不相上下），人多的局可以选择吃对面的，烤鱼 + 江湖菜，会比较划算</li>
</ul>
</blockquote>
<p>午餐后沿着石灰市一路向北，来到莲花池社区，其中有著名的<strong>石灰市李串串</strong>，以及一些小区里居民自己开的烧烤、火锅、烤鱼店，味道都很地道，墙裂推荐！！</p>
<blockquote>
<p>石灰市李串串要吃里面那家老店（有标识），一年前吃过，大众点评必吃榜名副其实</p>
</blockquote>
<p>沿着莲花池社区的主路一路向北，出了莲花池社区后来到民生路，一路向西后来到通远楼城墙，继续爬，爬到顶后（过了幼儿园）出现了下去的路。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%80%9A%E8%BF%9C%E9%97%A8.png" alt="通远门"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%89%E4%B8%89%E4%B8%80%E6%83%A8%E6%A1%88.png" alt="三三一惨案"></p>
<p>后步行至长江索道处准备过江（此时约 4 点左右），被长江索道外一个大叔拦住：</p>
<blockquote>
<p>大叔：不要坐索道了，里面排了 5000 多号了 <br><br>
我一看确实 5000 号：那就不坐索道了，我去做地铁到对面<br><br>
大叔：你去对面干什么<br><br>
我：上山吃火锅看夜景<br><br>
大叔：重庆冬天叫雾都，你上山能隔几公里能看到什么夜景；去洪崖洞玩玩吧<br><br>
我：安排了，明晚去<br><br>
大叔：游船没有做过吧，看夜景可以做游船，两江游<br><br>
我：一年前坐过了<br><br>
至此，人心难测，真假难辨，不做评论</p>
</blockquote>
<p>长江索道门口便是小什字地铁口，非常方便，乘坐六号线至<strong>上新街（茶园方向）</strong></p>
<p>上新街地铁口在山腰处，二号口出来便是盗月社曾吃过的<strong>豆花鲫鱼店</strong>（同样也是在别人家里的）- <a href="https://www.bilibili.com/video/BV1LT4y1E7ET">B 站视频链接</a></p>
<p>由于之前奔走过于频繁，此时累的一批，就沿着下山的路寻找座位，大概走了一半坐了下来就再也不想动了。。。同时也打消了上山的念头，来到了山脚 – 即南滨路。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%8A%E6%96%B0%E8%A1%97%E6%B1%9F%E6%99%AF.png" alt="上新街江景 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%8A%E6%96%B0%E8%A1%97%E6%B1%9F%E6%99%AF02.png" alt="上新街江景 - 2"></p>
<p>沿着南滨路步行至南滨路景区，结果靠江的部分被封了，只能站在上面拍照，血亏。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8D%97%E6%BB%A8%E8%B7%AF%E6%B1%9F%E6%99%AF01.png" alt="南滨路江景 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8D%97%E6%BB%A8%E8%B7%AF%E6%B1%9F%E6%99%AF02.png" alt="南滨路江景 - 2"></p>
<blockquote>
<ul>
<li>上南山可以参考文博和西西的推荐去吃火锅或者小吃，重点就是在学校附近的店，绝对没有坑</li>
<li>巴倒烫也是可以的，如果有时间的话就排个队在外面吃，会比较舒服，一年去吃过，味道不错</li>
</ul>
</blockquote>
<p>打车回渝中（真的太累了，走不动了），晚上去<strong>今朝醉小酒馆</strong>就餐，两个人吃比较亏，人多了才划算，果酒很好喝，就是太贵了。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%BE%A3%E5%AD%90%E9%B8%A1.png" alt="辣子鸡"><br>
晚上回去买了俩烤猪蹄，到酒店洗洗、玩玩手机就睡了 💤。</p>
<h3 id="第三天"><a class="header-anchor" href="#第三天">¶</a> 第三天</h3>
<p>早上鬼使神差的去吃了汉庭的早餐，种类比较少，不太好吃。</p>
<p>洗漱后来到楼下买了一碗<strong>花市豌杂</strong>，小面打包至隔壁的类似大食堂的早餐店就餐，顺便点了一碗<strong>早茶</strong>（虽然已经是中午了）。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%8A%B1%E5%B8%82%E8%B1%8C%E6%9D%82.png" alt="花市豌杂"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%97%A9%E8%8C%B6.png" alt="早茶"></div></div></div>
<p>吃饱喝足后去乘坐地铁<strong>一号线（璧山方向）<strong>至大坪站换乘地铁</strong>二号线（较场口方向）</strong>，于李子坝站下车，跟着路标出地铁站来到马路对面的李子坝观景台拍照。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D01.png" alt="李子坝 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D02.png" alt="李子坝 - 2 "><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D%E6%B1%9F%E6%99%AF.png" alt="李子坝江景"></p>
<p>李子坝观景台对面是防空洞，进去转转没啥意思。</p>
<blockquote>
<p>李子坝观景台主要就是看地铁开进大楼，真的没啥意思，不喜欢的同学可以不用去</p>
</blockquote>
<p>根据原计划步行至<strong>鹅岭公园（导航显示 2 KM）</strong>，跟着导航走了 100m 后发现自己开始爬山，爬到怀疑人生后发现自己从李子坝地铁站<strong>爬到了上一个地铁站</strong> - 佛图关，心态大崩，由于小黄同学身体不适，就此作罢，劝后人以此为戒。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%B9%85%E5%B2%AD%E6%B1%9F%E6%99%AF.png" alt="鹅岭江景"></p>
<p>从佛图关地铁站乘坐<strong>二号线（较场口方向）<strong>至较场口地铁站下车，来到</strong>较场口夜市</strong>，采购部分小吃走回酒店修整（此时约 4 点左右）。</p>
<p>晚上六点左右出门，直奔<strong>洪崖洞</strong>（无需买票），在洪崖洞外有大叔说十块钱带你去洪崖洞一楼，不用排队，不用理会即可。</p>
<blockquote>
<p>此处科普：</p>
<ul>
<li>洪崖洞共有十一层楼，当你站在地面上准备入洪雅洞的时候是在十一楼，你可以认为他是在地下 1-11 层，不同的参考系而已</li>
<li>入洪崖洞不要门票，扫码预约或者美团预约即可（免费）</li>
</ul>
</blockquote>
<p>排队进入洪崖洞后，随大流走到当前楼层的尽头，开始下楼，下楼有两种方式，可以做直梯（参考 PDD 上班），也可以走楼梯（果断选择走楼梯）。</p>
<p>在人挤人的环境下走到 5 楼（好像是 4 楼，记不清了），开始参观所谓的 xxx 风情商业街。记忆中从 1 -5 楼都是这种商业街，特色就是光污染 + 重庆特色，拍拍照吃吃东西就没啥了。</p>
<p>走到一楼后就显得非常空旷，并且适合拍江景。</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E.png" alt="洪崖洞 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E02.png" alt="洪崖洞 - 2"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E%E6%B1%9F%E6%99%AF.png" alt="洪崖洞江景 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E%E6%B1%9F%E6%99%AF02.png" alt="洪崖洞江景 - 2"></p>
<p>吐槽完洪崖洞后，又要从一楼爬回十一楼，爬不动的建议等直梯。</p>
<blockquote>
<p>洪崖洞作为重庆的标志性打卡圣地，基础设施是真的差，一个男厕所三个坑位，两个没有门；四个便池，两个是漫出来的。。。<br><br>
![拉屎]](<a href="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%8B%89%E5%B1%8E.png">https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F 拉屎.png</a>)</p>
</blockquote>
<p>洪崖洞出来后，步行至<strong>石灰市莲花池社区</strong>，寻找<strong>巴渝龙老火锅</strong> ，今晚选择和盗月社同款打卡火锅店 - <a href="https://www.bilibili.com/video/BV1qs411M7S6">B 站链接</a>（也因为这是开在小区里的老火锅，物美价廉）</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%B7%B4%E6%B8%9D%E9%BE%99.png" alt="巴渝龙"></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%BA%BB%E8%BE%A3%E7%89%9B%E8%82%89.png" alt="麻辣牛肉"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%8B%97%E5%AD%90.png" alt="狗子"></div></div></div>
<p>吃完（大概十点左右）步行回酒店，洗漱玩手机睡觉 💤</p>
<h3 id="第四天"><a class="header-anchor" href="#第四天">¶</a> 第四天</h3>
<p>继续睡到中午，开始收拾行李，准备退房。</p>
<p>中午提着行李去吃<strong>豆花饭</strong>。</p>
<p>没错，店名就叫豆花饭，在<strong>新华路</strong>上，依然是盗月社同款打卡店 - <a href="https://www.bilibili.com/video/BV1iK4y147yv">B 站链接</a></p>
<p>这个也是重庆人民自己开的店，便宜实惠量贼多。一人点了一份豆花 + 米饭，另外点了一个尖椒回锅肉 + 毛血旺，吃到撑，都是下饭菜！！</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%B1%86%E8%8A%B1%E9%A5%AD.png" alt="豆花饭"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%AF%9B%E8%A1%80%E6%97%BA.png" alt="毛血旺"></p>
<p>下午则没有去什么别的地方，直接去机场等着回家了</p>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%A4%A7%E8%99%B9%E6%A1%A5%E5%A4%9C%E6%99%AF.png" alt="大虹桥夜景 - 1"><br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%A4%A7%E8%99%B9%E6%A1%A5%E5%A4%9C%E6%99%AF02.png" alt="大虹桥夜景 - 2"></p>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a> 总结</h3>
<p>重庆是很美的城市，三天的行程只发掘了它一小部分的魅力；山城，一定要上山感受他的魅力（虽然这次没有上南山，下次去补上！！）。</p>
<p>秋天，湿度、温度都刚刚好，上山，吹风，观景，吃火锅，一绝。</p>
<h4 id="对于吃"><a class="header-anchor" href="#对于吃">¶</a> 对于吃</h4>
<p>重庆吃的很多，建议参照上级目录中西西和文博的推荐（即我修改后的表格以及他们留下的评论）。</p>
<p>商场里的店仅限打卡，吃还是建议进社区 / 小区 / 学校周边，比较有重庆味道且价格实惠。</p>
<p>重庆味道不是辣，辣起辅助作用，主要是香、鲜，菜大多都比较下饭，所以不必追求菜量（口味重另说）。</p>
<h4 id="对于行"><a class="header-anchor" href="#对于行">¶</a> 对于行</h4>
<p>地铁 / 公交可以解决大多数场景，实在累了就打车。</p>
<p>看地图时刻记得要加上 Z 轴，只看路程距离是不行的，还得看该路程是否在山上。</p>
<h4 id="对于玩"><a class="header-anchor" href="#对于玩">¶</a> 对于玩</h4>
<ul>
<li>洪崖洞：不推荐，如果人少且实在是闲着没事可以去；</li>
<li>游船：不太推荐但高于洪崖洞，缺点是贵且排队人多，优点是可以看到洪崖洞全景，但如果买票上船了一定记得要随身带身份证，没有带就别买票，否则两三个小时都在排队；</li>
<li>索道：不太推荐，大号缆车，就是站在缆车里听导游哔哔十分钟就到对面了，排队平均时间在一小时（如果要做缆车，记得提前取票，避免傻等着）；</li>
<li>解放碑：推荐，附近都是小吃街，如解放碑好吃街、八一路好吃街、民族路好吃街、较场口夜市等；</li>
<li>李子坝观景台：推荐，地铁直达，可拍照且不用排队，去完李子坝可顺路去鹅岭、三峡广场等（地铁直达）；</li>
<li>皇冠大扶梯：推荐，地铁直达（目前貌似未开放）</li>
<li>三峡广场：一般推荐，离解放碑稍远，也是一个商业街，附近有一些学校（沙坪坝小区），所以吃的还可以</li>
<li>磁器口古镇：不太推荐，比较远的一个古镇商业街，因为免费门票，所以人很多，还是爬山，所以一般情况不推荐去；</li>
<li>川美：想去，但是因为疫情不开放；</li>
<li>南山：推荐，山上有不少大学以及火锅一条街，所以吃的肯定不错，并且有南山一棵树观景台，观景效果应该不错；</li>
<li>南滨路：不推荐，没啥好玩的，临江 + 商业广场</li>
<li>七星岗 / 通远楼：有时间可以从石灰市步行至通远楼城墙，爬上山后至七星岗，没有啥特别的，但是比较贴近重庆市民的生活，适合放松</li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>黑群晖填坑</title>
    <url>/2021/11/%E9%BB%91%E7%BE%A4%E6%99%96%E8%A7%A3%E9%99%A4%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6.html</url>
    <content><![CDATA[<p>前段时间把家里的 NAS 做了一次改造，将用之前用了一年的架构推翻，换上了黑群晖。</p>
<p>故事还得从一年前说起。最初本着折腾的精神，采取了 Bcache+LVM 的方案，简单架构如下：<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%AD%98%E5%82%A8%E4%B8%80%E4%BB%A3%E7%9B%AE.png" alt="NAS 一代目"></p>
<span id="more"></span>
<p>没有冗余没有备份，对于存储来说是很危险的。当时其实也是纠结了很久，手上有一块 RAID 卡，纠结了半天也没有上 RAID，原因是当时硬盘的配置是 6T*1+4T*3, 如果上了 RAID 就意味着 6T 盘会浪费 2T 空间。</p>
<p>既然如此，干脆一不做二不休，直接上 LVM，然后把重要的数据定时同步出来，正好还有两块 2T 盘，可以拿来做备份使用。结果最后因为太懒，以及 2T 盘没有多余的机器可以让我接入，导致备份的计划迟迟没有落地。</p>
<p>后来考虑到 Bcache 这个东西比较不优雅，这个项目也多年没有人维护更新（主要是存储跑了一年一直没有冗余和备份，比较慌），最终还是考虑换成黑群晖。</p>
<p>换成黑群晖后也多多少少遇到了些问题，这里先记录下来，算是填坑了</p>
<h3 id="存储冗余问题"><a class="header-anchor" href="#存储冗余问题">¶</a> 存储冗余问题</h3>
<p>由于短时间内我还不会把 4T 盘都换成 6T，因此正常的 RAID 阵列还是不考虑了，决定使用 SHR（Synology Hybrid RAID）来实现硬盘的冗余。主要是 SHR 可以合理利用容量大小不一的硬盘，减少硬盘空间的浪费。目前我 6T*1+4T*3 的组合还是有浪费的空间，但是后面会新增两块 6T 盘就完美利用了。计划采购硬盘大小和数量前可以使用群晖的 <a href="https://www.synology.cn/zh-cn/support/RAID_calculator">RAID 计算器</a> 先算一下可用容量以及是否浪费空间。</p>
<p>然而并不是所有群晖的机型都开启了 SHR，对于没有开启 SHR 的机型，我们需要手动配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc.defaults/synoinfo.conf
<span class="token comment">## 注释 supportraidgroup="yes"</span>
<span class="token comment">## 添加以下内容</span>
<span class="token assign-left variable">support_syno_hybrid_raid</span><span class="token operator">=</span><span class="token string">"yes"</span>
<span class="token comment">## 保存重启即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CPU-型号显示问题"><a class="header-anchor" href="#CPU-型号显示问题">¶</a>CPU 型号显示问题</h3>
<p>装完黑群晖后，显示的 CPU 型号为群晖的固定版本，有强迫症的话可以使用下面一键脚本进行修复（此处引自：<a href="https://wp.gxnas.com/9982.html">关于群晖优化可以用的一键命令</a>）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-SLO</span> https://wp.gxnas.com/wp-content/uploads/2019/08/ch_cpuinfo 
<span class="token function">chmod</span> <span class="token number">755</span> ch_cpuinfo
./ch_cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="网卡驱动问题"><a class="header-anchor" href="#网卡驱动问题">¶</a> 网卡驱动问题</h3>
<p>群晖上线后用了一天就发现了奇怪的问题，通过 SMB 从群晖读取数据时就会断网，写入正常，为了定位问题，做了以下测试：</p>
<ol>
<li>使用 FIO 对群晖的存储进行 IO 测试 - 测试期间网络正常，且 IO 结果符合预期；</li>
<li>使用 iperf 对群晖网络进行 IO 测试 - 测试期间网络正常，且 IO 结果符合预期；</li>
<li>修改 SMB 版本和配置进行读写操作 - 读取时依然会断网，写入正常；</li>
<li>禁用 SMB，使用 NFS 进行测试 - 读取时依然会断网，写入正常；</li>
<li>在群晖本地进行文件拷贝 - 读取时正常，写入正常；</li>
<li>上述测试时，群晖上另有一块 X520-DA2 加以佐证，全程光口网络正常，问题出在电口上</li>
</ol>
<p>Google 了一番，问题可能出在驱动上，我这板载的电口是 <code>Realtek@ 8111E PCIE Gigabit LAN Controller</code>，在论坛里找了一个大神编好的带 r8168 驱动的<a href="https://pan.skyhive.tech:8888/s/fnX6AexCKk3Pn5n">包</a>，更换驱动后果然就原地复活了。</p>
<h3 id="内存限制问题"><a class="header-anchor" href="#内存限制问题">¶</a> 内存限制问题</h3>
<p>装完黑群晖后用 free 看到内存总共只有 2.5G，但是我物理上是 8G*2 的配置，Google 一番，需要修改 grub 配置解决</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /tmp/synoboot
<span class="token comment">## 这里一定要先进 dev 目录再挂载 synoboot1，否则会报错</span>
<span class="token builtin class-name">cd</span> /dev
<span class="token function">mount</span> <span class="token parameter variable">-t</span> vfat /dev/synoboot1 /tmp/synoboot
<span class="token function">vim</span> /tmp/synoboot/grub/grub.cfg
<span class="token comment">## 在 set common_args_3617 中加入 disable_mtrr_trim 配置</span>
<span class="token comment">## 注意这里 3617 是因为我的黑群晖是 DS 3617xs，其他型号应该不一样</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">common_args_3617</span><span class="token operator">=</span><span class="token string">'disable_mtrr_trim syno_hdd_powerup_seq=0 HddHotplug=0 syno_hw_version=DS3617xs vender_format_version=2 console=ttyS0,115200n8 withefi elevator=elevator quiet syno_port_thaw=1'</span>
<span class="token comment">## 重启后内存信息就正常了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 SSH 免密登录遇到的坑</title>
    <url>/2017/12/%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html</url>
    <content><![CDATA[<p>最近在学校做一个云计算大赛，需要搭建一个 hadoop 的平台（一共四台服务器，这是一个怎样的 hadoop 啊），搭建的中途遇到一个小插曲。<br>
由于需要四台服务器能够互相免密访问，我们需要将四台服务器的公钥互相上传到各个机器，首先运行</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后一直回车，最后会在你主目录下生成一个<code>.ssh</code> 目录，其中的 <code>id_rsa</code> 是你的密钥，<code>id_rsa.pub</code> 是你要上传的公钥，<code>known_hosts</code> 是你连接过的主机的信息</p>
<p>我们需要在<code>.ssh</code> 目录下建立一个 <code>authorized_keys</code> 文件，将各个主机的公钥信息存储在该文件下，然后各个主机就可以通过 ssh 免密登录了，至于具体的原理，大家可以网上自行科普一下，无非是一些加密解密的过程。</p>
<p>然而就在我以为万无一失的时候，造化弄人，我不管怎么搞都需要输密码，试过改 ssh 的配置文件也无法解决，最后 google 到一个解决方法，说是目录的和文件的权限问题，<code>.ssh</code> 目录的权限必须得是 <strong>700</strong>，而文件 <code>authorized_keys</code> 的权限必须是 <strong>644</strong>，而我当时是 664, 这才导致无法进行免密登录，这里大家需要注意一下权限的问题，即使权限放大了也是不行的！</p>
]]></content>
      <categories>
        <category>Infra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2017/10/%E9%98%9F%E5%88%97.html</url>
    <content><![CDATA[<h3 id="队列"><a class="header-anchor" href="#队列">¶</a> 队列</h3>
<p>队列是一种可以实现<strong>先进先出</strong> (first in first out,FIFO) 的存储结构。与栈不一样的是，队列规定只在一端进行插入操作，在另一端进行删除操作。允许插入的一端叫做队尾 (rear)，允许删除的一端叫做队首 (front)。</p>
<h4 id="分类"><a class="header-anchor" href="#分类">¶</a> 分类</h4>
<ul>
<li>链式队列：用链表实现。</li>
<li>静态队列：用数组实现。(<em>为了解决假溢出现象，静态队列通常都必须是循环队列</em>)</li>
</ul>
<span id="more"></span>
<h4 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a> 循环队列</h4>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FQueue.jpg" alt="循环队列"></p>
<h5 id="参数：front、rear"><a class="header-anchor" href="#参数：front、rear">¶</a> 参数：front、rear</h5>
<ul>
<li>rear 所指的单元始终为空</li>
<li>队列初始化：front 和 rear 的值都是 0。</li>
<li>队列非空：front 指向队列的第一个元素；rear 指向队列的最后一个有效元素的下一个元素。</li>
<li>队列空：front 和 rear 值相等，但不一定是 0。</li>
</ul>
<h5 id="算法解析"><a class="header-anchor" href="#算法解析">¶</a> 算法解析</h5>
<p>1. 入队：将值存入 rear 所代表的位置 <code>r</code></p>
<ul>
<li>错误写法：<code>r=r+1</code></li>
<li>正确写法：<code>r=(r+1)%数组长度</code></li>
</ul>
<p>2. 出队：<br>
<code>f=(f+1)%数组长度</code></p>
<p>3. 判断循环队列是否为空</p>
<p><code>rear = front</code></p>
<p>4. 判断循环队列是否已满</p>
<ul>
<li>多增加一个参数标志满或者空（一般不用此方式）</li>
<li>少用一个元素：如果 <code>(r+1)%数组长度==f</code> 表示循环队列已满 </li>
</ul>
<h5 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a> 代码实现</h5>
<p>1. 队列数据建构</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">queue</span> <span class="token punctuation">{</span>
  	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
  	<span class="token keyword">int</span> front<span class="token punctuation">;</span>
  	<span class="token keyword">int</span> rear<span class="token punctuation">;</span>
  	<span class="token keyword">int</span> maxsize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2. 初始化队列</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Q<span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>maxsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token operator">-&gt;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failure!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span>
  	Q<span class="token operator">-&gt;</span>maxize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3. 判断循环队列是否为满</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isFull</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>Q<span class="token operator">-&gt;</span>maxsize <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span>
      	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  	<span class="token keyword">else</span>
      	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4. 判断循环队列是否为空</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span>
      	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
 	<span class="token keyword">else</span>
      	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5. 入队操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Enter</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The queue is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token keyword">else</span><span class="token punctuation">{</span>
  		Q<span class="token operator">-&gt;</span>p<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
      	Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>Q<span class="token operator">-&gt;</span>maxsize<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>6. 出队操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  	<span class="token keyword">else</span><span class="token punctuation">{</span>
  		<span class="token operator">*</span>val <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>p<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
      	Q<span class="token operator">-&gt;</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>Q<span class="token operator">-&gt;</span>maxszie<span class="token punctuation">;</span>
      	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Get out of the queue successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>7. 遍历操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">int</span> i <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The items in queue are:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">%</span>Q<span class="token operator">-&gt;</span>maxsize<span class="token operator">!=</span>Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>Q<span class="token operator">-&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	i<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>Q<span class="token operator">-&gt;</span>maxsize<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="链式队列"><a class="header-anchor" href="#链式队列">¶</a> 链式队列</h4>
<p>链式队列实现和链式栈相差不多，只是将删除操作放在了另外一端，有效的解决了顺序队列存储空间不足的缺陷。</p>
<h5 id="代码实现-v2"><a class="header-anchor" href="#代码实现-v2">¶</a> 代码实现</h5>
<p>1. 队列节点构建</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
  	<span class="token keyword">int</span> data<span class="token punctuation">;</span>		<span class="token comment">//数据域</span>
  	<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>		<span class="token comment">//指针域</span>
<span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  	Node <span class="token operator">*</span>front<span class="token punctuation">;</span>
  	Node <span class="token operator">*</span>rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>2. 队列初始化</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Node <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  	Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> head<span class="token punctuation">;</span>		<span class="token comment">//front和rear都指向头指针</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Init successfully!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3. 入队操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Enter</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	Node <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory allocation failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  	s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>
  	Q<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>
  	Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span>
  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4. 出队操作</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The queue is empty!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	Node <span class="token operator">*</span>p<span class="token punctuation">;</span>
  	p <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>		<span class="token comment">//先将要出栈的节点存在P中</span>
  	Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>		<span class="token comment">//重新构造队头元素的后继</span>
  	<span class="token operator">*</span>item <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>			<span class="token comment">//保存出队的数据；</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span>		<span class="token comment">//判断删除的节点是否为队尾元素</span>
      	Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>
  	<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5. 遍历元素</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The queue is empty!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	Node <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  	<span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
  		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      	p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>槟城旅行指北</title>
    <url>/2024/9/%E6%A7%9F%E5%9F%8E%E6%97%85%E8%A1%8C%E6%8C%87%E5%8C%97.html</url>
    <content><![CDATA[<p>2023/12/26 我第一次出国，和女朋友来到了马来西亚，囫囵吞枣式的游玩让我往返了吉隆坡和槟城两座城市，体验了大马的<strong>飞机、高铁、轮渡</strong>以及<strong>地铁</strong>这四种交通工具。但也因为是第一次踏上这片陌生的领土，即便之前的准备做得再充分，也难免有很多无法顾及的地方，因此时隔八个月，我们将再次踏上这片熟悉又陌生的领土，特此写下一篇槟城旅行指北（<s><strong>不是游记，不是游记，不是游记</strong></s>）</p>
<span id="more"></span>
<style>
.page-post-detail .post-body .group-picture-column {
  float: none;
  margin-top: 5px;
  // width: auto ;
  img { margin: 0 auto;  width: 100% ; }
}
.fancybox {
    display: inline-block;
}

.content{
  img{
      border-radius: 5px
      margin-bottom: 10px 
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2)
  }
}
</style>
<h3 id="前期准备"><a class="header-anchor" href="#前期准备">¶</a> 前期准备</h3>
<h4 id="交通"><a class="header-anchor" href="#交通">¶</a> 交通</h4>
<table>
<thead>
<tr>
<th>时间</th>
<th>始发地</th>
<th>目的地</th>
<th>航班</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2024-08-30 00:15 ~ 05:35</code></td>
<td>杭州 HGH T4</td>
<td> 吉隆坡 KUL T2</td>
<td>D7307 空客 330</td>
</tr>
<tr>
<td><code>2024-08-30 07:50 ~ 08:50</code></td>
<td>吉隆坡 KUL T2</td>
<td> 槟城 PEN D</td>
<td>AK6112 空客 320</td>
</tr>
<tr>
<td><code>2024-09-03 11:25 ~ 12:50</code></td>
<td>槟城 PEN I</td>
<td> 新加坡 SIN T1</td>
<td>TR427 空客 321</td>
</tr>
<tr>
<td><code>2024-09-03 16:30 ~ 21:35</code></td>
<td>新加坡 SIN T1</td>
<td> 杭州 HGH T4</td>
<td>TR188 波音 787 </td>
</tr>
</tbody>
</table>
<p><s>本来有一个往返 <strong><code>槟城</code></strong> 和 <strong><code>怡保</code></strong> 的高铁 / 巴士行程，但是由于马来国庆加上个人赖床因素，不得已取消了</s></p>
<p>截至本文发布，国内应该仅有<strong>上海浦东</strong>、<strong>重庆</strong>、<strong>厦门、深圳</strong>以及<strong>广州</strong>拥有直飞的航线，其他城市都要去其他东南亚城市进行转机（吉隆坡、亚庇或者新加坡），因此我作为杭州出发的旅客，只能往返两次转机了。</p>
<h4 id="行李"><a class="header-anchor" href="#行李">¶</a> 行李</h4>
<p>此次贪便宜，往返机票均购买于廉航，因此并没有托运行李，且登机所能携带的首体行李额被限制在了 <strong>7kg / 人</strong> (返程酷航为 <strong>10kg / 人</strong>)。<br>
由于去年是反季出行 (杭州冬季去往热带地区)，两个人带着两个行李箱和大包小包，确实非常的不方便，本次得益于航司的限制，强行给了我们一次轻装出行的机会。出行前也在网上学习了一番背包出行 / 收纳的知识点，最终以最小的代价准备好了出行的行李</p>
<ul>
<li>背包
<ul>
<li>旧背包改造
<ul>
<li>背包承重腰带：淘宝上有很多，推荐那些没有承重腰带的背包升级，背负大重量行李时可有效减少上背部的肌肉压力</li>
<li>背包胸扣：淘宝上也有很多，不是特别推荐升级，但是好在这玩意儿不贵，升级前也先确认自己的背包是否有升级接口（实在不行可以自己缝合）</li>
</ul>
</li>
<li>老背包复用：之前买小米电饭煲送了一个小背包，可以用于日常出行背负</li>
<li>新背包购买：迪卡侬 MH100 20L 户外背包</li>
</ul>
</li>
<li>行李内容</li>
</ul>
<div class="tabs" id="行李内容"><ul class="nav-tabs"><li class="tab active"><a href="#行李内容-1">衣物</a></li><li class="tab"><a href="#行李内容-2">药物</a></li><li class="tab"><a href="#行李内容-3">电子产品</a></li><li class="tab"><a href="#行李内容-4">日用品</a></li></ul><div class="tab-content"><div class="tab-pane active" id="行李内容-1"><ul>
<li>短袖短裤：以涤纶速干材质为主，主打一个透气、速干、重量轻</li>
<li>外套：依然以涤纶速干材质为主，可直接复用防晒外套</li>
<li>防晒外套 / 冰袖：如上</li>
<li>内衣裤：<strong>一次性</strong>或者即将淘汰的，穿完直接扔掉</li>
<li>袜子：带一双防止飞机上冷</li>
<li>鞋子：脚穿一双<code>洞洞鞋/溯溪鞋</code>即可</li>
</ul></div><div class="tab-pane" id="行李内容-2"><ul>
<li>内服类：止疼、感冒、退烧、腹泻、胃药等</li>
<li>外用类：创口贴、医用绷带（小）</li>
<li>日常类：维生素、鱼油、自用药类</li>
</ul></div><div class="tab-pane" id="行李内容-3"><ul>
<li>笔记本电脑：运维是这样的，到哪里都得背着电脑</li>
<li> iPad：女友工作需要</li>
<li>拍摄器材：手机 + 稳定器</li>
<li>充电宝：去年沈阳飞机上捡的，15W 慢充 10000mah</li>
<li> 充电转换头：大马为英标接口，需要带转换头</li>
<li>充电器：<code>Xiaomi GaN 65W</code> / <code>Xiaomi 14 90W</code> / <code>Thinkplus 65W</code></li>
</ul></div><div class="tab-pane" id="行李内容-4"><ul>
<li>小米剃须刀</li>
<li>电话卡
<ul>
<li>国内电话开漫游，就是有点贵</li>
<li>网购当地电话卡，比较便宜，流量充足</li>
</ul>
</li>
<li> U 型枕：机上睡觉使用</li>
<li>漱口水：由于是半夜的航班，准备几条漱口水</li>
<li>防晒霜：很重要，人家这里是热带地区</li>
<li>牙线棒：这次忘带了（非必须）</li>
</ul></div></div></div>
<p>以上，我们最终将两人行李总重控制在了 <strong>12kg</strong> 以内，迈出了背包旅行的第一步～</p>
<h4 id="住宿"><a class="header-anchor" href="#住宿">¶</a> 住宿</h4>
<p>槟城很大（马来西亚是联邦州属国家，槟城是十三个州属之一，又称槟州），旅行热门的地区当属槟州的首府 ——George Town 和北边的 Batu Ferringhi 海滩，但实际上槟城的海滩并不出名（水质不好，水上项目也不多，整个西马的海滩也就 <strong>兰卡威、大小停泊岛</strong> 以及 <strong>热浪岛</strong> 叫的出名了），我们此次出行的目的地自然就是槟城旅游热度第一的 George Town 了。</p>
<p>由于 George Town 很小，城内任意一家酒店或者民宿均可，但由于是老城区，民宿的设施可能不会不太尽人意，秉承着多一事不如少一事的原则，我们还是选择入住酒店</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>酒店</th>
<th>地址</th>
<th>价格</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2024-08-30 ~ 2024-09-03</code></td>
<td>Royale Chulan Penang</td>
<td>1&amp;2,Pengkalan Weld,Georgetown,<br>Penang,Malaysia</td>
<td>USD 225.37</td>
<td> 大床房，含早</td>
</tr>
</tbody>
</table>
<p>这里再放一个我们去年住过的酒店</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>酒店</th>
<th>地址</th>
<th>价格</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2023-12-28 ~ 2023-12-30</code></td>
<td>Sunway Hotel Georgetown Penang</td>
<td>33,Lorong Baru,George Town,<br>Penang,Malaysia</td>
<td>￥933.7</td>
<td> 大床房，不含早 </td>
</tr>
</tbody>
</table>
<p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/hotel-map.png" alt="hotel-map"></p>
<h4 id="入境"><a class="header-anchor" href="#入境">¶</a> 入境</h4>
<p>虽然马来西亚针对持有中国护照的公民进行为期 30 天的免签，但是入境前三天还是需要填写 <strong>MDAC</strong> (<em>Malaysia Digital Arrival Card</em>) 以作为其入境资料。详细填写请移步至<a href="https://imigresen-online.imi.gov.my/mdac/main#:~:text=How%20to%20register%20Malaysia%20Digital%20Arrival">马来西亚移民局</a>（可能需要科学上网）</p>
<details class="note "><summary><p>需要注意</p>
</summary>
<p>虽然说现在持有中国护照的公民入境大马可享受自助闸机丝滑入境，但貌似仅限吉隆坡，如果是转机用户，或者其他城市入境，还是会需要人工过海关，海关还是会看你的返程机票以及住宿信息</p>

</details>
<h3 id="游玩指南"><a class="header-anchor" href="#游玩指南">¶</a> 游玩指南</h3>
<h4 id="吃"><a class="header-anchor" href="#吃">¶</a> 吃</h4>
<p>槟城的饮食继承了马来西亚的一些特点，如菜系多元化、调味多用木姜辣椒等，但是由于本地华人居多（尤其是福建、潮汕地区的华裔），当地的饮食很大程度上也受到了我们东南沿海的影响，因此带着中国胃来的我们，也不用怕吃不惯了。</p>
<div class="tabs" id="吃"><ul class="nav-tabs"><li class="tab active"><a href="#吃-1">福建虾面</a></li><li class="tab"><a href="#吃-2">肉骨茶</a></li><li class="tab"><a href="#吃-3">海南鸡饭</a></li><li class="tab"><a href="#吃-4">沙爹</a></li><li class="tab"><a href="#吃-5">炒粉 / 粿条 / 蚵仔煎</a></li><li class="tab"><a href="#吃-6">中餐炒菜</a></li><li class="tab"><a href="#吃-7">椰浆饭</a></li></ul><div class="tab-content"><div class="tab-pane active" id="吃-1"><p>福建虾面其实指的是槟城的福建人做的虾面，在福建其实并没有这玩意儿，是槟城的特色美食之一。虾面的特点是使用大量的虾头熬制汤头，所谓的面一般使用的黄面条和米粉，配菜则是虾、蛋、肉片等，最后来一勺参巴辣酱。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Hokkien%20mee.jpg" width="50%"><br>
另外，对于福建虾面的叫法各地都有争议，槟城、吉隆坡以及新加坡都有福建面的叫法，但是做法多有不同，但在槟城街头大多为福建虾面。由于槟城街头的小摊和档口都有福建虾面，这里则不再单独介绍店面。</p></div><div class="tab-pane" id="吃-2"><blockquote>
<p>“肉骨 "如其名，是以带肉的骨配合中药煲成的汤。而" 茶 "字则是源自当地一位华人餐厅店主的名字" 李文地”，因为卖该种肉骨汤且味道上乘，而被顾客称作 "肉骨地"，福建话中的 "地" 与 "茶" 音近，故后来被称为 "肉骨茶"。食材本身并没有茶叶。</p>
<p>肉骨茶通常伴白饭或以油条蘸汤来吃。以酱油、碎红椒和蒜蓉一起调味。通常会奉上中式浓茶解油腻。在马来西亚，肉骨茶是一道典型的早点菜式</p>
</blockquote>
<p>以上为维基百科的介绍，在马来，<strong>肉骨茶</strong>还有着干锅和汤锅的版本区分，汤锅就是传统的肉骨茶，而干锅则是大火收汁，做得浓油赤酱的版本（相信上海的朋友应该会比较喜欢）。和福建虾面一样，肉骨茶也基本上可以在各大小吃街和大排档找到，不过根据网友所说，好吃的肉骨茶还是在<strong>吉隆坡</strong>和<strong>巴生</strong>。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Bak%20Kut%20Teh.jpg" width="50%"></p></div><div class="tab-pane" id="吃-3"><blockquote>
<p>海南鸡饭在马来半岛地区的起源一直都存在争议，但如今普遍被奉为新加坡的国菜。新加坡独立后，华人占该国国民比率较高，比起马来西亚，新加坡政府对于当地传统华人美食更为注重，同时运用各种管道为海南鸡饭进行包装及推销，加上其为全球最国际化的城市之一，有足够平台为美食打知名度，也让当地海南鸡饭得以成为世界知名料理</p>
</blockquote>
<p><s>除了前面的福建、潮汕菜系外，槟城还有海南菜，而海南鸡饭就是流行在大街小巷的代表菜。</s> 我一直以为海南鸡饭是海南菜，没想到是去了东南亚的海南人做的菜（当然也可能是早期海南菜系的做法，这里就不再争论出处了），在这里先道个歉</p>
<p>基本上任意一个夜市或者大排档都会有海南鸡饭的身影，口味也比较符合中国胃，相较于之前在吉隆坡商场里和飞机上吃过的海南鸡饭，夜市的这份可太好吃了。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Hainanese%20Chicken%20Rice.jpg" width="50%"><br>
在槟城的小摊或者档口，海南鸡饭除了白鸡之外，还有我上面吃的烧鸡，所以大家不要喷我吃的不正宗（狗头保命）</p></div><div class="tab-pane" id="吃-4"><blockquote>
<p>** 沙爹（马来语：Sapi）** 是马来西亚槟城地区一种常见的特色小吃，属于马来菜系。</p>
</blockquote>
<p>所谓<strong>沙爹</strong>，就是马来的烧烤。和国内烧烤不同的是，沙爹的调味以甜辣为主，香辛料比较单一，不会像国内烧烤有复杂的口感和味道，初次是会有不一样多个感觉，吃多了还是觉得中国的烧烤才是最屌的。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Sapi.jpg" width="50%"><br>
不过需要多说一句，虽然你在槟城也能见到一些 <strong><code>中国烧烤</code></strong> 的摊子，但是口味还是被马来本土化过的，和国内烧烤还是有着很大差异，尝个新鲜是没问题的～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Chinese%20BBQ.jpg" width="50%"></p></div><div class="tab-pane" id="吃-5"><p>和福建虾面、海南鸡饭这种街头随处可见的中式小吃一样，我们在任意的大排档都能见到<strong>炒河粉</strong>、<strong>炒粿条 / 粿角</strong>以及<strong>蚵仔煎</strong>的身影，而且这些潮汕小吃也确实深受马来人的喜爱，甚至我们一度见到有些摊位排队爆满，永远是大排长龙，无法近身<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Oyster%20Omelette.jpg" width="50%"></p></div><div class="tab-pane" id="吃-6"><p>当年华人下南洋，很多都留在了槟城，至今槟城貌似也是马来华人占比最多的地区，因此在槟城也有很多华人餐馆。但是菜系大多以福建、广东、海南地区为主，并且融合了一些马来本地的特色，这些参观大多活跃在大众点评、小红书、抖音等网络平台上，喜欢网上冲浪的同学可以自行探索，这里就不过多推荐</p>
<p>这里提一个我们去过两次的海鲜餐馆 —— <code>记得来三定</code>，老板活跃在小红书，是槟城比较火的餐馆之一，价格不算便宜，但是味道还不错<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/sanding%20seafood.jpg" width="50%"><br>
本次菜单：</p>
<ul>
<li>海蟹 x2（甘香）- 84RM</li>
<li> 姜葱虾姑 (小份) - 18RM</li>
<li> 啤汁排骨 (小份) - 18RM</li>
<li> 印尼咖喱虾 x6 - 36RM</li>
</ul>
<p>以上折后共消费 148RM (根据当时汇率为 ￥244.84)</p></div><div class="tab-pane" id="吃-7"><p>最后不得不提一下 <strong><code>椰浆饭</code></strong>，辣死你妈（Nasi Lemak） —— 马来西亚国菜，这玩意儿我是真的吃不惯，一是不习惯用椰浆煮出来的米饭的口感，二是不喜欢其中姜的调味，但是口味这个东西因人而异，所以还是建议大家尝试一下，毕竟是人家的国菜，总有站得住脚的地方～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Nasi%20Lemak-1.jpg" width="50%"></p>
<p>这里推荐一个档口 —— <code>Ali Nasi Lemak Daun Pisang</code>，其中的椰浆饭连续荣获 2023 和 2024 年度的米其林提名，最重要的是价格是真便宜，最低 2RM（￥3.2） 就能吃一份。此外，这个档口是开在一家大排档的门口，前面说到的福建虾面也是在这里吃的<br>
这个虽然看着很寡淡，但仅售 2RM，还要什么自行车<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Nasi%20Lemak-2.jpg" width="50%"></p></div></div></div>
<p>当然除此之外，槟城还有很多美食没有在这里介绍，除了中式的粿条汤、肉卷、云吞面之外，还有一些印度菜（印度人是马来除了马来人和华人外的第三大人种）和泰国菜，以及马来本土菜系 —— 娘惹菜，所以槟城真的是当之无愧的美食之都，喜欢吃吃吃的朋友真的不容错过。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/food-1.jpg" alt="food-1"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/food-2.jpg" alt="food-2"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/food-3.jpg" alt="food-3"></div></div></div>
<p>最后给大家推荐一些小吃街：</p>
<ul>
<li>Jelutong Night Market：日落洞周五夜市，顾名思义，只有周五才开，别跑空了</li>
<li> Batu Ferringhi Night Market：如果你晚上住在 Batu Ferringhi，可以去逛一逛，小吃摊多到爆炸，还有两个大排档</li>
<li> Macallum Street Night Market：五条路夜市，离日落洞和姓氏桥那里的小吃街不远，如果你精力足够的话，可以一直吃</li>
<li>姓氏桥：其实这不是个夜市，沿着姓氏桥的大马路，街边全都是小吃摊和大排档</li>
<li> Gurney Drive Hawker Centre：新关仔角小吃街，这个没去过，据说很有名</li>
<li> Sunway Hotel 楼下：对的，酒店楼下就是小吃街，上面和下面的一些图片就出自这里，甚至还有下面的猫山王、竹脚以及红虾 </li>
</ul>
<h4 id="喝"><a class="header-anchor" href="#喝">¶</a> 喝</h4>
<div class="tabs" id="喝"><ul class="nav-tabs"><li class="tab active"><a href="#喝-1">白咖啡</a></li><li class="tab"><a href="#喝-2">果汁</a></li><li class="tab"><a href="#喝-3">煎蕊</a></li></ul><div class="tab-content"><div class="tab-pane active" id="喝-1"><blockquote>
<p>白咖啡源于英国统治马来半岛的英属马来亚时期，当时英国雇用当地人做管家及佣人，英国雇主想喝没有加奶的咖啡时，便叫佣人送上黑咖啡，当要喝加奶的咖啡时，便叫佣人送上白咖啡。当时有一位叫曹运廷的当地华人，人称<em>白叔</em>，在怡保为英国人家庭当管家，但后来因为爆发二次大战，英国人迁离马来西亚，他便失业了。曹运廷便在怡保推木头车摆卖咖啡维生，他为了迎合当地人的口味，于是在炒咖啡豆时加入焦糖一起炒，使炒出来的咖啡豆有与别不同的风味，而冲调时再加入糖和炼乳，并以<strong>白咖啡</strong>为名售卖，辗转便成为当地的地道咖啡饮料。</p>
</blockquote>
<p>以上均为维基百科的说法，诸如此类的传说还有很多，但是白咖啡的招牌确实弥漫在槟城各地，口感和奶咖一样，但是会甜很多～<br>
图右为白咖啡，具体价格忘了，基本上都是在 5RM 左右<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Coffee.jpg" width="50%"></p></div><div class="tab-pane" id="喝-2"><p>水果，尤其是热带水果，在东南亚都是比较廉价的东西（相较于国内），你可以在各个小摊、档口看到有各种各样的鲜榨果汁、奶茶等饮品。西瓜、橙汁、芒果、菠萝甚至甘蔗等鲜榨果汁，便宜的一份都在 5RM (￥8) 左右。之前在小摊上买了一份甘蔗汁，仅需 3RM (￥5)，对比国内价格真的是香的不行</p>
<p>左边是中杯菠萝汁（10RM），右边是大杯菠萝汁 (12RM)<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/pineapple%20juice.jpg" width="50%"></p></div><div class="tab-pane" id="喝-3"><p><strong>煎蕊（Cendol）</strong> 是一种源自东南亚的传统甜点，尤其在马来西亚、新加坡、印度尼西亚和泰国非常受欢迎。它的主要成分包括绿色条状的米粉（通常是用香兰叶汁染色的）、椰奶、棕榈糖浆和刨冰，除此之外可以加入各种水果组合成不够的口味，既然来到马来了，那得尝一尝<strong>榴莲煎蕊</strong>了～～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Cendol.jpg" width="50%"></p></div></div></div>
<h4 id="玩"><a class="header-anchor" href="#玩">¶</a> 玩</h4>
<div class="tabs" id="玩"><ul class="nav-tabs"><li class="tab active"><a href="#玩-1">升旗山</a></li><li class="tab"><a href="#玩-2">壁画街</a></li><li class="tab"><a href="#玩-3">姓氏桥</a></li><li class="tab"><a href="#玩-4">海滩</a></li><li class="tab"><a href="#玩-5">其他</a></li></ul><div class="tab-content"><div class="tab-pane active" id="玩-1"><blockquote>
<p>升旗山的名字来源于 18 世纪末，当时英国东印度公司的官员们会在山顶升起旗帜，以示对槟城的控制。山顶的旗杆成为了地标，因此得名<strong>升旗山</strong></p>
</blockquote>
<p>升旗山又名槟榔山（Penang Hill），最高海拔不到 900 米，可徒步攀爬也可乘坐缆车上山。缆车分普通通道和快速通道，如果是节假日建议买快速通道（排队一个多小时真的很难顶）；快速通道一个人 <em>80RM</em>，普通通道一个人 <em>30RM</em>。</p>
<p>山上风景很好，是天然的热带雨林，在山顶既能领略到生物多样性，也能纵览槟城全景。另外根据初中地理所学，山顶具有 900M 的海拔，气温会比山脚要低 5-6℃，所以在山顶漫步还是很凉快的～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Penang%20Hill.jpg" alt="Penang Hill"><br>
升旗山本身没有门票，但是山上有很多游玩项目，如生态园、缆车、游客车等均是收费活动，如果实在囊中羞涩可在山顶小径漫步，寻找野生的猴哥🐒和龟酱🐢，领略大自然的魅力</p></div><div class="tab-pane" id="玩-2"><p>壁画是槟城独特的街头艺术，除了 George Town 外，在其他地区（落日洞、北海）也都有各自的壁画街，网上炒的比较火的壁画是 2012 年槟城州政府找的立陶宛艺术家 <a href="https://www.ernestzacharevic.com/about">Ernest Zacharevic</a> 来画的<strong>姐弟共骑</strong>，算是网红打卡地，但个人觉得如果游客太多的话倒也没有必要去凑热闹，城里其他随处可见的壁画也都值得欣赏，这里放两张随手拍</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/street-art-1-fix.jpg" alt="street art-1"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/street-art-2.jpg" alt="street art-2"></div></div></div></div><div class="tab-pane" id="玩-3"><blockquote>
<p>槟城姓氏桥（Clan Jetties of Penang）位于马来西亚槟城乔治市的海岸线上，是一组由木桩支撑的水上村落。这些村落主要由华人移民建造，每个村落都以一个特定的姓氏命名，如姓周桥、姓林桥、姓陈桥等</p>
</blockquote>
<p>现在姓氏桥已经被打造的足够商业化了，尤其是姓周桥，上去发现全是小商贩卖各种景区玩意儿，和国内商业街如出一辙。并且桥下的滩涂非常的脏乱差，并不是很推荐去，打个卡就可以赶紧撤了（<s>沿着姓氏桥外延的马路上全是好吃的档口，这才是你该去的地方</s>）</p>
<p>相较于火爆的姓周桥，其他没有被商业改造的如姓杨桥，却更有一番风味～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Jetty%20Yang.jpg" width="50%"></p></div><div class="tab-pane" id="玩-4"><p>上文说过槟城的海滩水质很差，没有海岛的那种清澈见底的感觉，因此你最好不要把它当作一个海岛来看待。在 Batu Ferringhi，你更能体验到的是海滩上的篝火晚会，绝美的落日，以及海滩边上的大排档（bushi）。<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Batu%20Ferringhi.jpg" width="50%"><br>
如果你是一个海岛爱好者，我不建议你来，如果你是一个爱凑热闹不怕浪费时间的人，你可以来这里的海滩看一看，毕竟来了北边的海滩再想打车回 George Town，会比较麻烦，尤其是节假日。</p></div><div class="tab-pane" id="玩-5"><p>其他就是一些分布在城里的各种展馆了，比如：</p>
<ul>
<li>颠倒博物馆：国内有很多这种，进去之后会有工作人员帮你拍照，不是很推荐（有点贵）</li>
<li>美食狂想馆：介绍马来饮食文化的，想深入了解的可以参观</li>
<li>娘惹博物馆：又名侨生博物馆 / 峇峇娘惹文物馆，前身是富豪郑景贵的豪华传统宅院</li>
<li>龙山堂邱祠：邱公司（祠）是马来西亚最大型的华人会馆，也是 George Town 内其中一座主要历史建筑</li>
<li>孙中山博物馆：位于马来西亚槟城打铜仔街 120 号，为一家以纪念孙中山革命事迹的历史博物馆</li>
<li>张弼士故居：和上面提到的娘惹博物馆并称两大豪宅</li>
<li> Penang State Museum and Art Gallery：艺术馆，建议用有艺术底蕴的同学去观赏</li>
<li>鬼怪博物馆：曾路过多次，但由于胆子比较小，只是在门口拍了拍照</li>
</ul>
<p>……</p></div></div></div>
<h4 id="行"><a class="header-anchor" href="#行">¶</a> 行</h4>
<div class="tabs" id="交通出行"><ul class="nav-tabs"><li class="tab active"><a href="#交通出行-1">打车</a></li><li class="tab"><a href="#交通出行-2">公交</a></li><li class="tab"><a href="#交通出行-3">轮渡</a></li></ul><div class="tab-content"><div class="tab-pane active" id="交通出行-1"><p>在马来打车非常方便，手机下载 Grab 然后绑定支付宝即可，用起来和国内的滴滴一样。</p>
<p>不过 Grab 有一点比较好的是，他是预付费，当你在打车时系统会提前算好路线并生成对应的费用，Grab 在匹配到司机后就会将对应的费用扣除至平台，如果你订单结束，系统会将费用结算给司机，如果你取消订单，系统则会将费用原路退回，<strong>你不用担心司机会因为绕路而多收你费用</strong></p>
<p>不过由于 George Town 属于老城区，并且马来西亚的交通属实很烂，短距离就不建议打车了，能走走就走走吧～</p></div><div class="tab-pane" id="交通出行-2"><p>暂时还未体验，但据说有免费巴士可以乘坐</p></div><div class="tab-pane" id="交通出行-3"><p>如果你是乘坐高铁或者巴士来到槟城，那么你大概率会在一个叫做 <strong>Butterworth</strong> 的地方下车，这里又叫做 <strong>Penang Sentral</strong>，是槟城州的高铁站以及客运中心。不过这个叫做 Butterworth 的地方和 George Town 的地方隔着一条槟威海峡，陆地通过一条跨海大桥相连。George Town 往返 ButterWorth 是可以乘坐轮渡的，相比于驾车穿梭跨海大桥相比，乘坐轮渡无疑是一个比较经济的选择。码头有固定的发船时间，到点开船，大家可以根据时刻表合理安排自己的出行时间，外国人乘坐轮渡一次只要 2RM (￥3.2)。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/station%20map.png" alt="station map"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/FERRY.jpg" alt="Ferry"></div></div></div>
轮渡单次行程约 10min，如果你出行时间掐的够准，说不定比驾车要省时间～
<p>这里附一张时间表<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Ferry%20Schedule.jpg" width="50%"></p></div></div></div>
<h4 id="榴莲"><a class="header-anchor" href="#榴莲">¶</a> 榴莲</h4>
<p>嘿嘿，最后还是来说一说榴莲吧。大马的榴莲有着如下特点：</p>
<ul>
<li>树孰自然掉落，所以吃到的榴莲都绝对新鲜</li>
<li>注册品种多达 200+，在大马不同地区都能吃到不同的榴莲</li>
<li>由于是树熟掉落，果肉发酵足够，榴莲味会比较浓郁，口感会比较丝滑</li>
<li>价格相对便宜</li>
</ul>
<p>另外，除了已注册的名种之外，还有一种深受当地人喜爱的榴莲 —— 甘榜榴莲 (Durian Kampung)。Kampung 在马来语中是乡村的意思，因此甘榜其实就是乡村榴莲、土榴莲的意思，开这些榴莲才是真正的赌博，但是由于价格便宜，一颗才 10-20 人民币，因此即使开到品质不好的，也不会特别亏。</p>
<p>下图为马来 2018 年各榴莲品种登记数量占比图，甘榜还是占了很大一部分。另外现在有很多种植户以现有的的甘榜树为砧木，通过嫁接方式来种植更好品质的榴莲品种（比如猫山王）<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Malaysia%20durain%20info.png" alt="durian info"></p>
<p>下面我就简单介绍一下这四天我们吃过的榴莲，按照下图的顺序，以此为：</p>
<ul>
<li>甘榜榴莲：这一颗是我们落地后吃的第一个榴莲，味苦没有回甘，对新手及其不友好，好在价格便宜，仅售 12RM（￥20）</li>
<li>黑金：据说黑金是高品质猫山王，这一颗吃起来口感绵密，甚至会有一些糊嗓子，味道是先甜后苦，最后再回甘，层次分明</li>
<li>猫山王：大名鼎鼎的品种，这是一颗新树果，核小味甜，榴莲风味十足，口感细腻，名副其实</li>
<li>竹脚：这是一颗干包的竹脚，口感脆甜，甜中带有微苦</li>
<li>黑刺：曾经干翻猫山王的榴莲王者，奶油般的口感，入口即化，也是先甜后苦，榴莲风味非常浓郁</li>
<li>红虾：这一颗不知道为啥果肉偏白，从皱皮的程度看还是颗老树果，甜中带苦，但是苦味程度是让人可以接受的，口感也很绵密</li>
</ul>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Kampung.jpg" alt="kampung"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Black%20Gold.jpg" alt="黑金"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Musong%20King.jpg" alt="猫山王"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Bamboo.jpg" alt="竹脚"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Black%20Thorn.jpg" alt="黑刺"></div><div class="group-picture-column"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/Udong%20Merah.jpg" alt="红虾"></div></div></div>
<p>其实我们在吃黑刺的时候，因为实在吃不下了，就给隔壁桌分了两小房果肉，对方用一块 D2 的果肉给我们做了回礼。这块 D2 湿包严重缺一点也不苦，全是甜味，吃起来就像是榴莲冰激凌～<br>
<img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic/D2.jpg" width="50%"></p>
<p>由于我们来的时间已经比较晚了，槟城的榴莲季已经结束，很多品种在榴莲档口都没有的买了，只有全年供应的猫山王和黑刺，以及少量的其他品种。如果想要赶上榴莲季来吃榴莲的，需要在每年的 6、7 两个月来到槟城，然后去<strong>浮罗山背</strong>（Balik Pulau）的榴莲园吃榴莲。浮罗山背又称榴莲山，山上都是榴莲树，去榴莲园里可以吃到最便宜的最新鲜的榴莲，或者有信心的同学也可以去自助榴莲档口，这里的榴莲都是当天掉落的鲜果（树熟掉落后仅能存放 2-3 天，因此大马这里档口的榴莲都是当天从果园运来的）</p>
<p>这里推荐两个吃过的榴莲档口，都在 George Town：</p>
<ul>
<li>Durian Legend：15, Lebuh Carnarvon, George Town, 10100 George Town, Pulau Pinang, Malaysia</li>
<li>Durain Central Macalister：63 Macalister Road, George Town, 10400 George Town, Pulau Pinang, Malaysia</li>
</ul>
<p>当然你也可以给 grab 司机一点钱，让他带你去好吃划算的榴莲档口探索～</p>
<h3 id="算账"><a class="header-anchor" href="#算账">¶</a> 算账</h3>
<p>回国后，我们算了一下本次旅游的所有消费，即机票、住宿、保险、吃、喝、玩、打车等所有开销，两个人合计不到 9000 人民币。简单复盘了一下，理论上可以将成本压缩到 8000 以内的，但是出来玩还是不要给自己加太多的限制，开心就好～</p>
<p>明年，希望能够带上更多的榴莲爱好者，再次征战～～</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
</search>
