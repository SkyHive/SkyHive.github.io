<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SkyHive&#39;s Blog</title>
  
  
  <link href="https://skyhive.github.io/atom.xml" rel="self"/>
  
  <link href="https://skyhive.github.io/"/>
  <updated>2024-02-08T03:32:27.195Z</updated>
  <id>https://skyhive.github.io/</id>
  
  <author>
    <name>SkyHive</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置 DNSPod 自动获取泛域名证书</title>
    <link href="https://skyhive.github.io/2024/2/%E9%85%8D%E7%BD%AE-DNSPod-%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6.html"/>
    <id>https://skyhive.github.io/2024/2/%E9%85%8D%E7%BD%AE-DNSPod-%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6.html</id>
    <published>2024-02-05T08:57:07.000Z</published>
    <updated>2024-02-08T03:32:27.195Z</updated>
    
    <content type="html"><![CDATA[<p>最近升级了下家里的 LB，通过 gitlab 将 LB 的配置做了版本管理，并且通过 docker-compose 实现 LB 的快速部署。但是家里的网络做了内外网的区分，为了实现内网 https 访问，我需要在内网的 LB 上配置一套 SSL 证书（公网的部分直接在 CDN 上配置了 <code>let&#39;s encrypt</code> 的免费证书，一年一换）</p><p>为了避免麻烦，对于内网的 https 证书希望做到以下两点：</p><ul><li>到期自动续</li><li>泛域名</li></ul><span id="more"></span><p>查找了一番，有两个工具比较符合：<code>Certbot</code> 和 <code>acme.sh</code>，都是通过 <a href="https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment"><code>ACME protocol</code></a> 去自动获取免费证书,但是需要自动获取泛域名证书的话，还需要能够自动在 DNS Provider 处更新 <a href="https://en.wikipedia.org/wiki/TXT_record"><code>DNS TXT Record</code></a>。由于我的域名是在 DNSPod 购买的，因此需要能够支持在 DNSPod 上自动更新 TXT 记录。Certbot 没有对应的官方插件，但是有第三方好心人写的插件能够实现该功能，如 <a href="https://github.com/tengattack/certbot-dns-dnspod">certbot-dns-dnspod</a>；而 acme.sh 是国人写的工具，官方支持 Aliyun 和 DNSPod，思来想去，还是打算使用 acme.sh。</p><h3 id="Docker-Compose-Configuration"><a href="#Docker-Compose-Configuration" class="headerlink" title="Docker Compose Configuration"></a>Docker Compose Configuration</h3><p>根据 <a href="https://github.com/acmesh-official/acme.sh/wiki/deploy-to-docker-containers">官方文档</a> 先将 Docker Compose 配置好，从文档里可以看出，acme.sh 容器会以 daemon 的形式一直运行，后续的申请证书、部署、续签等操作都需要 docker compose exec 单独去操作。Dockers Compose 配置如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: nginx</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">443</span>:<span class="number">443</span></span><br><span class="line">    labels:</span><br><span class="line">      - sh.acme.autoload.domain=$&#123;DOMAIN_NAME&#125;</span><br><span class="line">    volumes:</span><br><span class="line">      - $PWD/conf.d:/etc/nginx/conf.d:ro</span><br><span class="line">      - $PWD/nginx.conf:/etc/nginx/nginx.conf:ro</span><br><span class="line">      - $PWD/log/:/var/log/nginx/:rw</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">  </span><br><span class="line">  acme:</span><br><span class="line">    image: neilpang/acme.sh</span><br><span class="line">    container_name: acme.sh</span><br><span class="line">    command: daemon</span><br><span class="line">    volumes:</span><br><span class="line">      - $PWD/acmeout:/acme.sh</span><br><span class="line">      - /var/<span class="keyword">run</span><span class="language-bash">/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    dns:</span><br><span class="line">      - <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">    environment:</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_LABEL=sh.acme.autoload.domain=$&#123;DOMAIN_NAME&#125;</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_KEY_FILE=/etc/nginx/ssl/key.pem</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_CERT_FILE=/etc/nginx/ssl/cert.pem</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_CA_FILE=/etc/nginx/ssl/ca.pem</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_FULLCHAIN_FILE=/etc/nginx/ssl/full.pem</span><br><span class="line">      - DEPLOY_DOCKER_CONTAINER_RELOAD_CMD=<span class="string">&quot;service nginx force-reload&quot;</span></span><br><span class="line">      - DP_Id=$&#123;DP_Id&#125;</span><br><span class="line">      - DP_Key=$&#123;DP_Key&#125;</span><br></pre></td></tr></table></figure><p>另外还需要添加一个 <code>.env</code> 文件用来存放如下变量：</p><ul><li><code>$&#123;DOMAIN_NAME&#125;</code>：用于申请证书的泛域名</li><li><code>$&#123;DP_Id&#125;</code>：DNSPod API Key ID</li><li><code>$&#123;DP_Key&#125;</code>：DNSPod API Key</li></ul><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>acme.sh 默认的 ssl 服务器是 <code>ZeroSSL.com</code>，根据 <a href="https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA">文档</a> 里提到的，在申请证书之前，需要先注册账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose exec acme --register-account -m &lt;your email address&gt;</span><br></pre></td></tr></table></figure><p>注册完成后就可以正式申请证书了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose exec acme --issue --dns dns_dp -d $&#123;DOMAIN_NAME&#125;</span><br></pre></td></tr></table></figure><p>等待证书申请完成后，可以看到 <code>acmeout</code> 目录下会出现一个 <code>$&#123;DOMAIN_NAME&#125;</code> 命名的目录，该目录下就是我们申请到的证书。接着运行命令将证书部署到 nginx 的目录下（该目录则是在 docker compose 中通过 environment 传参给 acme 容器的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose exec acme --deploy -d $&#123;DOMAIN_NAME&#125;  --deploy-hook docker</span><br></pre></td></tr></table></figure><p>理论上到这里我们的证书申请和部署就已经结束了。</p><h3 id="修锅"><a href="#修锅" class="headerlink" title="修锅"></a>修锅</h3><p>当然我在申请证书的时候，遇到了些问题，比如在等待证书签售的过程中，一直在报错</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Order</span> <span class="title">status</span> is processing, lets sleep <span class="keyword">and</span> retry</span><br></pre></td></tr></table></figure><p>等待的超时时间是 15s，连续 retry 了多次之后肯定是有问题的，参考了 <a href="https://u.sb/acme-sh-ssl/">网络上其他的人建议</a>，将默认的 CA Server 从 <code>ZeroSSL.com</code> 更换成了 <code>Let&#39;s Encrypt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose exec acme --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><h3 id="续签证书"><a href="#续签证书" class="headerlink" title="续签证书"></a>续签证书</h3><p>acme.sh 不用我们手动去执行 renew 的命令来续签到期的证书，正如之前所说，acme 的容器是以 daemon 状态运行的，因此他会定时的去检测我们的证书到期时间，在到期之前会自动进行 renew 操作。可以在 <code>acmeout/$&#123;DOMAIN_NAME&#125;/$&#123;DOAMIN_NAME&#125;.conf</code> 中看到，有一项 <code>Le_NextRenewTimeStr</code> 配置，该配置了记录了 acme.sh 下一次续签证书的时间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近升级了下家里的 LB，通过 gitlab 将 LB 的配置做了版本管理，并且通过 docker-compose 实现 LB 的快速部署。但是家里的网络做了内外网的区分，为了实现内网 https 访问，我需要在内网的 LB 上配置一套 SSL 证书（公网的部分直接在 CDN 上配置了 &lt;code&gt;let&amp;#39;s encrypt&lt;/code&gt; 的免费证书，一年一换）&lt;/p&gt;
&lt;p&gt;为了避免麻烦，对于内网的 https 证书希望做到以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到期自动续&lt;/li&gt;
&lt;li&gt;泛域名&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="证书" scheme="https://skyhive.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>黑群晖填坑</title>
    <link href="https://skyhive.github.io/2021/11/%E9%BB%91%E7%BE%A4%E6%99%96%E8%A7%A3%E9%99%A4%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6.html"/>
    <id>https://skyhive.github.io/2021/11/%E9%BB%91%E7%BE%A4%E6%99%96%E8%A7%A3%E9%99%A4%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6.html</id>
    <published>2021-11-17T03:36:05.000Z</published>
    <updated>2023-12-04T05:46:24.773Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间把家里的 NAS 做了一次改造，将用之前用了一年的架构推翻，换上了黑群晖。</p><p>故事还得从一年前说起。最初本着折腾的精神，采取了 Bcache+LVM 的方案，简单架构如下：<br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%AD%98%E5%82%A8%E4%B8%80%E4%BB%A3%E7%9B%AE.png" alt="NAS 一代目"></p><span id="more"></span><p>没有冗余没有备份，对于存储来说是很危险的。当时其实也是纠结了很久，手上有一块 RAID 卡，纠结了半天也没有上 RAID，原因是当时硬盘的配置是 6T*1+4T*3,如果上了 RAID 就意味着 6T 盘会浪费 2T 空间。</p><p>既然如此，干脆一不做二不休，直接上 LVM，然后把重要的数据定时同步出来，正好还有两块 2T 盘，可以拿来做备份使用。结果最后因为太懒，以及 2T 盘没有多余的机器可以让我接入，导致备份的计划迟迟没有落地。</p><p>后来考虑到 Bcache 这个东西比较不优雅，这个项目也多年没有人维护更新（主要是存储跑了一年一直没有冗余和备份，比较慌），最终还是考虑换成黑群晖。</p><p>换成黑群晖后也多多少少遇到了些问题，这里先记录下来，算是填坑了</p><h3 id="存储冗余问题"><a href="#存储冗余问题" class="headerlink" title="存储冗余问题"></a>存储冗余问题</h3><p>由于短时间内我还不会把 4T 盘都换成 6T，因此正常的 RAID 阵列还是不考虑了，决定使用 SHR（Synology Hybrid RAID）来实现硬盘的冗余。主要是 SHR 可以合理利用容量大小不一的硬盘，减少硬盘空间的浪费。目前我 6T*1+4T*3 的组合还是有浪费的空间，但是后面会新增两块 6T 盘就完美利用了。计划采购硬盘大小和数量前可以使用群晖的 <a href="https://www.synology.cn/zh-cn/support/RAID_calculator">RAID 计算器</a> 先算一下可用容量以及是否浪费空间。</p><p>然而并不是所有群晖的机型都开启了 SHR，对于没有开启 SHR 的机型，我们需要手动配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc.defaults/synoinfo.conf</span><br><span class="line"><span class="comment">## 注释 supportraidgroup=&quot;yes&quot;</span></span><br><span class="line"><span class="comment">## 添加以下内容</span></span><br><span class="line">support_syno_hybrid_raid=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment">## 保存重启即可</span></span><br></pre></td></tr></table></figure><h3 id="CPU-型号显示问题"><a href="#CPU-型号显示问题" class="headerlink" title="CPU 型号显示问题"></a>CPU 型号显示问题</h3><p>装完黑群晖后，显示的 CPU 型号为群晖的固定版本，有强迫症的话可以使用下面一键脚本进行修复（此处引自：<a href="https://wp.gxnas.com/9982.html">关于群晖优化可以用的一键命令</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2019/08/ch_cpuinfo </span><br><span class="line"><span class="built_in">chmod</span> 755 ch_cpuinfo</span><br><span class="line">./ch_cpuinfo</span><br></pre></td></tr></table></figure><h3 id="网卡驱动问题"><a href="#网卡驱动问题" class="headerlink" title="网卡驱动问题"></a>网卡驱动问题</h3><p>群晖上线后用了一天就发现了奇怪的问题，通过 SMB 从群晖读取数据时就会断网，写入正常，为了定位问题，做了以下测试：</p><ol><li>使用 FIO 对群晖的存储进行 IO 测试 - 测试期间网络正常，且 IO 结果符合预期；</li><li>使用 iperf 对群晖网络进行 IO 测试 - 测试期间网络正常，且 IO 结果符合预期；</li><li>修改 SMB 版本和配置进行读写操作 - 读取时依然会断网，写入正常；</li><li>禁用 SMB，使用 NFS 进行测试 - 读取时依然会断网，写入正常；</li><li>在群晖本地进行文件拷贝 - 读取时正常，写入正常；</li><li>上述测试时，群晖上另有一块 X520-DA2 加以佐证，全程光口网络正常，问题出在电口上</li></ol><p>Google 了一番，问题可能出在驱动上，我这板载的电口是 <code>Realtek@ 8111E PCIE Gigabit LAN Controller</code>，在论坛里找了一个大神编好的带 r8168 驱动的<a href="https://pan.skyhive.tech:8888/s/fnX6AexCKk3Pn5n">包</a>，更换驱动后果然就原地复活了。</p><h3 id="内存限制问题"><a href="#内存限制问题" class="headerlink" title="内存限制问题"></a>内存限制问题</h3><p>装完黑群晖后用 free 看到内存总共只有 2.5G，但是我物理上是 8G*2 的配置，Google 一番，需要修改 grub 配置解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/synoboot</span><br><span class="line"><span class="comment">## 这里一定要先进 dev 目录再挂载 synoboot1，否则会报错</span></span><br><span class="line"><span class="built_in">cd</span> /dev</span><br><span class="line">mount -t vfat /dev/synoboot1 /tmp/synoboot</span><br><span class="line">vim /tmp/synoboot/grub/grub.cfg</span><br><span class="line"><span class="comment">## 在 set common_args_3617 中加入 disable_mtrr_trim 配置</span></span><br><span class="line"><span class="comment">## 注意这里 3617 是因为我的黑群晖是 DS 3617xs，其他型号应该不一样</span></span><br><span class="line"><span class="built_in">set</span> common_args_3617=<span class="string">&#x27;disable_mtrr_trim syno_hdd_powerup_seq=0 HddHotplug=0 syno_hw_version=DS3617xs vender_format_version=2 console=ttyS0,115200n8 withefi elevator=elevator quiet syno_port_thaw=1&#x27;</span></span><br><span class="line"><span class="comment">## 重启后内存信息就正常了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间把家里的 NAS 做了一次改造，将用之前用了一年的架构推翻，换上了黑群晖。&lt;/p&gt;
&lt;p&gt;故事还得从一年前说起。最初本着折腾的精神，采取了 Bcache+LVM 的方案，简单架构如下：&lt;br&gt;&lt;img src=&quot;https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%AD%98%E5%82%A8%E4%B8%80%E4%BB%A3%E7%9B%AE.png&quot; alt=&quot;NAS 一代目&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="NAS" scheme="https://skyhive.github.io/tags/NAS/"/>
    
    <category term="黑群晖" scheme="https://skyhive.github.io/tags/%E9%BB%91%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>什么情况？访问不了虚拟机了？？</title>
    <link href="https://skyhive.github.io/2021/10/%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%86.html"/>
    <id>https://skyhive.github.io/2021/10/%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%86.html</id>
    <published>2021-10-27T03:59:21.000Z</published>
    <updated>2023-12-04T05:47:57.923Z</updated>
    
    <content type="html"><![CDATA[<p>前几日在家中遇到一件有趣的事情，与大家分享一下。</p><p>起初我有一套硬件 A，安装了 ESXi 与一些虚拟机，后来将 A 上的数据盘与系统盘（U 盘）拆至硬件 B 上，即 ESXi 从 A 迁移到了 B。闲置下来的硬件 A 就被我拿来安装了黑苹果，然而在黑苹果的路上遇到了很多的坑，例如掉帧、黑色块的问题（显卡驱动），蓝牙鼠标掉线的问题（蓝牙驱动），后来甚至发现这套黑苹果访问不了我的虚拟机们，也访问不到 ESXi。这时的我还很天真的以为是虚拟化和黑苹果之间的问题，Google 了一番未果还是换回了 Windows。</p><span id="more"></span><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8F%98%E6%9B%B4%E5%8F%B2.png" alt="变更史"></p><p>天真我以为这样就已经解决了问题，但结果是并没有什么卵用。同时我发现一直在使用的电脑访问 ESXi 也出现了问题，网络丢包严重，但是访问虚拟机却一点事情也没有。事已至此只能先简单抓包看一下，从硬件 A ping 向 ESXi（硬件 B）的同时，在 ESXi 上使用 tcpdump-uw 进行抓包（通过虚拟机作为跳板机连上 ESXi），结果是硬件 A 正常发送 ARP 请求，但是 ESXi 这里并没有收到 A 发送的请求。</p><p>到这里我基本断定是 ARP 的问题，但是为啥 ESXi 收不到我发出来的 ARP 包，其他的硬件却都能收到，我不得而知。但是为了验证我的猜想，我决定先在 Windows 上静态绑定一下 ARP 记录。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 先用 netsh 找到对应 interface 的 idx</span><br><span class="line">netsh i i show in   # netsh interface ipv4 show interfaces</span><br><span class="line"></span><br><span class="line"># 绑定 IP-MAC</span><br><span class="line">netsh -<span class="keyword">c</span> <span class="string">&quot;i i&quot;</span> <span class="built_in">add</span> ne <span class="symbol">&lt;idx&gt;</span> <span class="symbol">&lt;IP&gt;</span> <span class="symbol">&lt;MAC&gt;</span>  # netsh -<span class="keyword">c</span> <span class="string">&quot;interfaces ipv4&quot;</span> <span class="built_in">add</span> neighbors <span class="symbol">&lt;idx&gt;</span> <span class="symbol">&lt;IP&gt;</span> <span class="symbol">&lt;MAC&gt;</span></span><br><span class="line"></span><br><span class="line"># 也可以直接用 arp 命令进行临时绑定</span><br><span class="line">arp -s <span class="symbol">&lt;IP&gt;</span> <span class="symbol">&lt;MAC&gt;</span></span><br></pre></td></tr></table></figure><p>这里 ESXi 的 MAC 是从虚拟机 ARP 获得的，因为目前只有虚拟机访问 ESXi 比较正常。绑定完 MAC 地址后我又信誓旦旦进行验证，结果网络依然不通！！WTF？？到底发生甚么事了了？一开始以为 MAC 地址写错了，反复比对后确认了 MAC 地址并没有问题，那么为啥虚拟机用这个 MAC 地址可以 ping 通 ESXi，我用这个 MAC 就不行呢？</p><p>后来我怀疑是交换机的问题，我众多设备不是都接在同一个交换机上的，实际上是两个串联的傻瓜交换机，客厅一个卧室一个，而 ESXi 在客厅，实验的两台电脑在卧室。但是这个不成熟的猜想瞬间就被我给否定了，毕竟客厅和卧室里其他的设备互联都没有问题。</p><p>就在我一筹莫展把注意力集中到 Windows 的网络配置上时，我突然发现了一个神奇的事情 —— 硬件 B Windows 的 MAC 地址为啥和我 ESXi 一摸一样？？这真是见了鬼了，两个不同硬件为啥会有相同的 MAC 地址！难道是因为 ESXi 迁移的时候 MAC 地址并没有跟着硬件走？毕竟 ESXi 的管理地址是在 VMKernel 上的，这并不是一个物理接口。</p><p>简单了搜了一下，在 VMware 的 KB 中确实有这样的记载 —— <a href="https://kb.vmware.com/s/article/1031111?lang=zh_CN">更换网卡后或 vmkernel 的 MAC 地址重复时 vmk0 管理网络 MAC 地址不更新</a>。如果已经冲突了就只能删除原来的管理端口，重新创建，但是我这台 ESXi 只有一个网络接口，如果删了的话就只能连上显示器去配置了，所以为了省事就在 Web 界面先添加一个端口，再删除原来的即可。</p><p>如果要配置静态的 IP 地址又不想接显示器的话，可以 SSH 到 ESXi 后进行如下操作</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">TERM</span><span class="operator">=</span>xterm</span><br><span class="line">dcui</span><br></pre></td></tr></table></figure><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2Fesxi.png" alt="ESXi 控制台"><br>绝对的懒人福音！！</p><p>重建了管理端口后，没有了 MAC 地址冲突，硬件 A 的 Windows 又满血复活了，这件事情告诉我们，没事别特么的拆东墙补西墙！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几日在家中遇到一件有趣的事情，与大家分享一下。&lt;/p&gt;
&lt;p&gt;起初我有一套硬件 A，安装了 ESXi 与一些虚拟机，后来将 A 上的数据盘与系统盘（U 盘）拆至硬件 B 上，即 ESXi 从 A 迁移到了 B。闲置下来的硬件 A 就被我拿来安装了黑苹果，然而在黑苹果的路上遇到了很多的坑，例如掉帧、黑色块的问题（显卡驱动），蓝牙鼠标掉线的问题（蓝牙驱动），后来甚至发现这套黑苹果访问不了我的虚拟机们，也访问不到 ESXi。这时的我还很天真的以为是虚拟化和黑苹果之间的问题，Google 了一番未果还是换回了 Windows。&lt;/p&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="虚拟化" scheme="https://skyhive.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="ESXi" scheme="https://skyhive.github.io/tags/ESXi/"/>
    
    <category term="Network" scheme="https://skyhive.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>创建本地 APT 仓库</title>
    <link href="https://skyhive.github.io/2021/8/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0-APT-%E4%BB%93%E5%BA%93.html"/>
    <id>https://skyhive.github.io/2021/8/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0-APT-%E4%BB%93%E5%BA%93.html</id>
    <published>2021-08-23T09:21:11.000Z</published>
    <updated>2023-05-31T10:54:48.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于部分限制级场景无法联通外网，而 MAAS 在部署镜像的过程中，会默认连接 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> 的源去安装一些依赖包，在无外网环境下，会导致部署失败！因此考虑将 MAAS 在部署过程中的依赖包提前下载好，做成本地的 APT 仓库来解决。<br>由于 MAAS 需要安装的依赖包并不多（一共 260M 左右），并不需要使用 apt-mirror 去搭建完整的 apt 仓库，我们将需要的依赖包都下载好，使用 apt-fptarchive 来发布我们的仓库。</p><span id="more"></span><h3 id="仓库制作"><a href="#仓库制作" class="headerlink" title="仓库制作"></a>仓库制作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 先删除本地的缓存的 deb 包</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/cache/apt/archives/*.deb</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 下载依赖包</span></span><br><span class="line">apt -d reinstall -y amd64-microcode crda freeipmi-common freeipmi-tools grub-common grub-gfxpayload-lists grub-pc-bin grub-pc grub2-common intel-microcode ipmitool iucode-tool iw libdbus-glib-1-2 libevdev2 libfreeipmi17 libimobiledevice6 libipmiconsole2 libipmidetect0 libmysqlclient21 libnl-3-200 libnl-genl-3-200 libnvpair1linux libplist3 libsensors-config libsensors5 libsnmp-base libsnmp35 libupower-glib3 libusbmuxd6 libuutil1linux libzfs2linux libzpool2linux linux-firmware linux-generic linux-headers-5.4.0-77-generic linux-headers-5.4.0-77 linux-headers-generic linux-image-5.4.0-77-generic linux-image-generic linux-modules-5.4.0-77-generic linux-modules-extra-5.4.0-77-generic lldpd mysql-common os-prober python3-bcrypt python3-paramiko python3-pyudev python3-yaml smartmontools thermald upower usbmuxd wireless-regdb zfsutils-linux</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 创建仓库目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/repo/pool/main -p</span><br><span class="line"><span class="built_in">mv</span> /var/cache/apt/archives/*.deb /opt/repo/pool/main/</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 开始创建</span></span><br><span class="line"><span class="comment">### 生成公钥和私钥</span></span><br><span class="line">root@maas:~<span class="comment"># gpg --full-generate-key</span></span><br><span class="line">gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"> </span><br><span class="line">Please <span class="keyword">select</span> what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 4</span><br><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072) 1024</span><br><span class="line">Requested keysize is 1024 bits</span><br><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0) 0</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y</span><br><span class="line"> </span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"> </span><br><span class="line">Real name: maas </span><br><span class="line">Email address: maas@maas.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;maas@maas.com&quot;</span></span><br><span class="line"> </span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line"> </span><br><span class="line"><span class="comment">### key 的类型选择 RSA （sign only）</span></span><br><span class="line"><span class="comment">### keyzise 选择 1024</span></span><br><span class="line"><span class="comment">### 过期时间选择 0 （永不过期）</span></span><br><span class="line"><span class="comment">### 最后填上 Real name 和 Email address</span></span><br><span class="line"><span class="comment">### 完成后会要求设置私钥密码，后续导出私钥或者用私钥进行签名都会用到该密码！</span></span><br><span class="line"><span class="comment">### 可以使用 gpg -k 来查看当前的 gpg key 信息</span></span><br><span class="line">root@maas:~<span class="comment"># gpg -k</span></span><br><span class="line">/root/.gnupg/pubring.kbx</span><br><span class="line">------------------------</span><br><span class="line">pub   rsa1024 2021-08-19 [SC]</span><br><span class="line">      D923B3893E0AB27C3690696CFC3E8D5996EBB76F</span><br><span class="line">uid           [ultimate] maas &lt;maas@maas.com&gt;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> /opt/repo/</span><br><span class="line">gpg -a --<span class="built_in">export</span> maas@maas.com &gt; maas.pub  <span class="comment">## 导出公钥，后续需要将内容复制到 MAAS 上</span></span><br><span class="line">gpg -a --export-secret-keys maas@maas.com &gt; maas.sec    <span class="comment">## 导出私钥</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">mkdir</span> -p dists/focal/main/binary-amd64</span><br><span class="line">apt-ftparchive  packages /opt/repo/pool/main/ &gt; dists/focal/Packages</span><br><span class="line"><span class="built_in">cd</span> dists/focal/</span><br><span class="line">gzip -c Packages &gt; Packages.gz</span><br><span class="line"><span class="built_in">cp</span> Packages* main/binary-amd64/</span><br><span class="line">apt-ftparchive release . &gt; Release</span><br><span class="line">gpg -abs -o Release.gpg Release</span><br><span class="line">gpg --clearsign -o InRelease Release</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 创建 backports/proposed/security/updates 目录</span></span><br><span class="line"><span class="comment">### 因为我们只是为了安装上述的依赖包从而完成部署流程，因此这几个目录只是用来骗过 ubuntu 的，直接从 focal copy 即可</span></span><br><span class="line"><span class="comment">### proposed 是 src 源，不搞也可以</span></span><br><span class="line"><span class="built_in">cp</span> -r focal focal-backports</span><br><span class="line"><span class="built_in">cp</span> -r focal focal-proposed</span><br><span class="line"><span class="built_in">cp</span> -r focal focal-security</span><br><span class="line"><span class="built_in">cp</span> -r focal focal-updates</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 通过 Nginx 发布 HTTP 服务</span></span><br><span class="line">apt install -y nginx</span><br><span class="line">sed -e $<span class="string">&#x27;/server_name _/a\ \ \ \ \ \ \ \ autoindex on;&#x27;</span> /etc/nginx/sites-available/default    <span class="comment">## 打开 autoindex</span></span><br><span class="line">nginx -t    <span class="comment">## 检查配置语法问题</span></span><br><span class="line">nginx -s reload     <span class="comment">## 加载 nginx 配置</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line"><span class="built_in">mv</span> /opt/repo ./</span><br></pre></td></tr></table></figure><h3 id="修改-MAAS-Package-repos-配置"><a href="#修改-MAAS-Package-repos-配置" class="headerlink" title="修改 MAAS Package repos 配置"></a>修改 MAAS Package repos 配置</h3><p>如果客户环境连不到外网，那么我们在部署之前需要修改一下 maas 的配置</p><ol><li>登录至 maas web 控制界面</li><li>定位置至 Settings → Package repos</li><li>修改 Ubuntu archive URL 为 <a href="http://maas_ip/repo/%EF%BC%9B%E5%B9%B6%E5%B0%86%E4%B9%8B%E5%89%8D%E5%AF%BC%E5%87%BA%E7%9A%84">http://maas_ip/repo/；并将之前导出的</a> maas.pub 内容粘贴至  Ubuntu archive  Key 中，保存</li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;由于部分限制级场景无法联通外网，而 MAAS 在部署镜像的过程中，会默认连接 &lt;a href=&quot;http://archive.ubuntu.com/ubuntu&quot;&gt;http://archive.ubuntu.com/ubuntu&lt;/a&gt; 的源去安装一些依赖包，在无外网环境下，会导致部署失败！因此考虑将 MAAS 在部署过程中的依赖包提前下载好，做成本地的 APT 仓库来解决。&lt;br&gt;由于 MAAS 需要安装的依赖包并不多（一共 260M 左右），并不需要使用 apt-mirror 去搭建完整的 apt 仓库，我们将需要的依赖包都下载好，使用 apt-fptarchive 来发布我们的仓库。&lt;/p&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Ubuntu" scheme="https://skyhive.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Galera 集群搭建</title>
    <link href="https://skyhive.github.io/2021/8/Galera-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html"/>
    <id>https://skyhive.github.io/2021/8/Galera-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html</id>
    <published>2021-08-16T08:22:19.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Galera-简介"><a href="#Galera-简介" class="headerlink" title="Galera 简介"></a>Galera 简介</h3><p>Galera Cluster 是基于 MySQL&#x2F;Innodb 二次开发而成的一个支持“多主同步”的数据库主从集群。具备多主、同步复制、高可用等特点。</p><p>MariaDB Galera Cluster，由 MariaDB 和 MySQL-wsrep 补丁实现,同 Percona 的 PXC 数据库集群,目前只支持运行在 Linux 系统上。从 MariaDB 10.1 版开始，MariaDB Server 和 MariaDB Galera Server 安装包已经合并，安装 MariaDB 时，Galera 相关依赖安装包会自动安装，像内置的插件或存储引擎一样，通过简单配置即可启用。</p><h3 id="Galera-集群状态"><a href="#Galera-集群状态" class="headerlink" title="Galera 集群状态"></a>Galera 集群状态</h3><p>查看集群状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;wsrep_local_state_comment&#x27;</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><table><thead><tr><th align="center">状态</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Open</td><td align="center">节点启动成功，尝试连接到集群；如果失败则根据配置退出或者创建新集群</td></tr><tr><td align="center">Primary</td><td align="center">节点已处于集群中，在新节点加入时，选取 donor 进行数据同步时会产生的状态</td></tr><tr><td align="center">Joiner</td><td align="center">节点处于等待接收&#x2F;接收同步文件的状态</td></tr><tr><td align="center">Joined</td><td align="center">节点完成数据同步，但有部分数据没跟上，在尝试保持和集群进度一致的过程状态。<br>例如某个节点故障后，重新加入集群，在追赶集群进度时的状态</td></tr><tr><td align="center">Synced</td><td align="center">节点正常提供服务的状态，表示已经同步完成并和集群进度保持一致</td></tr><tr><td align="center">Donor</td><td align="center">节点处于为新节点提供全量数据同步时的状态。此时该节点对客户端不提供服务</td></tr></tbody></table><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>Primary Component：在网络发生故障时，由于网络连接原因，集群可能被分成好几个小集群，但只能有一个集群可以继续进行数据修改，集群的这部分称为 Primary Component</p></li><li><p>GTID：Global Transaction ID，由 UUID 和 sequence number 偏移量组成。wsrep api 中定义的集群内部全局事务 id，一个顺序 ID，用于记录集群中发生状态改变的唯一标识以及队列中的偏移量</p></li><li><p>SST：State Snapshot Transfer（状态快照迁移），集群中数据共享节点通过从一个节点到另外一个节点迁移完整的数据拷贝（全量拷贝）。当一个新的节点加入到集群中，新的节点从集群中已有节点同步数据，开始进行状态快照迁移，可以在 Galera 集群中选择两种不同的状态转移方法</p><p> 3.1 逻辑数据转移：采用 mysqldump 命令，在转移之前，需要数据接收方服务器完全启动，并准备好接受数据的连接准备。这是一个阻塞式方法，数据共享节点 Donor 在状态转移节点处于只读状态，在数据共享节点 Donor 上适用 FLUSH TABLES WITH READ LOCK 命令，mysqldump 是速度最慢的 SST 方法，在负载比较的数据库集群上可能是个问题。</p><p> 3.2 物理数据转移：该方法采用 rsync、rsync_wan、xtrabackup 或其他方法从服务器之间直接拷贝数据，数据接受服务器在拷贝完数据后启动服务器。该方法较 mysqldump 速度较快，但存在一定的限制，只能在服务器启动时采用，数据接受服务器需要同数据共享服务器 Donor 配置相同（例如，服务器间 innodb_file_per_table 配置必须完全一致）。</p></li><li><p>IST：Incremental State Transfer（增量状态迁移），集群一个节点通过识别新加入节点缺失的事务操作，将该操作发送，而并不像SST那样的全量数据拷贝。该方法只在特定条件下可用：</p><p> 4.1 新加入节点的状态 UUID 与集群组中节点一致；</p><p> 4.2 新加入节点所缺失的写数据集 write-sets 可以在 Donor 的写数据集 write-sets 存在。</p></li></ol><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><table><thead><tr><th align="center">hostname</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">db01</td><td align="center">192.168.2.10</td></tr><tr><td align="center">db02</td><td align="center">192.168.2.11</td></tr><tr><td align="center">db03</td><td align="center">192.168.2.12</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y mariadb-server-10.3</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 配置集群</span></span><br><span class="line"><span class="comment">### 在第一台主机操作</span></span><br><span class="line">systemctl stop mysql</span><br><span class="line">vim /etc/mysql/mariadb.conf.d/50-server.cnf</span><br><span class="line"><span class="comment"># 在 [mysqld] 下添加 skip-name-resolve</span></span><br><span class="line"><span class="comment"># 在文件末尾添加如下内容</span></span><br><span class="line">[galera]</span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=<span class="string">&quot;gcomm://&quot;</span></span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"><span class="comment"># any cluster name</span></span><br><span class="line">wsrep_cluster_name=<span class="string">&quot;MariaDB_Cluster&quot;</span></span><br><span class="line"><span class="comment"># own IP address</span></span><br><span class="line">wsrep_node_address=<span class="string">&quot;192.168.2.10&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">### 完成后保存退出</span></span><br><span class="line">galera_new_cluster</span><br><span class="line"> </span><br><span class="line">mysql -uroot -p</span><br><span class="line">  </span><br><span class="line">CREATE USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Iamadm1n!!&#x27;</span>;</span><br><span class="line">GRANT ALL ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">update mysql.user <span class="built_in">set</span>  Grant_priv=<span class="string">&#x27;Y&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 在其他两台主机操作</span></span><br><span class="line">systemctl stop mysql</span><br><span class="line">vim /etc/mysql/mariadb.conf.d/50-server.cnf</span><br><span class="line"><span class="comment"># 在 [mysqld] 下添加 skip-name-resolve</span></span><br><span class="line"><span class="comment"># 在文件末尾添加如下内容</span></span><br><span class="line">[galera]</span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=<span class="string">&quot;gcomm://192.168.2.10,192.168.2.11,192.168.2.12&quot;</span></span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"><span class="comment"># any cluster name</span></span><br><span class="line">wsrep_cluster_name=<span class="string">&quot;MariaDB_Cluster&quot;</span></span><br><span class="line"><span class="comment"># own IP address</span></span><br><span class="line">wsrep_node_address=<span class="string">&quot;192.168.2.11&quot;</span>   <span class="comment">## 注意：这里填写当前节点的 IP，另外一个节点填 192.168.2.12</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">### 完成后保存退出</span></span><br><span class="line"><span class="comment">## 重启 MySQL 服务</span></span><br><span class="line">systemctl start mysql</span><br><span class="line">systemctl <span class="built_in">enable</span> mysql</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 检查集群状态</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line">show status like <span class="string">&#x27;wsrep_cluster%&#x27;</span>;</span><br><span class="line"><span class="comment">## 需观察 &#x27;wsrep_cluster_size&#x27; 是否正常（正常为节点数量），以及 &#x27;wsrep_cluster_status&#x27; 是否为 Primary</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 如果集群状态正常，则去修改第一个节点的 /etc/mysql/mariadb.conf.d/50-server.cnf 文件</span></span><br><span class="line"><span class="comment">## 将 wsrep_cluster_address 配置修改和其他两个节点一致即可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Galera-简介&quot;&gt;&lt;a href=&quot;#Galera-简介&quot; class=&quot;headerlink&quot; title=&quot;Galera 简介&quot;&gt;&lt;/a&gt;Galera 简介&lt;/h3&gt;&lt;p&gt;Galera Cluster 是基于 MySQL&amp;#x2F;Innodb 二次开发而成的一个支持“多主同步”的数据库主从集群。具备多主、同步复制、高可用等特点。&lt;/p&gt;
&lt;p&gt;MariaDB Galera Cluster，由 MariaDB 和 MySQL-wsrep 补丁实现,同 Percona 的 PXC 数据库集群,目前只支持运行在 Linux 系统上。从 MariaDB 10.1 版开始，MariaDB Server 和 MariaDB Galera Server 安装包已经合并，安装 MariaDB 时，Galera 相关依赖安装包会自动安装，像内置的插件或存储引擎一样，通过简单配置即可启用。&lt;/p&gt;
&lt;h3 id=&quot;Galera-集群状态&quot;&gt;&lt;a href=&quot;#Galera-集群状态&quot; class=&quot;headerlink&quot; title=&quot;Galera 集群状态&quot;&gt;&lt;/a&gt;Galera 集群状态&lt;/h3&gt;&lt;p&gt;查看集群状态&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SHOW&lt;/span&gt; STATUS &lt;span class=&quot;keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;wsrep_local_state_comment&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="MySQL" scheme="https://skyhive.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>雾都游记</title>
    <link href="https://skyhive.github.io/2020/10/%E9%9B%BE%E9%83%BD%E6%B8%B8%E8%AE%B0.html"/>
    <id>https://skyhive.github.io/2020/10/%E9%9B%BE%E9%83%BD%E6%B8%B8%E8%AE%B0.html</id>
    <published>2020-10-22T07:07:20.000Z</published>
    <updated>2023-12-04T07:07:24.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>18:30 落地，取得托运行李后，自<strong>江北机场T3航站楼</strong>乘坐地铁<strong>十号线（鲤鱼池方向）</strong>至红<strong>土地换</strong>乘地铁<strong>六号线（茶园方向）</strong>至<strong>小什字下车（8 号口）</strong>，马路对面就是宾馆！！</p><blockquote><ul><li>重庆地铁可使用支付宝刷码进站</li><li>宾馆前台在 16F，10-15F 是客房</li><li>企业金会员，有双早，但是早饭不好吃</li><li>紧承上一条，楼下马路对面就有花市豌杂面（如果不想吃汤面就和老板说要干溜），不想排队等座位的话，可以考虑打包去别的地方吃（隔壁就有类似大食堂的早餐店）</li></ul></blockquote><p>在宾馆休整些许后，步行出发去<strong>九村烤脑花（西西推荐，冤有头债有主，觉得不好吃不要找我）</strong>，步行至洪崖洞店，在附近买了两杯<strong>一只酸奶牛</strong>后就餐；推荐<strong>香菜牛肉、烤茄子、烤鸡翅</strong>等</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B9%9D%E6%9D%91%E7%83%A4%E8%84%91%E8%8A%B1.png" alt="九村烤脑花"></p><blockquote><ul><li>宾馆附近有三家九村烤脑花，分别在来福士、洪崖洞、解放碑，三个店离宾馆差不多距离，来福士店十点关门，所以建议去其他两个店</li><li>九村烤脑花是烧烤店，烤脑花为特色菜，其他菜也很好吃，人均 70~80，人越多越划算</li></ul></blockquote><p>吃完回酒店修锅，一夜无事 💤</p><span id="more"></span><style>.page-post-detail .post-body .group-picture-column {  float: none;  margin-top: 5px;  // width: auto ;  img { margin: 0 auto;  width: 100% ; }}.fancybox {    display: inline-block;}</style><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>睡到中午，洗漱出门。</p><p>步行至解放碑吃小吃，较场口夜市区域购买<strong>降龙爪爪、蜜雪冰城冰激凌</strong>，后步行至石灰市，购买现炸小酥肉，并于<strong>谭记王烤鱼</strong>就餐。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%99%8D%E9%BE%99%E7%88%AA%E7%88%AA.png" alt="降龙爪爪"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%9C%9C%E9%9B%AA%E5%86%B0%E5%9F%8E%E7%94%9C%E8%9C%9C%E8%9C%9C.png" alt="蜜雪冰城甜蜜蜜"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E7%8C%AA%E8%B9%84.png" alt="烤猪蹄"></div></div><div class="group-picture-row"></div></div></div><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%B0%8F%E9%85%A5%E8%82%89.png" alt="小酥肉"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E5%9C%9F%E8%B1%86.png" alt="烤土豆"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%85%B8%E5%A5%B6%E7%89%9B.png" alt="酸奶牛"></div></div><div class="group-picture-row"></div></div></div><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%83%A4%E9%B1%BC.png" alt="烤鱼"></p><blockquote><ul><li>降龙爪爪排队的人比较多，但务必要吃，真的好吃 <ul><li>火锅味很辣，真的辣</li><li>老卤味很香，真的香</li><li>其他口味没有吃</li></ul></li><li>降龙爪爪隔壁有家卖脆骨的，人也很多，味道还可以，但是很贵，没有性价比</li><li>蜜雪冰城冰激凌三块钱，很好吃</li><li>小吃街卖现炸小酥肉的，大多都不好吃，不要看排队的人多，买回来可能还不如上海谭鸭血点的</li><li>谭记王烤鱼虽然好吃，但真的很贵，一条江团的套餐 140（和江边城外不相上下），人多的局可以选择吃对面的，烤鱼+江湖菜，会比较划算</li></ul></blockquote><p>午餐后沿着石灰市一路向北，来到莲花池社区，其中有著名的<strong>石灰市李串串</strong>，以及一些小区里居民自己开的烧烤、火锅、烤鱼店，味道都很地道，墙裂推荐！！</p><blockquote><p>石灰市李串串要吃里面那家老店（有标识），一年前吃过，大众点评必吃榜名副其实</p></blockquote><p>沿着莲花池社区的主路一路向北，出了莲花池社区后来到民生路，一路向西后来到通远楼城墙，继续爬，爬到顶后（过了幼儿园）出现了下去的路。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%80%9A%E8%BF%9C%E9%97%A8.png" alt="通远门"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%89%E4%B8%89%E4%B8%80%E6%83%A8%E6%A1%88.png" alt="三三一惨案"></p><p>后步行至长江索道处准备过江（此时约 4 点左右），被长江索道外一个大叔拦住：</p><blockquote><p>大叔：不要坐索道了，里面排了 5000 多号了 </br><br>我一看确实 5000 号：那就不坐索道了，我去做地铁到对面</br><br>大叔：你去对面干什么</br><br>我：上山吃火锅看夜景<br><br>大叔：重庆冬天叫雾都，你上山能隔几公里能看到什么夜景；去洪崖洞玩玩吧</br><br>我：安排了，明晚去</br><br>大叔：游船没有做过吧，看夜景可以做游船，两江游</br><br>我：一年前坐过了</br><br>至此，人心难测，真假难辨，不做评论</p></blockquote><p>长江索道门口便是小什字地铁口，非常方便，乘坐六号线至<strong>上新街（茶园方向）</strong></p><p>上新街地铁口在山腰处，二号口出来便是盗月社曾吃过的<strong>豆花鲫鱼店</strong>（同样也是在别人家里的）- <a href="https://www.bilibili.com/video/BV1LT4y1E7ET">B 站视频链接</a></p><p>由于之前奔走过于频繁，此时累的一批，就沿着下山的路寻找座位，大概走了一半坐了下来就再也不想动了。。。同时也打消了上山的念头，来到了山脚 – 即南滨路。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%8A%E6%96%B0%E8%A1%97%E6%B1%9F%E6%99%AF.png" alt="上新街江景 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%8A%E6%96%B0%E8%A1%97%E6%B1%9F%E6%99%AF02.png" alt="上新街江景 - 2"></p><p>沿着南滨路步行至南滨路景区，结果靠江的部分被封了，只能站在上面拍照，血亏。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8D%97%E6%BB%A8%E8%B7%AF%E6%B1%9F%E6%99%AF01.png" alt="南滨路江景 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%8D%97%E6%BB%A8%E8%B7%AF%E6%B1%9F%E6%99%AF02.png" alt="南滨路江景 - 2"></p><blockquote><ul><li>上南山可以参考文博和西西的推荐去吃火锅或者小吃，重点就是在学校附近的店，绝对没有坑</li><li>巴倒烫也是可以的，如果有时间的话就排个队在外面吃，会比较舒服，一年去吃过，味道不错</li></ul></blockquote><p>打车回渝中（真的太累了，走不动了），晚上去<strong>今朝醉小酒馆</strong>就餐，两个人吃比较亏，人多了才划算，果酒很好喝，就是太贵了。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%BE%A3%E5%AD%90%E9%B8%A1.png" alt="辣子鸡"><br>晚上回去买了俩烤猪蹄，到酒店洗洗、玩玩手机就睡了 💤。</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>早上鬼使神差的去吃了汉庭的早餐，种类比较少，不太好吃。</p><p>洗漱后来到楼下买了一碗<strong>花市豌杂</strong>，小面打包至隔壁的类似大食堂的早餐店就餐，顺便点了一碗<strong>早茶</strong>（虽然已经是中午了）。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%8A%B1%E5%B8%82%E8%B1%8C%E6%9D%82.png" alt="花市豌杂"></div><div class="group-picture-column" style="width: 50%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%97%A9%E8%8C%B6.png" alt="早茶"></div></div></div></div><p>吃饱喝足后去乘坐地铁<strong>一号线（璧山方向）</strong>至大坪站换乘地铁<strong>二号线（较场口方向）</strong>，于李子坝站下车，跟着路标出地铁站来到马路对面的李子坝观景台拍照。<br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D01.png" alt="李子坝 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D02.png" alt="李子坝 - 2 "><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%9D%8E%E5%AD%90%E5%9D%9D%E6%B1%9F%E6%99%AF.png" alt="李子坝江景"></p><p>李子坝观景台对面是防空洞，进去转转没啥意思。</p><blockquote><p>李子坝观景台主要就是看地铁开进大楼，真的没啥意思，不喜欢的同学可以不用去</p></blockquote><p>根据原计划步行至<strong>鹅岭公园（导航显示 2 KM）</strong>，跟着导航走了 100m 后发现自己开始爬山，爬到怀疑人生后发现自己从李子坝地铁站<strong>爬到了上一个地铁站</strong> - 佛图关，心态大崩，由于小黄同学身体不适，就此作罢，劝后人以此为戒。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%B9%85%E5%B2%AD%E6%B1%9F%E6%99%AF.png" alt="鹅岭江景"></p><p>从佛图关地铁站乘坐<strong>二号线（较场口方向）</strong>至较场口地铁站下车，来到<strong>较场口夜市</strong>，采购部分小吃走回酒店修整（此时约 4 点左右）。</p><p>晚上六点左右出门，直奔<strong>洪崖洞</strong>（无需买票），在洪崖洞外有大叔说十块钱带你去洪崖洞一楼，不用排队，不用理会即可。</p><blockquote><p>此处科普：</p><ul><li>洪崖洞共有十一层楼，当你站在地面上准备入洪雅洞的时候是在十一楼，你可以认为他是在地下 1-11 层，不同的参考系而已</li><li>入洪崖洞不要门票，扫码预约或者美团预约即可（免费）</li></ul></blockquote><p>排队进入洪崖洞后，随大流走到当前楼层的尽头，开始下楼，下楼有两种方式，可以做直梯（参考 PDD 上班），也可以走楼梯（果断选择走楼梯）。</p><p>在人挤人的环境下走到 5 楼（好像是 4 楼，记不清了），开始参观所谓的 xxx 风情商业街。记忆中从 1 -5 楼都是这种商业街，特色就是光污染+重庆特色，拍拍照吃吃东西就没啥了。</p><p>走到一楼后就显得非常空旷，并且适合拍江景。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E.png" alt="洪崖洞 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E02.png" alt="洪崖洞 - 2"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E%E6%B1%9F%E6%99%AF.png" alt="洪崖洞江景 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%B4%AA%E5%B4%96%E6%B4%9E%E6%B1%9F%E6%99%AF02.png" alt="洪崖洞江景 - 2"></p><p>吐槽完洪崖洞后，又要从一楼爬回十一楼，爬不动的建议等直梯。</p><blockquote><p>洪崖洞作为重庆的标志性打卡圣地，基础设施是真的差，一个男厕所三个坑位，两个没有门；四个便池，两个是漫出来的。。。</br><br>![拉屎]](<a href="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%8B%89%E5%B1%8E.png">https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%8B%89%E5%B1%8E.png</a>)</p></blockquote><p>洪崖洞出来后，步行至<strong>石灰市莲花池社区</strong>，寻找<strong>巴渝龙老火锅</strong> ，今晚选择和盗月社同款打卡火锅店 - <a href="https://www.bilibili.com/video/BV1qs411M7S6">B 站链接</a>（也因为这是开在小区里的老火锅，物美价廉）</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%B7%B4%E6%B8%9D%E9%BE%99.png" alt="巴渝龙"></p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E9%BA%BB%E8%BE%A3%E7%89%9B%E8%82%89.png" alt="麻辣牛肉"></div><div class="group-picture-column" style="width: 50%;"><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E7%8B%97%E5%AD%90.png" alt="狗子"></div></div><div class="group-picture-row"></div></div></div><p>吃完（大概十点左右）步行回酒店，洗漱玩手机睡觉 💤</p><h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><p>继续睡到中午，开始收拾行李，准备退房。</p><p>中午提着行李去吃<strong>豆花饭</strong>。</p><p>没错，店名就叫豆花饭，在<strong>新华路</strong>上，依然是盗月社同款打卡店 - <a href="https://www.bilibili.com/video/BV1iK4y147yv">B 站链接</a></p><p>这个也是重庆人民自己开的店，便宜实惠量贼多。一人点了一份豆花+米饭，另外点了一个尖椒回锅肉+毛血旺，吃到撑，都是下饭菜！！</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%B1%86%E8%8A%B1%E9%A5%AD.png" alt="豆花饭"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E6%AF%9B%E8%A1%80%E6%97%BA.png" alt="毛血旺"></p><p>下午则没有去什么别的地方，直接去机场等着回家了</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%A4%A7%E8%99%B9%E6%A1%A5%E5%A4%9C%E6%99%AF.png" alt="大虹桥夜景 - 1"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%A4%A7%E8%99%B9%E6%A1%A5%E5%A4%9C%E6%99%AF02.png" alt="大虹桥夜景 - 2"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>重庆是很美的城市，三天的行程只发掘了它一小部分的魅力；山城，一定要上山感受他的魅力（虽然这次没有上南山，下次去补上！！）。</p><p>秋天，湿度、温度都刚刚好，上山，吹风，观景，吃火锅，一绝。</p><h4 id="对于吃"><a href="#对于吃" class="headerlink" title="对于吃"></a>对于吃</h4><p>重庆吃的很多，建议参照上级目录中西西和文博的推荐（即我修改后的表格以及他们留下的评论）。</p><p>商场里的店仅限打卡，吃还是建议进社区&#x2F;小区&#x2F;学校周边，比较有重庆味道且价格实惠。</p><p>重庆味道不是辣，辣起辅助作用，主要是香、鲜，菜大多都比较下饭，所以不必追求菜量（口味重另说）。</p><h4 id="对于行"><a href="#对于行" class="headerlink" title="对于行"></a>对于行</h4><p>地铁&#x2F;公交可以解决大多数场景，实在累了就打车。</p><p>看地图时刻记得要加上 Z 轴，只看路程距离是不行的，还得看该路程是否在山上。</p><h4 id="对于玩"><a href="#对于玩" class="headerlink" title="对于玩"></a>对于玩</h4><ul><li>洪崖洞：不推荐，如果人少且实在是闲着没事可以去；</li><li>游船：不太推荐但高于洪崖洞，缺点是贵且排队人多，优点是可以看到洪崖洞全景，但如果买票上船了一定记得要随身带身份证，没有带就别买票，否则两三个小时都在排队；</li><li>索道：不太推荐，大号缆车，就是站在缆车里听导游哔哔十分钟就到对面了，排队平均时间在一小时（如果要做缆车，记得提前取票，避免傻等着）；</li><li>解放碑：推荐，附近都是小吃街，如解放碑好吃街、八一路好吃街、民族路好吃街、较场口夜市等；</li><li>李子坝观景台：推荐，地铁直达，可拍照且不用排队，去完李子坝可顺路去鹅岭、三峡广场等（地铁直达）；</li><li>皇冠大扶梯：推荐，地铁直达（目前貌似未开放）</li><li>三峡广场：一般推荐，离解放碑稍远，也是一个商业街，附近有一些学校（沙坪坝小区），所以吃的还可以</li><li>磁器口古镇：不太推荐，比较远的一个古镇商业街，因为免费门票，所以人很多，还是爬山，所以一般情况不推荐去；</li><li>川美：想去，但是因为疫情不开放；</li><li>南山：推荐，山上有不少大学以及火锅一条街，所以吃的肯定不错，并且有南山一棵树观景台，观景效果应该不错；</li><li>南滨路：不推荐，没啥好玩的，临江+商业广场</li><li>七星岗&#x2F;通远楼：有时间可以从石灰市步行至通远楼城墙，爬上山后至七星岗，没有啥特别的，但是比较贴近重庆市民的生活，适合放松</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一天&quot; class=&quot;headerlink&quot; title=&quot;第一天&quot;&gt;&lt;/a&gt;第一天&lt;/h3&gt;&lt;p&gt;18:30 落地，取得托运行李后，自&lt;strong&gt;江北机场T3航站楼&lt;/strong&gt;乘坐地铁&lt;strong&gt;十号线（鲤鱼池方向）&lt;/strong&gt;至红&lt;strong&gt;土地换&lt;/strong&gt;乘地铁&lt;strong&gt;六号线（茶园方向）&lt;/strong&gt;至&lt;strong&gt;小什字下车（8 号口）&lt;/strong&gt;，马路对面就是宾馆！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重庆地铁可使用支付宝刷码进站&lt;/li&gt;
&lt;li&gt;宾馆前台在 16F，10-15F 是客房&lt;/li&gt;
&lt;li&gt;企业金会员，有双早，但是早饭不好吃&lt;/li&gt;
&lt;li&gt;紧承上一条，楼下马路对面就有花市豌杂面（如果不想吃汤面就和老板说要干溜），不想排队等座位的话，可以考虑打包去别的地方吃（隔壁就有类似大食堂的早餐店）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在宾馆休整些许后，步行出发去&lt;strong&gt;九村烤脑花（西西推荐，冤有头债有主，觉得不好吃不要找我）&lt;/strong&gt;，步行至洪崖洞店，在附近买了两杯&lt;strong&gt;一只酸奶牛&lt;/strong&gt;后就餐；推荐&lt;strong&gt;香菜牛肉、烤茄子、烤鸡翅&lt;/strong&gt;等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B9%9D%E6%9D%91%E7%83%A4%E8%84%91%E8%8A%B1.png&quot; alt=&quot;九村烤脑花&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;宾馆附近有三家九村烤脑花，分别在来福士、洪崖洞、解放碑，三个店离宾馆差不多距离，来福士店十点关门，所以建议去其他两个店&lt;/li&gt;
&lt;li&gt;九村烤脑花是烧烤店，烤脑花为特色菜，其他菜也很好吃，人均 70~80，人越多越划算&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;吃完回酒店修锅，一夜无事 💤&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://skyhive.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="旅游" scheme="https://skyhive.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>KVM 填坑</title>
    <link href="https://skyhive.github.io/2020/9/KVM-%E5%A1%AB%E5%9D%91.html"/>
    <id>https://skyhive.github.io/2020/9/KVM-%E5%A1%AB%E5%9D%91.html</id>
    <published>2020-09-06T09:35:31.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、UEFI-引导问题"><a href="#1、UEFI-引导问题" class="headerlink" title="1、UEFI 引导问题"></a>1、UEFI 引导问题</h3><p>支持 KVM 虚拟机使用 UEFI 引导需要安装 OVMF 组件，参考<a href="https://blog.skyhive.tech/2020/06/10/%E5%9F%BA%E4%BA%8E-CentOS-%E5%AE%89%E8%A3%85-KVM/">基于 CentOS 安装 KVM</a>。<br>目前通过 virt-v2v 导入的 ova 且使用 UEFI 启动的虚拟机（from vSphere）再 define domain 的时候会有报错，报错如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error: </span>Failed to define domain from /tmp/v2vlibvirt20e61b.xml</span><br><span class="line"><span class="keyword">error: </span>unsupported configuration: smm is not available with this QEMU binary</span><br></pre></td></tr></table></figure><p>以上报错是 OVMF 的问题，参考：<a href="https://access.redhat.com/discussions/3175901">https://access.redhat.com/discussions/3175901</a></p><p>具体是因为因为 “OVMF_CODE.secboot.fd” 固件在当前的 qemu-kvm 中不受支持，RedHat Discussion 上有两种解决方案：</p><ol><li><p>重构 OVMF RPM 包，参考： <a href="https://access.redhat.com/discussions/3175901">https://access.redhat.com/discussions/3175901</a></p><blockquote><p> Removing “-D SMM_REQUIRE”, rebuild the rpm, browse inside the rpm and then copy OVMF_CODE.secboot.fd to &#x2F;usr&#x2F;share&#x2F;OVMF&#x2F;OVMF_CODE.fd makes it work but I don’t know whether this will reduce security.</p></blockquote></li><li><p>升级 qemu-kvm 版本至 2.6 以上的 qemu-kvm-rhev 版本</p><blockquote><p>‘With this update, the “OVMF_CODE.secboot.fd” firmware binary file includes the Secure Boot feature. This binary can be used with pc-q35-rhel7.3.0 and later Q35 machine types only […]’<br>Those machine types are unavailable when using the 1.5.3-based “qemu-kvm” package of base RHEL. They are available only when using the 2.6.0-based “qemu-kvm-rhev” package, which is not part of base RHEL.</p></blockquote></li></ol><p>未完待续……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、UEFI-引导问题&quot;&gt;&lt;a href=&quot;#1、UEFI-引导问题&quot; class=&quot;headerlink&quot; title=&quot;1、UEFI 引导问题&quot;&gt;&lt;/a&gt;1、UEFI 引导问题&lt;/h3&gt;&lt;p&gt;支持 KVM 虚拟机使用 UEFI 引导需要安装 OVMF 组件，参</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="虚拟化" scheme="https://skyhive.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="KVM" scheme="https://skyhive.github.io/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>ESXi 快照机制</title>
    <link href="https://skyhive.github.io/2020/6/ESXi-%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6.html"/>
    <id>https://skyhive.github.io/2020/6/ESXi-%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6.html</id>
    <published>2020-06-17T15:47:50.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://kb.vmware.com/s/article/1015180">Understanding VM Sanpshots in ESXi</a></br><br><a href="https://kknews.cc/code/y5pnlkj.html">VMware vSphere 6.7 虚拟机快照原理及 Veeam Backup 备份</a></br><br><a href="https://docs.vmware.com/cn/VMware-vSphere/6.5/com.vmware.vsphere.virtualsan.doc/GUID-1D6AD25A-459A-43D6-8FF5-52475499D6A2.html">vSAN 中的闪存缓存设备设计注意事项</a></p></blockquote><h3 id="初时虚拟磁盘文件"><a href="#初时虚拟磁盘文件" class="headerlink" title="初时虚拟磁盘文件"></a>初时虚拟磁盘文件</h3><p>ESXi 虚拟机的存储文件主要为 .vmx、.vmsd、.vmdk 等文件，其中对于 .vmdk 文件：</p><ul><li>xx.vmdk：该文件保存的是磁盘的元数据，包括 xx-flat.vmdk 和 xx-ctk.vmdk 文件</li><li>xx-flat.vmdk：该文件为 Extent Description 二级制文件啊，二级制数据保存在此文件中</li><li>xx-ctk.vmdk：该文件为 CTK 文件，CBT（数据块修改跟踪）启动时自动生成</li></ul><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>快照创建过程中，新增以下文件：</p><ul><li>**-000001.vmdk</li><li>**-000001-ctk.vmdk</li><li>**-000001-delta.vmdk（基础 vmdk 上的变更位图）</li><li>**-Snapshot*.vmsn（快照状态文件）</li></ul><h4 id="快照创建过程简单描述如下"><a href="#快照创建过程简单描述如下" class="headerlink" title="快照创建过程简单描述如下"></a>快照创建过程简单描述如下</h4><ol><li>当虚拟机未创建快照时，虚拟机的读写操作直接在 VMDK 文件进行；</li><li>当虚拟机创建第一个快照时，这时生成 **-000001-delta.vmdk 和 **-000001.vmdk 文件，并立即锁住源 VMDK 文件，将其变为只读状态。虚拟机的写操作均在 **-000001.vmdk 上进行，读操作将在 **.vmdk 和 **-000001.vmdk 上进行（具体基于需要读的数据所在位置）；</li><li>再次创建快照的原理和之前一样，生成 **-000002-delta.vmdk 和 **-000002.vmdk 文件，锁住 **-000001.vmdk 文件，将其变为只读状态。</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>对于有用快照的虚拟机做写操作时，均在新的 vmdk 文件进行，如果数据在父 vmdk 上（被锁住成只读的 vmdk），先将数据拷贝到新的 vmdk 上，再进行修改；</li><li>当读取某一块数据时，ESXi 需要判断从哪里去读：对于没有修改的数据块，从父 vmdk 读，对于已经修改的数据块，从新的 vmdk 上读。</li><li>整合多个虚拟机快照时，主机会短暂无响应</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kb.vmware.com/s/article/1015180&quot;&gt;Understanding VM Sanpshots in ESXi&lt;/a&gt;&lt;/br&gt;&lt;br&gt;&lt;a href=&quot;https://kknews.cc/</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="虚拟化" scheme="https://skyhive.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="ESXi" scheme="https://skyhive.github.io/tags/ESXi/"/>
    
  </entry>
  
  <entry>
    <title>基于 CentOS 安装 KVM</title>
    <link href="https://skyhive.github.io/2020/6/%E5%9F%BA%E4%BA%8E-CentOS-%E5%AE%89%E8%A3%85-KVM.html"/>
    <id>https://skyhive.github.io/2020/6/%E5%9F%BA%E4%BA%8E-CentOS-%E5%AE%89%E8%A3%85-KVM.html</id>
    <published>2020-06-10T09:40:03.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h3><p>UEFI 引导或者 Legacy BIOS 引导均可，冲就完事了</p><span id="more"></span><h3 id="安装-KVM-及其依赖"><a href="#安装-KVM-及其依赖" class="headerlink" title="安装 KVM 及其依赖"></a>安装 KVM 及其依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 先把源换了</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 epel 源</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 KVM 以及依赖服务</span></span><br><span class="line">yum install ntp kvm virt-manager virt-top qemu-kvm qemu-kvm-tools libvirt git vim htop</span><br><span class="line">systemctl start libvirtd</span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置 NTP</span></span><br><span class="line">vim /etc/ntp.conf</span><br><span class="line">--------</span><br><span class="line">server ntp.aliyun.com iburst  <span class="comment"># 新增</span></span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line">ntpq -p  <span class="comment"># 检查同步状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 关闭 firewalled selinux</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line">-------</span><br><span class="line">SELINUX=disabled  <span class="comment">#修改</span></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改 grub 引导配置</span></span><br><span class="line">vim /etc/default/grub</span><br><span class="line">-------</span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto spectre_v2=retpoline rd.lvm.lv=centos/root rd.lvm.lv=centos/swap intel_iommu=on rhgb quiet&quot;</span>  <span class="comment"># 开启 intel iommu</span></span><br><span class="line">-------</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>因为环境需要将两个数据口创建 bond4 来使用，以下需要先创建 bond，再将 bond 加入网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装依赖并禁用 NetworkManager</span></span><br><span class="line">yum install -y bridge-utils</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line"></span><br><span class="line"><span class="comment">## eno1 配置文件修改</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno1</span><br><span class="line">----------</span><br><span class="line">DEVICE=<span class="string">&quot;eno1&quot;</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=eno1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond1</span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">----------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## eno2 配置文件修改</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno2</span><br><span class="line">----------</span><br><span class="line">DEVICE=<span class="string">&quot;eno2&quot;</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=eno2</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond1</span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">----------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## bond1 配置添加</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-bond1</span><br><span class="line">----------</span><br><span class="line">TYPE=Bond</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">USERCTL=no</span><br><span class="line">DEVICE=bond1</span><br><span class="line">NAME=bond1</span><br><span class="line">BONDING_MASTER=<span class="built_in">yes</span></span><br><span class="line">BONDING_OPTS=<span class="string">&quot;miimon=100 xmit_hash_policy=layer3+4 mode=4 lacp_rate=1&quot;</span></span><br><span class="line">BRIDGE=br1</span><br><span class="line">----------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## br1 配置添加</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-br1</span><br><span class="line">----------</span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=<span class="variable">$ip</span></span><br><span class="line">NETMASK=<span class="variable">$netmask</span></span><br><span class="line">GATEWAY=<span class="variable">$gateway</span></span><br><span class="line">PEEDNS=<span class="built_in">yes</span></span><br><span class="line">NAME=br1</span><br><span class="line">DEVICE=br1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">DNS1=x.x.x.x</span><br><span class="line">DNS2=x.x.x.x</span><br><span class="line">----------</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 删除默认网桥</span></span><br><span class="line">modprobe bonding</span><br><span class="line">virsh net-destory default</span><br></pre></td></tr></table></figure><h3 id="设置虚拟机支持从-UEFI-启动"><a href="#设置虚拟机支持从-UEFI-启动" class="headerlink" title="设置虚拟机支持从 UEFI 启动"></a>设置虚拟机支持从 UEFI 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">wget http://www.kraxel.org/repos/firmware.repo -O /etc/yum.repos.d/firmware.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y edk2.git-ovmf-x64 OVMF</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 配置 libvirtd</span></span><br><span class="line">vim /etc/libvirt/qemu.conf  <span class="comment"># 新增</span></span><br><span class="line">--------</span><br><span class="line">nvram = [<span class="string">&quot;/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd:/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd&quot;</span>]</span><br><span class="line">--------</span><br><span class="line">systemctl restart libvirtd</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 后面创建虚拟机的时候可以在 firmware 中选择 uefi 了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装操作系统&quot;&gt;&lt;a href=&quot;#安装操作系统&quot; class=&quot;headerlink&quot; title=&quot;安装操作系统&quot;&gt;&lt;/a&gt;安装操作系统&lt;/h3&gt;&lt;p&gt;UEFI 引导或者 Legacy BIOS 引导均可，冲就完事了&lt;/p&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="虚拟化" scheme="https://skyhive.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="KVM" scheme="https://skyhive.github.io/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab EE 版本破解</title>
    <link href="https://skyhive.github.io/2020/5/Gitlab-EE-%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3.html"/>
    <id>https://skyhive.github.io/2020/5/Gitlab-EE-%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3.html</id>
    <published>2020-05-24T15:24:01.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul><li>Ubuntu 16.04</li><li>Ruby 环境（Version ≥2.5）</li></ul><h3 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 确认 ruby 版本最低为 2.5，否则需要升级</span></span><br><span class="line">sudo apt-add-repository ppa:brightbox/ruby-ng</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ruby2.5 ruby2.5-dev</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 安装 gitlab ruby 环境依赖</span></span><br><span class="line">sudo gem install gitlab</span><br><span class="line">sudo gem install gitlab-license</span><br><span class="line">sudo gem install openssl</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>创建 license.rb 文件，并写入一下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">require <span class="string">&#x27;openssl&#x27;</span></span><br><span class="line">require <span class="string">&#x27;gitlab/license&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Generate a key pair. You should do this only once.</span></span><br><span class="line">key_pair = OpenSSL::PKey::RSA.generate(2048)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Write it to a file to use in the license generation application.</span></span><br><span class="line">File.open(<span class="string">&quot;license_key&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(key_pair.to_pem) &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Extract the public key.</span></span><br><span class="line">public_key = key_pair.public_key</span><br><span class="line"><span class="comment"># Write it to a file to ship along with the main application.</span></span><br><span class="line">File.open(<span class="string">&quot;license_key.pub&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(public_key.to_pem) &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># In the license generation application, load the private key from a file.</span></span><br><span class="line">private_key = OpenSSL::PKey::RSA.new File.<span class="built_in">read</span>(<span class="string">&quot;license_key&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = private_key</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Build a new license.</span></span><br><span class="line">license = Gitlab::License.new</span><br><span class="line">  </span><br><span class="line"><span class="comment"># License information to be rendered as a table in the admin panel.</span></span><br><span class="line"><span class="comment"># E.g.: &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class="line"><span class="comment"># Specific keys don&#x27;t matter, but there needs to be at least one.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的用户信息大家可以自行填写</span></span><br><span class="line">license.licensee = &#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>    =&gt; <span class="string">&quot;SkyHive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Company&quot;</span> =&gt; <span class="string">&quot;SkyHive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Email&quot;</span>   =&gt; <span class="string">&quot;skyhive@163.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># The date the license starts.</span></span><br><span class="line"><span class="comment"># Required.</span></span><br><span class="line">license.starts_at         = Date.new(2021, 4, 25) <span class="comment"># license 开始生效时间</span></span><br><span class="line"><span class="comment"># The date the license expires.</span></span><br><span class="line"><span class="comment"># Not required, to allow lifetime licenses.</span></span><br><span class="line">license.expires_at        = Date.new(2049, 4, 25) <span class="comment"># license 到期时间</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># The below dates are hardcoded in the license so that you can play with the</span></span><br><span class="line"><span class="comment"># period after which there are &quot;repercussions&quot; to license expiration.</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># The date admins will be notified about the license&#x27;s pending expiration.</span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.notify_admins_at  = Date.new(2099, 4, 25) <span class="comment"># license 管理员过期提醒时间</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># The date regular users will be notified about the license&#x27;s pending expiration.</span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.notify_users_at   = Date.new(2099, 4, 25) <span class="comment"># license 普通用户过期提醒时间</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># The date &quot;changes&quot; like code pushes, issue or merge request creation</span></span><br><span class="line"><span class="comment"># or modification and project creation will be blocked.</span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.block_changes_at  = Date.new(2049, 5, 7)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Restrictions bundled with this license.</span></span><br><span class="line"><span class="comment"># Not required, to allow unlimited-user licenses for things like educational organizations.</span></span><br><span class="line">license.restrictions  = &#123;</span><br><span class="line">  <span class="comment"># The maximum allowed number of active users.</span></span><br><span class="line">  <span class="comment"># Not required.</span></span><br><span class="line">  active_user_count: 10000  <span class="comment"># license 人数配额</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># We don&#x27;t currently have any other restrictions, but we might in the future.</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">puts <span class="string">&quot;License:&quot;</span></span><br><span class="line">puts license</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Export the license, which encrypts and encodes it.</span></span><br><span class="line">data = license.export</span><br><span class="line">  </span><br><span class="line">puts <span class="string">&quot;Exported license:&quot;</span></span><br><span class="line">puts data</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Write the license to a file to send to a customer.</span></span><br><span class="line">File.open(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(data) &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># In the customer&#x27;s application, load the public key from a file.</span></span><br><span class="line">public_key = OpenSSL::PKey::RSA.new File.<span class="built_in">read</span>(<span class="string">&quot;license_key.pub&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = public_key</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Read the license from a file.</span></span><br><span class="line">data = File.<span class="built_in">read</span>(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>)  <span class="comment"># 生成license存储文件名</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Import the license, which decodes and decrypts it.</span></span><br><span class="line"><span class="variable">$license</span> = Gitlab::License.import(data)</span><br><span class="line">  </span><br><span class="line">puts <span class="string">&quot;Imported license:&quot;</span></span><br><span class="line">puts <span class="variable">$license</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Quit if the license is invalid</span></span><br><span class="line">unless <span class="variable">$license</span></span><br><span class="line">  raise <span class="string">&quot;The license is invalid.&quot;</span></span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Quit if the active user count exceeds the allowed amount:</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.restricted?(:active_user_count)</span><br><span class="line">  active_user_count = 1000</span><br><span class="line">  <span class="keyword">if</span> active_user_count &gt; <span class="variable">$license</span>.restrictions[:active_user_count]</span><br><span class="line">    raise <span class="string">&quot;The active user count exceeds the allowed amount!&quot;</span></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Show admins a message if the license is about to expire.</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.notify_admins?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on #&#123;<span class="variable">$license</span>.expires_at&#125;.&quot;</span></span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Show users a message if the license is about to expire.</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.notify_users?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on #&#123;<span class="variable">$license</span>.expires_at&#125;.&quot;</span></span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Block pushes when the license expired two weeks ago.</span></span><br><span class="line">module Gitlab</span><br><span class="line">  class GitAccess</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    def check(cmd, changes = nil)</span><br><span class="line">      <span class="keyword">if</span> <span class="variable">$license</span>.block_changes?</span><br><span class="line">        <span class="built_in">return</span> build_status_object(<span class="literal">false</span>, <span class="string">&quot;License expired&quot;</span>)</span><br><span class="line">      end</span><br><span class="line">  </span><br><span class="line">      <span class="comment"># Do other Git access verification</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">    end</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Show information about the license in the admin panel.</span></span><br><span class="line">puts <span class="string">&quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class="line"><span class="variable">$license</span>.licensee.each <span class="keyword">do</span> |key, value|</span><br><span class="line">  puts <span class="string">&quot;#&#123;key&#125;: #&#123;value&#125;&quot;</span></span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.expired?</span><br><span class="line">  puts <span class="string">&quot;The license expired on #&#123;<span class="variable">$license</span>.expires_at&#125;&quot;</span></span><br><span class="line">elsif <span class="variable">$license</span>.will_expire?</span><br><span class="line">  puts <span class="string">&quot;The license will expire on #&#123;<span class="variable">$license</span>.expires_at&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;The license will never expire.&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 执行 license.rb 脚本</span></span><br><span class="line">ruby license.rb</span><br><span class="line">  </span><br><span class="line"><span class="comment">## 执行脚本后目录当前会生成三个文件</span></span><br><span class="line"><span class="comment"># GitLabBV.gitlab-license 为 GitLab License 文件</span></span><br><span class="line"><span class="comment"># license_key.pub 为自签名的公钥</span></span><br><span class="line"><span class="comment"># licens_key 为自签名的私钥</span></span><br></pre></td></tr></table></figure><h4 id="更换证书，添加-license"><a href="#更换证书，添加-license" class="headerlink" title="更换证书，添加 license"></a>更换证书，添加 license</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 替换证书</span></span><br><span class="line"><span class="comment"># 将上一步生成的公钥文件 license_key.pub 替换 GitLab 服务器中的 /opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub 文件</span></span><br><span class="line">gitlab-ctl restart  <span class="comment"># 重启 GitLab</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 删除数据库中原 license 记录</span></span><br><span class="line">su - gitlab-psql</span><br><span class="line">psql -h /var/opt/gitlab/postgresql -d gitlabhq_production</span><br><span class="line">delete from licenses <span class="built_in">where</span> <span class="built_in">id</span> = 1;   <span class="comment"># 如果有多条记录就都删掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 添加 license</span></span><br><span class="line"><span class="comment"># 将上一步生成的 GitLabBV.gitlab-license 导入 GitLab 即可</span></span><br></pre></td></tr></table></figure><h4 id="修改-GitLab-等级"><a href="#修改-GitLab-等级" class="headerlink" title="修改 GitLab 等级"></a>修改 GitLab 等级</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 默认的 EE 版等级肯定不能满足我们，这一波直接拉满</span></span><br><span class="line">vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb</span><br><span class="line">--------</span><br><span class="line">restricted_attr(:plan).presence || ULTIMATE_PLAN   <span class="comment">#修改</span></span><br><span class="line">--------</span><br><span class="line">gitlab-ctl restart      <span class="comment"># 重启 GitLab</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;环境信息&quot;&gt;&lt;a href=&quot;#环境信息&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;Ruby 环境（Version ≥2.5）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;破解过程&quot;&gt;&lt;a href=&quot;#破解过程&quot; class=&quot;headerlink&quot; title=&quot;破解过程&quot;&gt;&lt;/a&gt;破解过程&lt;/h3&gt;&lt;h4 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 确认 ruby 版本最低为 2.5，否则需要升级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-add-repository ppa:brightbox/ruby-ng&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install ruby2.5 ruby2.5-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 安装 gitlab ruby 环境依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install gitlab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install gitlab-license&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install openssl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="GitLab" scheme="https://skyhive.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>DNS 缓存清理</title>
    <link href="https://skyhive.github.io/2020/4/DNS%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86.html"/>
    <id>https://skyhive.github.io/2020/4/DNS%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86.html</id>
    <published>2020-04-01T04:34:22.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-下清理"><a href="#Windows-下清理" class="headerlink" title="Windows 下清理"></a>Windows 下清理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理员身份运行 cmd</span></span><br><span class="line"> </span><br><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Linux-下清理"><a href="#Linux-下清理" class="headerlink" title="Linux 下清理"></a>Linux 下清理</h2><p>Linux DNS 缓存和 Windows 有些许不同，大部分的 Linux 是没有系统级缓存的，所以通过一些进程便可以达到清理 DNS 缓存的目的以下一份来自 StackOverflow 的解答：</p><blockquote><p>On Linux (and probably most Unix), there is no OS-level DNS caching unless nscd is installed and running. Even then, the DNS caching feature of nscd is disabled by default at least in Debian because it’s broken. The practical upshot is that your linux system very very probably does not do any OS-level DNS caching.<br>You can look around in the resolv subdirectory of the glibc source code, it’s all there. That’s not a specific answer, I realize, but it comes down to the fact that there’s no code in there that implements a cache and in any case you can see if you trace it that it makes no use of any file or shared memory segment or other kind of location where this cache could potentially be stored.</p></blockquote><p>Linux 下的 DNS 守护进程大多为 nscd、dnsmasq、systemd-resolved 等</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## nscd 三种操作均可</span></span><br><span class="line">sudo <span class="string">/etc/init.d/nscd</span> restart</span><br><span class="line">sudo systemctl restart nscd</span><br><span class="line">sudo systemctl <span class="keyword">reload</span> nscd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## dnsmasq 两种操作均可</span></span><br><span class="line">sudo <span class="string">/etc/init.d/dnsmasq</span> restart</span><br><span class="line">sudo systemctl restart dnsmasq</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## systemd-resolved</span></span><br><span class="line">sudo systemd-resolve <span class="params">--flush-caches</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## 除此之外，还可以使用 dns-clean 来进行清理</span></span><br><span class="line">sudo <span class="string">/etc/init.d/dns-clean</span> start</span><br></pre></td></tr></table></figure><h2 id="浏览器-DNS-缓存清理"><a href="#浏览器-DNS-缓存清理" class="headerlink" title="浏览器 DNS 缓存清理"></a>浏览器 DNS 缓存清理</h2><ul><li>chrome</li></ul><ol><li>地址栏输入 chrome:&#x2F;&#x2F;net-internals&#x2F;#dns</li><li>点击 “清除主机缓存&#x2F;Clear Host Cache”</li><li>如果上述步骤不行的话，按下 CTRL+Shift+Del 打开“清除浏览数据”对话框</li><li>选择时间范围（选择“所有时间”）</li><li>选中 “Cookie 和其他站点数据” 和 “缓存的图像和文件”</li><li>点击 “清除数据”</li></ol><ul><li>FireFox</li></ul><ol><li>点击右上角 Firefox 菜单</li><li>点击 Options（Preference）</li><li>点击左侧 “隐私和安全性” 或 “隐私” 选项卡</li><li>滚动到 History 部分，点击 “Clear History”</li><li>选择所有框，点击 “立即清除”</li><li>如果上述步骤不管用，在地址栏中输入 about:config</li><li>搜索 network.dnsCacheExpiration，将值暂时设置为 0，然后点击 “确定” 后在恢复默认值，点击 “确定”</li><li>搜索 network.dnsCacheEntries，将值暂时设置为 0，然后点击 “确定” 后在恢复默认值，点击 “确定”</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Windows-下清理&quot;&gt;&lt;a href=&quot;#Windows-下清理&quot; class=&quot;headerlink&quot; title=&quot;Windows 下清理&quot;&gt;&lt;/a&gt;Windows 下清理&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 管理员身份运行 cmd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipconfig /flushdns&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="DNS" scheme="https://skyhive.github.io/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>Ext4 文件系统缩容</title>
    <link href="https://skyhive.github.io/2019/10/Ext4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%A9%E5%AE%B9.html"/>
    <id>https://skyhive.github.io/2019/10/Ext4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%A9%E5%AE%B9.html</id>
    <published>2019-10-31T04:32:00.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<p>由于 <code>XFS</code> 文件系统不支持缩容，所以这里只讨论 <code>Ext4</code> 缩容的情况。</p><p><code>Ext4</code> 文件系统调整的命令为 <code>resize2fs</code>，在使用这个命令前，我们需要将我们需要缩容的文件系统所在分区进行调整，由于 <code>LVM</code> 的调整相对简单，这里不做描述。</p><p>如果需要调整的分区非系统盘，则可以直接先卸载已挂载的文件系统，然后进行操作；若需要调整的分区在系统盘上，则需要进入 <code>LiveCD</code> 的 <code>shell</code> 环境进行操作。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## 文件系统缩容</span></span><br><span class="line">e2fsck -f <span class="regexp">/dev/</span>sda4</span><br><span class="line">resize2fs <span class="regexp">/dev/</span>sda4 &lt;想要变成的大小&gt;（如 <span class="number">200</span>G）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">## 缩小分区</span></span><br><span class="line">fdisk <span class="regexp">/dev/</span>sda</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 键入 p 查看当前分区信息，记下要缩小的分区的 start 值</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 键入 d 选择要删除的分区</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 键入 n 新建分区，确认 start 值为刚刚原分区记录下来的 start 值</span></span><br><span class="line"><span class="comment"># end 设置为 +&lt;你想要的大小&gt;（如 +200G）</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 键入 p 确认分区大小没有问题后，键入 w 保存退出</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重新 resize 文件系统</span></span><br><span class="line">resize2fs <span class="regexp">/dev/</span>sda4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于 &lt;code&gt;XFS&lt;/code&gt; 文件系统不支持缩容，所以这里只讨论 &lt;code&gt;Ext4&lt;/code&gt; 缩容的情况。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ext4&lt;/code&gt; 文件系统调整的命令为 &lt;code&gt;resize2fs&lt;/code&gt;，在使用这个命令前，我们需要将我</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Filesystem" scheme="https://skyhive.github.io/tags/Filesystem/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab单节点服务搭建</title>
    <link href="https://skyhive.github.io/2019/7/Gitlab%E5%8D%95%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA.html"/>
    <id>https://skyhive.github.io/2019/7/Gitlab%E5%8D%95%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA.html</id>
    <published>2019-07-25T04:25:01.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><p>根据官方提供的说法，小规模使用 GitLab 只用单机部署即可，4C8G 的配置足够小一百人使用 Git，由于本次也只是熟悉一下 GitLab 的搭建过程和各组件之间的关系，所以就使用低配的虚拟机进行搭建了。</p><h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><table><thead><tr><th>CPU</th><th>内存</th><th>硬盘</th></tr></thead><tbody><tr><td>4*vCPU</td><td>8GB</td><td>200GB</td></tr></tbody></table><span id="more"></span><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span></span><br><span class="line">sudo apt install curl openssh-<span class="keyword">server</span> ca-certificates postfix</span><br></pre></td></tr></table></figure><h3 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition https:<span class="regexp">//</span>packages.gitlab.com<span class="regexp">/gitlab/gi</span>tlab-ce<span class="regexp">/packages/u</span>buntu<span class="regexp">/xenial/gi</span>tlab-ce_12.<span class="number">0.1</span>-ce.<span class="number">0</span>_amd64.deb/download.deb<span class="comment">## 下载官方 deb 包</span></span><br><span class="line">sudo dpkg -i gitlab-ce_12.<span class="number">0.1</span>-ce.<span class="number">0</span>_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment">## 卸载原有 nginx</span></span><br><span class="line">sudo apt purge nginx-common nginx-full</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改域名配置</span></span><br><span class="line">sudo vim <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">external_url=<span class="string">&#x27;your domain_name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置生效</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>汉化的步骤实际上没有太大比较，GitLab 的汉化一直做的比较“晦涩难懂”，不如直接英语界面来的舒服。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 去 https://gitlab.com/xhang/gitlab 找到对应版本的分支</span></span><br><span class="line">wget https:<span class="regexp">//gi</span>tlab.com<span class="regexp">/xhang/gi</span>tlab<span class="regexp">/-/</span>archive<span class="regexp">/v12.0.1/gi</span>tlab-v12.<span class="number">0.1</span>.tar.gz</span><br><span class="line">tar -zxvf gitlab-v12.<span class="number">0.1</span>.tar.gz <span class="comment">## 解压</span></span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl stop <span class="comment">## gitlab 停止服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 备份 gitlab-rails 目录，该目录下主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。</span></span><br><span class="line">sudo tar zcvf <span class="regexp">/opt/gi</span>tlab<span class="regexp">/embedded/</span>service<span class="regexp">/gitlab-rails-bak.tar.gz /</span>opt<span class="regexp">/gitlab/</span>embedded<span class="regexp">/service/gi</span>tlab-rails </span><br><span class="line"><span class="comment">## 汉化包覆盖</span></span><br><span class="line">sudo cp -rf ~<span class="regexp">/gitlab-v12.0.1/</span>* <span class="regexp">/opt/gi</span>tlab<span class="regexp">/embedded/</span>service<span class="regexp">/gitlab-rails/</span></span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl start <span class="comment">## GitLab 启动服务</span></span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl reconfigure <span class="comment">## 重新配置</span></span><br></pre></td></tr></table></figure><h3 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 查看 GitLab 状态</span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line"></span><br><span class="line">## 查看 GitLab 版本</span><br><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line"></span><br><span class="line">## GitLab 停止服务</span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"></span><br><span class="line">## GitLab 启动服务</span><br><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;搭建准备&quot;&gt;&lt;a href=&quot;#搭建准备&quot; class=&quot;headerlink&quot; title=&quot;搭建准备&quot;&gt;&lt;/a&gt;搭建准备&lt;/h2&gt;&lt;p&gt;根据官方提供的说法，小规模使用 GitLab 只用单机部署即可，4C8G 的配置足够小一百人使用 Git，由于本次也只是熟悉一下 GitLab 的搭建过程和各组件之间的关系，所以就使用低配的虚拟机进行搭建了。&lt;/p&gt;
&lt;h3 id=&quot;虚拟机配置&quot;&gt;&lt;a href=&quot;#虚拟机配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟机配置&quot;&gt;&lt;/a&gt;虚拟机配置&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;内存&lt;/th&gt;
&lt;th&gt;硬盘&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;4*vCPU&lt;/td&gt;
&lt;td&gt;8GB&lt;/td&gt;
&lt;td&gt;200GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="GitLab" scheme="https://skyhive.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>美版 V30 系统升级</title>
    <link href="https://skyhive.github.io/2018/10/%E7%BE%8E%E7%89%88V30%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7.html"/>
    <id>https://skyhive.github.io/2018/10/%E7%BE%8E%E7%89%88V30%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7.html</id>
    <published>2018-10-05T04:52:41.000Z</published>
    <updated>2023-12-04T05:40:31.983Z</updated>
    
    <content type="html"><![CDATA[<p>关于国行版本的 Andorid 手机的系统升级，肯定是没有什么问题的，连了网升就完事儿了；但是非国行版本的呢？会有一点小问题。</p><p>前两天刚入手了一款次次旗舰 LG V30，去年的旗舰835，4+64的配置今年已然跌倒了千元来搞基的价位，果断入手了。说是要搞基，但是作为一个老年人，实在是懒得折腾了，某鱼的老板说韩版卖断货了，近期只有一款美版的 H932 支持移动全频段，就入手了。</p><p>到手稍微检查了一下，一切正常，梯子挂上美滋滋，但是出现了一个奇怪的问题——系统更新下载不下来。当时的网络状态是挂了梯子的，但是由于 Google 在系统上做的一些安全机制，导致挂了梯子（即网络流量被监控）的机器的系统更新了的流量不从梯子上走，所以会一直卡在 System Update Downloading。</p><p>解决的办法有三个：</p><span id="more"></span><ol><li><p>肉身翻墙</p></li><li><p>路由器翻墙</p></li><li><p>用一台翻墙的机器将网络共享给你的手机</p></li></ol><p>  前两个方法对于大多数人来说还是比较困难的，正常人一般都是直接挂梯子，路由器翻墙虽然很多人家里都有设置，但是如果是在公共网络环境下的话，只能使用第三种方法（刷机除外）。</p><p>步骤很简单：</p><ul><li>一台机器挂上 SS&#x2F;SSR （我这里是用电脑，手机我觉得也是可以的）</li><li>挂上梯子的这台机器的 SS&#x2F;SSR 选项勾选 <code>允许来自局域网的连接</code><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%85%81%E8%AE%B8%E6%9D%A5%E8%87%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9A%84%E8%BF%9E%E6%8E%A5.png" alt="允许来自局域网的连接.png"></li><li>查看本机的局域网 IP ，并记住</li><li>手机连上和翻墙的机器同一个局域网，在 WiFi 的高级选项中，设置代理</li><li>代理设置为手动，代理主机为翻墙机器的局域网 IP，端口号为1080（上一步中有），保存即可<br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FWiFi%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="WiFi 代理设置"></li></ul><p>至此，我们就已经成功地不在手机上挂梯子也能翻墙了（MDZZ），下面就能愉快的更新啦！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于国行版本的 Andorid 手机的系统升级，肯定是没有什么问题的，连了网升就完事儿了；但是非国行版本的呢？会有一点小问题。&lt;/p&gt;
&lt;p&gt;前两天刚入手了一款次次旗舰 LG V30，去年的旗舰835，4+64的配置今年已然跌倒了千元来搞基的价位，果断入手了。说是要搞基，但是作为一个老年人，实在是懒得折腾了，某鱼的老板说韩版卖断货了，近期只有一款美版的 H932 支持移动全频段，就入手了。&lt;/p&gt;
&lt;p&gt;到手稍微检查了一下，一切正常，梯子挂上美滋滋，但是出现了一个奇怪的问题——系统更新下载不下来。当时的网络状态是挂了梯子的，但是由于 Google 在系统上做的一些安全机制，导致挂了梯子（即网络流量被监控）的机器的系统更新了的流量不从梯子上走，所以会一直卡在 System Update Downloading。&lt;/p&gt;
&lt;p&gt;解决的办法有三个：&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://skyhive.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="Network" scheme="https://skyhive.github.io/tags/Network/"/>
    
    <category term="Android" scheme="https://skyhive.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>修改sudoers文件导致sudo无法使用的解决办法</title>
    <link href="https://skyhive.github.io/2018/8/%E4%BF%AE%E6%94%B9sudoers%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4sudo%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>https://skyhive.github.io/2018/8/%E4%BF%AE%E6%94%B9sudoers%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4sudo%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</id>
    <published>2018-08-08T14:09:41.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为修改过<code>/etc/sudoers</code>文件，有个地方语法错误，导致修改完成之后<code>sudo</code>命令无法使用</p><p>网上搜过很多解决办法，大都是重启进入单用户模式，以Root用户的身份修改<code>sudoers</code>文件，解决原本的语法错误。但是这个方法的硬条件是需要重启进入单用户模式，但是有的时候我们是以<code>ssh</code>的方式登录到LInux机器上去的，所以相应的也会有不需要重启的操作就能解决这种问题，当然这种操作也有一个硬条件——Linux上已经安装了<code>Pkttyagent</code>和<code>pkexec</code>，我并不知道这两个软件是不是所有Llinux系统都预装，所以大家都自己拿捏一下。</p><p>那么进入正题</p><p>首先，我们需要开两个session连接到Linux机器上</p><p>第一步：在以第一个session上输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $$</span><br></pre></td></tr></table></figure><p>得到你目前Bash的PID。</p><p>第二步：在第二个session上输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkttyagent --process pid #这里的pid是上一步获取到的，直接复制过来就好了</span><br></pre></td></tr></table></figure><p>第三步：回到第一个session中，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkexec visudo</span><br></pre></td></tr></table></figure><p>第四步：回到第二个session，你会发现Bash提示你进行权限认证，输入密码后，再回到第一个session</p><p>第五步：回到第一个session后就是我们熟悉的visudo界面啦，下面的操作大家心里都有数了</p><p><strong>总结一下，没事不要乱改和sudo有关的任何东西，会出事，绝逼会出事</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前因为修改过&lt;code&gt;/etc/sudoers&lt;/code&gt;文件，有个地方语法错误，导致修改完成之后&lt;code&gt;sudo&lt;/code&gt;命令无法使用&lt;/p&gt;
&lt;p&gt;网上搜过很多解决办法，大都是重启进入单用户模式，以Root用户的身份修改&lt;code&gt;sudoers&lt;/cod</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Linux" scheme="https://skyhive.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Dell 7559 升级</title>
    <link href="https://skyhive.github.io/2018/6/SSD%E4%B8%8E%E5%86%85%E5%AD%98%E6%9D%A1%E7%9A%84%E6%95%85%E4%BA%8B.html"/>
    <id>https://skyhive.github.io/2018/6/SSD%E4%B8%8E%E5%86%85%E5%AD%98%E6%9D%A1%E7%9A%84%E6%95%85%E4%BA%8B.html</id>
    <published>2018-06-05T09:25:26.000Z</published>
    <updated>2023-12-04T05:00:44.253Z</updated>
    
    <content type="html"><![CDATA[<p>昨天刚和杨老板达成了 PY 交易，今天货就到了，还真是快啊。淘宝链接我就不给了，大家自行搜索<code>内存之家</code>（原<code>配件之家</code>），粉丝数很少的那个就是了。</p><span id="more"></span><h4 id="开箱与安装"><a href="#开箱与安装" class="headerlink" title="开箱与安装"></a>开箱与安装</h4><p>本次的产品是一张 WD 的<code>Green Sata SSD M.2 2280</code> 120G版本的，还有一张海力士的 8G DDR3L 1600 的内存。至于为什么 SSD 和内存不买好一点的呢，其实是因为我这台是 15 年的本子，也不想给他上太好的 SSD 和内存了，而且为了和原来的内存保持同一频率，所以只能上了 DDR3L 的条子，反正过不了几年就隐退二线了。</p><p>下面进行开箱<br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E4%B8%AD%E9%97%B4%E4%B8%A4%E4%B8%AA%E5%B0%B1%E6%98%AF%E4%BB%8A%E5%A4%A9%E7%9A%84%E4%B8%BB%E8%A7%92%E5%95%A6.jpg" alt="中间这两个就是今天的主角啦"><br>真的是让人眼前一绿啊。</p><p>这台老机子是<code>Dell Inspiron 7559</code>，也就是传说中的游匣，只不过比较古老了。不过好处呢就是D面只有一颗螺丝，拆起来非常的方便。一如既往的，我把电池留在本子上就开始装内存条和SSD了（不要问我哪儿来的勇气，我也不知道）。</p><h4 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h4><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>首先内存并没有什么问题，正常开机后Bios提示我内存更换过，不鸟他继续进入系统。系统也是顺利的读取出了新的内存，并没有发生不兼容的情况。</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FCPU_Z%E7%9A%84%E6%95%B0%E6%8D%AE.png" alt="CPU-Z 数据"></p><p><em>其实之前我的内存就是一根金士顿和一根海力士的组合，所以这次还是海力士应该不会翻车</em></p><p>下面我们来做一下内存的读写测试</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%B5%8B%E8%AF%95.png" alt="内存读写测试"></p><p>可以看到给出的<code>Read</code>数据为<code>23308 MB/s</code>，<code>Write</code>数据为<code>23556 MB/s</code>，<code>Copy</code>数据为<code>23069 MB/s</code>，这个数据在DDR3L 的笔记本内存上来说也算是客观的了。不过使用体验这种东西也不能只看数据，还得看实际使用。</p><h5 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h5><p>包装盒上只给了我<code>545 MB/s</code>的读取速度，我又去网上搜了下，给出的写入速度是<code>400~500 MB/s</code>的样子，下面我们测一下看看</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FSSD_Read%E6%B5%8B%E8%AF%95.jpg" alt="SSD Read 测试"><br><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2FSSD_Random_Write%E6%B5%8B%E8%AF%95.jpg" alt="SSD Random Write 测试"></p><p>emmmmm，一部分原因是我硬件没有能够把SSD全部性能带出来，另一部分原因也是这张条子有一定的缩水，大家心知肚明就好。(当年不懂顺序读写和随机读写的区别，误以为 400~500 MB&#x2F;s 是随机性能)</p><p>我们来迁移系统（不要问我为什么不重装系统，就是懒）再测一次看看</p><p><img src="https://skyhive-blog-1252738260.cos.ap-shanghai.myqcloud.com/pic%2F%E8%BF%81%E7%A7%BB%E5%AE%8C%E7%B3%BB%E7%BB%9F%E5%90%8E.png" alt="迁移系统后"></p><p>诶？性能怎么又上来了？</p><p>**不好意思，测试数据我用的是<code>50MiB</code>**（皮这一下还挺开心😄）</p><p><strong>实际上迁移系统对SSD的性能还是有影响的，所以大家最好不要偷懒学我迁移系统，最好就是重装比较好。</strong></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>电脑没有装喜闻乐见的娱乐大师，所以就没有跑分了。</p><p>至于你们想要的开机启动时间，没有装管家也没有装卫士，又让你们失望了。</p><p>不过开机时间比以前少了，但是应该赶不上主流的SSD。自从装了双系统开机就变得极慢无比，按道理来说双系统应该和开机速度没有关系才对；前段时间更新了<code>win10</code> 的春季创意者更新之后开机就更加尿崩了，所以才入手了一块SSD。</p><p>说到开机，目前有一个小问题，Bios一旦开启<code>Secure Boot</code>就炸了，<code>Windows</code>和<code>Ubuntu</code>都进不去，至今未解决。（实际上是因为当年的 Ubuntu 还不支持 Secure Boot，多数主板还不认 Linux 的签名）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天刚和杨老板达成了 PY 交易，今天货就到了，还真是快啊。淘宝链接我就不给了，大家自行搜索&lt;code&gt;内存之家&lt;/code&gt;（原&lt;code&gt;配件之家&lt;/code&gt;），粉丝数很少的那个就是了。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://skyhive.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="Laptop" scheme="https://skyhive.github.io/tags/Laptop/"/>
    
  </entry>
  
  <entry>
    <title>解决 Ubuntu 下搜狗拼音候选词乱码</title>
    <link href="https://skyhive.github.io/2018/5/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8B%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E5%80%99%E9%80%89%E8%AF%8D%E4%B9%B1%E7%A0%81.html"/>
    <id>https://skyhive.github.io/2018/5/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8B%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E5%80%99%E9%80%89%E8%AF%8D%E4%B9%B1%E7%A0%81.html</id>
    <published>2018-05-29T05:15:26.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<p>今天Ubuntu系统下的搜狗拼音突然抽疯了，中文输入的时候候选词区域都是全是一串无意义的英文字母，不知道是不是因为对Linux系统的支持问题还是怎么回事，解决办法也很简单，就是删除搜狗的配置文件，重新登录就好了，只是需要重新设置原来的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.config</span><br><span class="line">rm -rf SogouPY* sogou*</span><br></pre></td></tr></table></figure><p>别忘了注销再登录哦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天Ubuntu系统下的搜狗拼音突然抽疯了，中文输入的时候候选词区域都是全是一串无意义的英文字母，不知道是不是因为对Linux系统的支持问题还是怎么回事，解决办法也很简单，就是删除搜狗的配置文件，重新登录就好了，只是需要重新设置原来的配置&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Linux" scheme="https://skyhive.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://skyhive.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>关于 Ubuntu 循环登录界面</title>
    <link href="https://skyhive.github.io/2018/4/%E5%85%B3%E4%BA%8EUbuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.html"/>
    <id>https://skyhive.github.io/2018/4/%E5%85%B3%E4%BA%8EUbuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.html</id>
    <published>2018-04-20T04:36:21.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<p>其实事情的起因很奇怪，前两天一直想升级Ubuntu 18.04，不知道为什么17.10用着怪怪的，但是18.04又要到4月26号才发布，没有办法了只能Beta 2先用着试试了。</p><p>然后就是一顿正常的操作</p><span id="more"></span><h4 id="从Ubuntu-17-10-升级到-18-04-Beta-2"><a href="#从Ubuntu-17-10-升级到-18-04-Beta-2" class="headerlink" title="从Ubuntu 17.10 升级到 18.04 Beta 2"></a>从Ubuntu 17.10 升级到 18.04 Beta 2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先将当前系统更新</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后升级系统</span></span><br><span class="line">sudo do-release-upgrade -d</span><br></pre></td></tr></table></figure><p>然后就让系统自己去下载安装了，不过中途我在终端提示中看到了某个什么东西不可用，当然我也没有在意，估计更新到了正式版系统就没事了吧，结果这就埋下了伏笔。</p><h4 id="卡在了启动界面"><a href="#卡在了启动界面" class="headerlink" title="卡在了启动界面"></a>卡在了启动界面</h4><p>没错，就是那个带着Ubuntu logo，然后logo下面还有几个小点点的那个界面，卡的死死的。ESC之后显示的状态应该是这样的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[Started]</span> Gnome <span class="attribute">Display</span> Manage</span><br></pre></td></tr></table></figure><p>然后我当机立断的去Google了一下，不知道在哪里看到了一个答案是要进Recovery mode修复一下dpkg，做完之后我觉得这并不够，开在启动界面的事情我第一次装Ubuntu也是遇到过，我知道是显卡驱动的问题，然后不知道在哪看到的方法，把我Nvidia驱动给卸载掉了。</p><blockquote><p>第一次装Ubuntu遇到这问题，解决的办法是在Ubuntu 高级选项中，对需要引导的内核按e进行编辑，在 <code>quiet splash </code>那一行后面加上<code>acpi_osi=linux nomodeset</code>，这个是针对N卡的，如果是A卡或者Intel核显有对应的解决办法</p></blockquote><h4 id="Ubuntu-Login-Loop"><a href="#Ubuntu-Login-Loop" class="headerlink" title="Ubuntu Login Loop"></a>Ubuntu Login Loop</h4><p>重启之后确实能度过了logo的那一关，但是新的问题又来了，这次能达到登录的界面，但是输入密码登录之后会黑屏一下又回到登录界面。</p><p>这个<code>Ubuntu Login Loop</code>的问题已经不新鲜了，之前每个版本都有人遇到过，而且引起的原因也各不相同，这次我遇到了这个坑就来稍微的总结一下</p><ul><li><p><code>.Xauthority</code>文件的所有人和所有组变成了root：在你用户的主目录下有一个<code>.Xauthority</code>文件，用<code>ls -la</code>查看一下该文件的所有人和所有组，如果是root的话那么需要将其改为你的登录用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown username:username .Xauthority</span><br></pre></td></tr></table></figure></li><li><p><code>/tmp</code>权限：用<code>ls -ld</code>查看一下<code>/tmp</code>的权限是否是<code>drwxrwxrwxt</code>，否则就将其权限修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+wt /tmp</span><br></pre></td></tr></table></figure></li><li><p>当然还有就是显卡驱动惹的祸：网上大部分人都是更新了显卡驱动才一直循环登录界面，而我就比较特殊了，我是卸载了显卡驱动，不过解决办法都是一样，就是重装显卡驱动呗</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">完全卸载N卡驱动</span></span><br><span class="line">sudo apt remove --purge nvidia*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭图形界面</span></span><br><span class="line">sudo service lightdm stop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁用nouveau驱动</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在/etc/modprobe.d/blacklist.conf中加入如下内容：</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后执行</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Nvidia驱动</span></span><br><span class="line">sudo add-apt-repository ppa:xorg-edgers/ppa #添加ppa源</span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa #添加ppa源</span><br><span class="line">sudo apt update #更新apt-get</span><br><span class="line">sudo apt install nvidia-375</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最后别忘了打开图形化界面</span></span><br><span class="line">sudo service lightdm start</span><br></pre></td></tr></table></figure><p>由于我的显卡是GTX 960M，参考了一下网友们安装的是375的显卡驱动，等我安装完成后，系统提醒我显卡驱动太低级需要升级，没有办法还是升到了390，然后重启一下，输入密码又回到了熟悉的图形化界面</p></li></ul><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>当然login loop的原因不止这些，有时候<code>/etc/profile</code>中改了或者加了些东西导致这些古怪的问题，所以我们需要对症下药。正确的做法是要先去查看主目录下<code>.xsession-errors</code>日志的报错信息，从而去判断原因。</p><p>什么？你问我图形化界面进不去怎么做那么多操作？图形化进不去，还有命令行啊，我的图形化是tty1，以上操作都是在tty5中进行的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实事情的起因很奇怪，前两天一直想升级Ubuntu 18.04，不知道为什么17.10用着怪怪的，但是18.04又要到4月26号才发布，没有办法了只能Beta 2先用着试试了。&lt;/p&gt;
&lt;p&gt;然后就是一顿正常的操作&lt;/p&gt;</summary>
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Linux" scheme="https://skyhive.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://skyhive.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>初探 Django 需要注意的事项</title>
    <link href="https://skyhive.github.io/2018/3/%E5%88%9D%E6%8E%A2Django%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B%E9%A1%B9.html"/>
    <id>https://skyhive.github.io/2018/3/%E5%88%9D%E6%8E%A2Django%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B%E9%A1%B9.html</id>
    <published>2018-03-25T12:55:33.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<h4 id="更改默认数据库为-MySQL"><a href="#更改默认数据库为-MySQL" class="headerlink" title="更改默认数据库为 MySQL"></a>更改默认数据库为 MySQL</h4><p>Django 使用的默认数据库是 SQLite3，如果习惯使用的是 SQLite 的用户就可以不必更换数据库。</p><p>更换数据库的话在<code>settings.py</code>文件中<code>DATABASES</code>选项中进行更改</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;项目对应的数据库名称&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;登录mysql的帐户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;登录mysql的密码&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">#由于是在本地开发，所以是127.0.0.1</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span><span class="comment">#这里mysql使用的是默认的3306端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置-Templates-的路径"><a href="#设置-Templates-的路径" class="headerlink" title="设置 Templates 的路径"></a>设置 Templates 的路径</h4><p>在<code>settings.py</code>文件中的<code>TEMPLATES</code>选项中进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)]</span><br></pre></td></tr></table></figure><p>其中<code>BASE_DIR</code>是项目的绝对路径，设置过<code>Templates</code>路径之后<code>Django</code>会在改路径下的<code>templates</code>文件夹下搜索对应的<code>html</code>文件。</p><h4 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h4><p><code>settings.py</code>最后有个选项为<code>LANGUAGE_CODE</code>，这个选项是设置<code>Django</code>语言的。<code>Django</code>为我们提供了很多自带的应用，如果习惯了看英文的话可以不用设置，直接使用默认的英语，如果英语看着膈应的话，可以设置为中文<code>zh-hans</code>或者<code>zh_Hans</code></p><h4 id="添加创建的应用"><a href="#添加创建的应用" class="headerlink" title="添加创建的应用"></a>添加创建的应用</h4><p>当你新建应用之后要记得在<code>settings.py</code>中的<code>INSTALLED_APPS</code>选项中添加新建的应用——直接在最后一行添加新建的应用名就好了。</p><h4 id="修改数据默认显示名称"><a href="#修改数据默认显示名称" class="headerlink" title="修改数据默认显示名称"></a>修改数据默认显示名称</h4><p>在创建的数据类下面添加一个方法，根据Python的版本进行选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python <span class="number">2.7</span> : __unicode__(self)</span><br><span class="line">python <span class="number">3</span> : __str__(self)</span><br><span class="line">然后在方法中返回self.var<span class="comment">#var是类中数据中用来显示数据的变量</span></span><br></pre></td></tr></table></figure><h4 id="Tamplates-过滤器"><a href="#Tamplates-过滤器" class="headerlink" title="Tamplates 过滤器"></a>Tamplates 过滤器</h4><p>这个过滤器其实可以说就是Linux下的管道符<code>|</code>，Linux玩的转的人对这个一定不会陌生，过滤器的基本形式就像这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;var | <span class="built_in">filter</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>有些过滤器会跟有参数，过滤器的参数都是跟随冒号，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;var | default:<span class="string">&#x27;0&#x27;</span>&#125;&#125;<span class="comment">#为变量var设置默认值0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;更改默认数据库为-MySQL&quot;&gt;&lt;a href=&quot;#更改默认数据库为-MySQL&quot; class=&quot;headerlink&quot; title=&quot;更改默认数据库为 MySQL&quot;&gt;&lt;/a&gt;更改默认数据库为 MySQL&lt;/h4&gt;&lt;p&gt;Django 使用的默认数据库是 SQLite3，如果习惯使用的是 SQLite 的用户就可以不必更换数据库。&lt;/p&gt;
&lt;p&gt;更换数据库的话在&lt;code&gt;settings.py&lt;/code&gt;文件中&lt;code&gt;DATABASES&lt;/code&gt;选项中进行更改&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://skyhive.github.io/categories/Code/"/>
    
    
    <category term="Django" scheme="https://skyhive.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>配置 SSH 免密登录遇到的坑</title>
    <link href="https://skyhive.github.io/2017/12/%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html"/>
    <id>https://skyhive.github.io/2017/12/%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html</id>
    <published>2017-12-08T03:12:43.000Z</published>
    <updated>2022-12-30T08:39:16.143Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学校做一个云计算大赛，需要搭建一个 hadoop 的平台（一共四台服务器，这是一个怎样的 hadoop 啊），搭建的中途遇到一个小插曲。<br>由于需要四台服务器能够互相免密访问，我们需要将四台服务器的公钥互相上传到各个机器，首先运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure><p>然后一直回车，最后会在你主目录下生成一个<code>.ssh</code>目录，其中的<code>id_rsa</code>是你的密钥，<code>id_rsa.pub</code>是你要上传的公钥，<code>known_hosts</code>是你连接过的主机的信息</p><p>我们需要在<code>.ssh</code>目录下建立一个<code>authorized_keys</code>文件，将各个主机的公钥信息存储在该文件下，然后各个主机就可以通过ssh免密登录了，至于具体的原理，大家可以网上自行科普一下，无非是一些加密解密的过程。</p><p>然而就在我以为万无一失的时候，造化弄人，我不管怎么搞都需要输密码，试过改ssh的配置文件也无法解决，最后google到一个解决方法，说是目录的和文件的权限问题，<code>.ssh</code>目录的权限必须得是<strong>700</strong>，而文件<code>authorized_keys</code>的权限必须是<strong>644</strong>，而我当时是664,这才导致无法进行免密登录，这里大家需要注意一下权限的问题，即使权限放大了也是不行的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学校做一个云计算大赛，需要搭建一个 hadoop 的平台（一共四台服务器，这是一个怎样的 hadoop 啊），搭建的中途遇到一个小插曲。&lt;br&gt;由于需要四台服务器能够互相免密访问，我们需要将四台服务器的公钥互相上传到各个机器，首先运行&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="Infra" scheme="https://skyhive.github.io/categories/Infra/"/>
    
    
    <category term="Linux" scheme="https://skyhive.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
